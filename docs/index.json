{
  "api/SipLib.Body.BinaryBodyParser.html": {
    "href": "api/SipLib.Body.BinaryBodyParser.html",
    "title": "Class BinaryBodyParser",
    "keywords": "Class BinaryBodyParser This class extracts both binary and text contents blocks from a SIP message. The ProcessMultiPartContents() method may be used to handle MSRP multipart/mixed message bodies. Inheritance object BinaryBodyParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Body Assembly: SipLib.dll Syntax public class BinaryBodyParser Remarks The reason that this class must be used when there is the possiblity that a SIP message might contain binary data is that almost all SIP related functions treat the entire message as UTF8 encoded strings. If arbitrary binary data is encoded to a UTF8 string then converted back to a raw binary array then encoding errors will occur. Methods | Edit this page View Source ContentsAreBinary(string, string) Determines if the contents of a SIP message body are binary or text. The known binary types are defined in the KnownBinaryTypes array. This array contains only a small subset of the IANA registered MIME types defined at: https://www.iana.org/assignments/media-types/media-types.xhtml Declaration public static bool ContentsAreBinary(string ContentType, string ContentTransferEncoding) Parameters Type Name Description string ContentType Value of the Content-Type header string ContentTransferEncoding Value of the Content-Transfer-Encoding header. May be null if not present. Returns Type Description bool Returns true if the Content-Type is a known binary type or false if it is not. | Edit this page View Source ParseSipBody(byte[], string) Parses a SIP message body. This method should be used when the SIP message body could contain data that must be treated as purely binary data as opposed to character data. Declaration public static List<MessageContentsContainer> ParseSipBody(byte[] MsgBytes, string ContentType) Parameters Type Name Description byte[] MsgBytes Contains the entire SIP message -- headers and the body string ContentType Value of the Content-Type header of the SIP message Returns Type Description List<MessageContentsContainer> Returns a list of SipContentsContainer objects. The list will be empty if the SIP message does not contain a body or if an error occurred. | Edit this page View Source ProcessMultiPartContents(byte[], string) Processes a SIP message with multiple body parts (i.e., Content-Type = multipart/mixed). Some body parts may be binary and some may be text. This method will also work with multipart/mixed MSRP message. Declaration public static List<MessageContentsContainer> ProcessMultiPartContents(byte[] MsgBytes, string ContentType) Parameters Type Name Description byte[] MsgBytes Bytes of the entire message including headers and request line) and the body. Alternatively, pass all of the bytes of only the body of the message. string ContentType Value of the Content-Type header of the overall message. For example: multipart/mixed; boundary=boundary1. The boundary parameter value may be quoted or not. Returns Type Description List<MessageContentsContainer> Returns a list of SipContentsContainer objects. The return value will not be null, but it may be empty is an error occurred."
  },
  "api/SipLib.Body.BodyParser.html": {
    "href": "api/SipLib.Body.BodyParser.html",
    "title": "Class BodyParser",
    "keywords": "Class BodyParser This class extracts both binary and text contents blocks from a SIP message. The ProcessMultiPartContents() method may be used to handle MSRP multipart/mixed message bodies. Inheritance object BodyParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Body Assembly: SipLib.dll Syntax public class BodyParser Remarks The reason that this class must be used when there is the possiblity that a SIP message might contain binary data is that almost all SIP related functions treat the entire message as UTF8 encoded strings. If arbitrary binary data is encoded to a UTF8 string then converted back to a raw binary array then encoding errors will occur. Methods | Edit this page View Source ContentsAreBinary(string, string?) Determines if the contents of a SIP message body are binary or text. The known binary types are defined in the KnownBinaryTypes array. This array contains only a small subset of the IANA registered MIME types defined at: https://www.iana.org/assignments/media-types/media-types.xhtml Declaration public static bool ContentsAreBinary(string ContentType, string? ContentTransferEncoding) Parameters Type Name Description string ContentType Value of the Content-Type header string ContentTransferEncoding Value of the Content-Transfer-Encoding header. May be null if not present. Returns Type Description bool Returns true if the Content-Type is a known binary type or false if it is not. | Edit this page View Source ParseSipBody(byte[], string) Parses a SIP message body. This method should be used when the SIP message body could contain data that must be treated as purely binary data as opposed to character data. Declaration public static List<MessageContentsContainer> ParseSipBody(byte[] MsgBytes, string ContentType) Parameters Type Name Description byte[] MsgBytes Contains the entire SIP message -- headers and the body string ContentType Value of the Content-Type header of the SIP message Returns Type Description List<MessageContentsContainer> Returns a list of MessageContentsContainer objects. The list will be empty if the SIP message does not contain a body or if an error occurred. Exceptions Type Condition NullReferenceException IndexOutOfRangeException Exception | Edit this page View Source ProcessMultiPartContents(byte[], string) Processes a SIP message with multiple body parts (i.e., Content-Type = multipart/mixed). Some body parts may be binary and some may be text. This method will also work with multipart/mixed MSRP messages. Declaration public static List<MessageContentsContainer> ProcessMultiPartContents(byte[] MsgBytes, string ContentType) Parameters Type Name Description byte[] MsgBytes Bytes of the entire message including headers and request line) and the body. Alternatively, pass all of the bytes of only the body of the message. string ContentType Value of the Content-Type header of the overall message. For example: \"multipart/mixed; boundary=boundary1\". The boundary parameter value may be quoted or not. Returns Type Description List<MessageContentsContainer> Returns a list of MessageContentsContainer objects. The return value will not be null, but it may be empty is an error occurred."
  },
  "api/SipLib.Body.ContentTypes.html": {
    "href": "api/SipLib.Body.ContentTypes.html",
    "title": "Class ContentTypes",
    "keywords": "Class ContentTypes Static class that defines values used for the Content-Type SIP and HTTP headers for MIME types used in NG9-1-1 applications. Inheritance object ContentTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Body Assembly: SipLib.dll Syntax public static class ContentTypes Fields | Edit this page View Source AbandonedCall Abandoned Call Notify body contents. See Section 4.2.2.9 of NENA-STA-010.3b. Declaration public const string AbandonedCall = \"application/emergencyCallData.AbandonedCall+json\" Field Value Type Description string | Edit this page View Source Cap Common Alerting Protocol (CAP) contents. See Section 3.1.11 of NENA-STA-010.3b and Common Alerting Protocol Version 1.2 (CAP-v1.2-os). Declaration public const string Cap = \"application/commonalerting-protocol+xml\" Field Value Type Description string | Edit this page View Source Comment Comments for additional data. See RFC 7852. Declaration public const string Comment = \"application/EmergencyCallData.Comment+xml\" Field Value Type Description string | Edit this page View Source ConferenceEvent Content-Type header value for the conference event. See RFC 4575. Declaration public const string ConferenceEvent = \"application/conference+xml\" Field Value Type Description string | Edit this page View Source Control Control information for eCall and VEDS advanced automatic crash notification calls. See RFC 8147. Declaration public const string Control = \"application/EmergencyCallData.Control+xml\" Field Value Type Description string | Edit this page View Source DeviceInfo Device information additional data. See RFC 7852. Declaration public const string DeviceInfo = \"application/EmergencyCallData.DeviceInfo+xml\" Field Value Type Description string | Edit this page View Source ESRPNotify ESRP Route Notify body contents. See Section 4.2.1.6 of NENA-STA-010.3b. Declaration public const string ESRPNotify = \"application/EmergencyCallData.ESRProute+json\" Field Value Type Description string | Edit this page View Source EcallMsd E-Call Minimum Set Data information used in Europe only. See RFC 8147. Declaration public const string EcallMsd = \"application/EmergencyCallData.eCall.MSD\" Field Value Type Description string | Edit this page View Source Edxl Content-Type when a CAP message is enclosed in an EDXL-DE wrapper. See Section 3.1.11 of NENA-STA-010.3b. Declaration public const string Edxl = \"application/emergency-data-exchange-language+xml\" Field Value Type Description string | Edit this page View Source ElementState Element State contents. See Section 2.4.1 of NENA-STA-010.3b. Declaration public const string ElementState = \"application/EmergencyCallData.ElementState+json\" Field Value Type Description string | Edit this page View Source GapOverlap Gap/overlap Notify body contents. See Section 4.3.4 of NENA-STA-010.3b. Declaration public const string GapOverlap = \"application/EmergencyCallData.GapOverlap+json\" Field Value Type Description string | Edit this page View Source Held HTTP Enabled Location Data (HELD) contents. See RFC 5985. Declaration public const string Held = \"application/held+xml\" Field Value Type Description string | Edit this page View Source Lost Location to Service Translation (LoST) contents. See RFC 5222. Declaration public const string Lost = \"application/lost+xml\" Field Value Type Description string | Edit this page View Source NenaCallerInfo Caller information additional data defined by NENA. See NENA-STA-012.2. Declaration public const string NenaCallerInfo = \"application/EmergencyCallData.NENA-CallerInfo+xml\" Field Value Type Description string | Edit this page View Source NenaLocationInfo Location information additional data defined by NENA. See NENA-STA-012.2. Declaration public const string NenaLocationInfo = \"application/EmergencyCallData.NENA-LocationInfo+xml\" Field Value Type Description string | Edit this page View Source Pidf PIDF-LO location information as defined in RFC 3863 and RFC 4119. Declaration public const string Pidf = \"application/pidf+xml\" Field Value Type Description string | Edit this page View Source ProviderInfo Provider information additional data. See RFC 7852. Declaration public const string ProviderInfo = \"application/EmergencyCallData.ProviderInfo+xml\" Field Value Type Description string | Edit this page View Source QueueState Queue State contents. See Section 4.2.1.3 of NENA-STA-010.3b. Declaration public const string QueueState = \"application/EmergencyCallData.QueueState+json\" Field Value Type Description string | Edit this page View Source RoutePolicy MIME type for the Route Policy. See Section 3.3.3 of NENA-STA-010.3b. Declaration public const string RoutePolicy = \"application/EmergencyCallData.auth-policy+json\" Field Value Type Description string | Edit this page View Source Sdp MIME type for Session Description Protocol (SDP) data. See RFC 4566. Declaration public const string Sdp = \"application/sdp\" Field Value Type Description string | Edit this page View Source ServiceInfo Service information additional data. See RFC 7852. Declaration public const string ServiceInfo = \"application/EmergencyCallData.ServiceInfo+xml\" Field Value Type Description string | Edit this page View Source ServiceState Service State contents. See Section 2.4.2 of NENA-STA-010.3b. Declaration public const string ServiceState = \"application/EmergencyCallData.ServiceState+json\" Field Value Type Description string | Edit this page View Source SipFrag SIP fragment. Defined in RFC 3420. Also see RFC 3515. Declaration public const string SipFrag = \"message/sipfrag\" Field Value Type Description string | Edit this page View Source SipRecMetaData SIPREC (SIP Recording Protocol) contents. See RFC 7865. Declaration public const string SipRecMetaData = \"application/rs-metadata+xml\" Field Value Type Description string | Edit this page View Source SubscriberInfo Subscriber information additional data. See RFC 7852. Declaration public const string SubscriberInfo = \"application/EmergencyCallData.SubscriberInfo+xml\" Field Value Type Description string | Edit this page View Source Veds Vehicle emergency data set data for in-vehicle initiated emergency calls (Advanced Automatic Crash Notification). See RFC 8148. Declaration public const string Veds = \"application/EmergencyCallData.VEDS+xml\" Field Value Type Description string"
  },
  "api/SipLib.Body.MessageContentsContainer.html": {
    "href": "api/SipLib.Body.MessageContentsContainer.html",
    "title": "Class MessageContentsContainer",
    "keywords": "Class MessageContentsContainer Class for holding the Content-Type and the contents for a single contents block of a SIP message or an MSRP message. Inheritance object MessageContentsContainer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Body Assembly: SipLib.dll Syntax public class MessageContentsContainer Fields | Edit this page View Source BinaryContents Contains the raw binary data. Will be non-null if IsBinaryContents is true. Declaration public byte[]? BinaryContents Field Value Type Description byte[] | Edit this page View Source ContentDispositon Contains the Content-Disposition header value. Will be null if there is no Content-Disposition header. Declaration public string? ContentDispositon Field Value Type Description string | Edit this page View Source ContentID Contains the Content-ID header value. Will be null if there is none. Declaration public string? ContentID Field Value Type Description string | Edit this page View Source ContentLength Contains the string value of the Content-Length header. Will be null if there is none. Optional for contents blocks in a message where the Contents-Type is multipart/mixed. Declaration public string? ContentLength Field Value Type Description string | Edit this page View Source ContentTransferEncoding Contains the Content-Transfer-Encoding header value. Will be null if there is none. Declaration public string? ContentTransferEncoding Field Value Type Description string | Edit this page View Source ContentType Contains the value of the Content-Type header that indicates the type of the body contents block. Declaration public string ContentType Field Value Type Description string | Edit this page View Source ContentTypeParams Contains a collection of parameters from the Content-Type header. Declaration public NameValueCollection ContentTypeParams Field Value Type Description NameValueCollection | Edit this page View Source IsBinaryContents If true, then the contents contains raw binary data that must not be converted to a string. Declaration public bool IsBinaryContents Field Value Type Description bool | Edit this page View Source StringContents Contains the message body contents as a string. Not null if IsBinaryContents is false. Declaration public string? StringContents Field Value Type Description string"
  },
  "api/SipLib.Body.MultipartBinaryBodyBuilder.html": {
    "href": "api/SipLib.Body.MultipartBinaryBodyBuilder.html",
    "title": "Class MultipartBinaryBodyBuilder",
    "keywords": "Class MultipartBinaryBodyBuilder Class for building multipart/mixed message bodies that may contain binary contents as well as text contents. Inheritance object MultipartBinaryBodyBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Body Assembly: SipLib.dll Syntax public class MultipartBinaryBodyBuilder Methods | Edit this page View Source ToByteArray(List<MessageContentsContainer>, string) Converts a list of contents to a byte array. This method must be used for building multipart/mixed contents if one or more of the contents blocks contains binary contents. It may also be used for building multipart/mixed contents is all of the contents blocks are text. This method may be used for building multipart/mixed bodies for both SIP message and MSRP messages. Declaration public static byte[] ToByteArray(List<MessageContentsContainer> Contents, string BoundaryString) Parameters Type Name Description List<MessageContentsContainer> Contents Contains a list of body contents blocks. string BoundaryString Specifies the string to use for the body delimeter. Must match the value of the boundary parameter in the Content-Type header value. For example, if the Content-Type header value is \"multipart/mixed;boundary=boundary1\", this parameter must be boundary1. Returns Type Description byte[]"
  },
  "api/SipLib.Body.SipBodyBuilder.html": {
    "href": "api/SipLib.Body.SipBodyBuilder.html",
    "title": "Class SipBodyBuilder",
    "keywords": "Class SipBodyBuilder Class for building and attaching the contents body of a SIP request or a SIP response message. Inheritance object SipBodyBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Body Assembly: SipLib.dll Syntax public class SipBodyBuilder Remarks Follow these steps to use this class: Create an instance of this class. Call the AddContent() method for each content block that needs to be added. Call the AttachMessageBody() method with a SIPMessage object to attach the body to. Methods | Edit this page View Source AddContent(string, string, string?, string?) Adds a new content block to the list of contents. Declaration public void AddContent(string contentType, string content, string? contentID, string? contentDisposition) Parameters Type Name Description string contentType Value of the Content-Type header. For example: application/sdp. Required. string content Sting containing the content to add to the message body. Required. string contentID Value of the Content-ID header. Optional, may be null. string contentDisposition Value of the Content-Disposition header. Optional, may be null. | Edit this page View Source AttachMessageBody(SIPMessage) Builds the body of the SIP message from the ContentsList and attaches it to the request body and sets the Content-Type and Content-Length headers in the SIP message. Declaration public void AttachMessageBody(SIPMessage Msg) Parameters Type Name Description SIPMessage Msg SIP request message to add the contents to."
  },
  "api/SipLib.Body.SipBodyContents.html": {
    "href": "api/SipLib.Body.SipBodyContents.html",
    "title": "Class SipBodyContents",
    "keywords": "Class SipBodyContents Container class for adding contents to the body of a SIP request. Inheritance object SipBodyContents Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Body Assembly: SipLib.dll Syntax public class SipBodyContents Constructors | Edit this page View Source SipBodyContents(string, string) Constructs a new object from the Content-Type and the Body. The Content-Disposition and the Content-ID header value are set to null. Declaration public SipBodyContents(string Ct, string Cont) Parameters Type Name Description string Ct Content-Type header value. string Cont Body Fields | Edit this page View Source ContentDisposition Content-Disposition header value for the contents. This field is optional. Declaration public string ContentDisposition Field Value Type Description string | Edit this page View Source ContentID Content-ID header value for the contents. This field is optional. Declaration public string ContentID Field Value Type Description string | Edit this page View Source ContentType Content-Type header value for the contents. This field is required. Declaration public string ContentType Field Value Type Description string | Edit this page View Source Contents Contains the contents to attach to the SIP request. This field is required. Declaration public string Contents Field Value Type Description string"
  },
  "api/SipLib.Body.html": {
    "href": "api/SipLib.Body.html",
    "title": "Namespace SipLib.Body",
    "keywords": "Namespace SipLib.Body Contains classes for working with the body of SIP messages. Classes BodyParser This class extracts both binary and text contents blocks from a SIP message. The ProcessMultiPartContents() method may be used to handle MSRP multipart/mixed message bodies. ContentTypes Static class that defines values used for the Content-Type SIP and HTTP headers for MIME types used in NG9-1-1 applications. MessageContentsContainer Class for holding the Content-Type and the contents for a single contents block of a SIP message or an MSRP message. MultipartBinaryBodyBuilder Class for building multipart/mixed message bodies that may contain binary contents as well as text contents. SipBodyBuilder Class for building and attaching the contents body of a SIP request or a SIP response message."
  },
  "api/SipLib.Channels.AcceptCertificateDelegate.html": {
    "href": "api/SipLib.Channels.AcceptCertificateDelegate.html",
    "title": "Delegate AcceptCertificateDelegate",
    "keywords": "Delegate AcceptCertificateDelegate Delegate definition for a function that a SIPTLSChannel user can provide to determine whether or not to allow a connection given a client's X.509 certificate. Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public delegate bool AcceptCertificateDelegate(X509Certificate? certificate, X509Chain? chain, SslPolicyErrors? sslPolicyErrors) Parameters Type Name Description X509Certificate certificate X509Certificated object that was received from the TLS client or TLS server during the connection handshake process. May be null if the client did not provide a certificate. X509Chain chain Certificate chain for the X.509 certificate that was received. May be null if an X.509 client certificate was not sent. SslPolicyErrors? sslPolicyErrors Contains the SSL (TLS) policy errors that were detected by the underlying OS for the certificate that was received. May be null if qn X.509 certificate was not sent. Returns Type Description bool Return true to accept the connection request or false to reject the connection request."
  },
  "api/SipLib.Channels.AcceptClientCertificateDelegate.html": {
    "href": "api/SipLib.Channels.AcceptClientCertificateDelegate.html",
    "title": "Delegate AcceptClientCertificateDelegate",
    "keywords": "Delegate AcceptClientCertificateDelegate Delegate definition for a function that a SIPTLSChannel user can provide to determine whether or not to allow a connection given a client's X.509 certificate. Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public delegate bool AcceptClientCertificateDelegate(X509Certificate? certificate, X509Chain? chain, SslPolicyErrors? sslPolicyErrors) Parameters Type Name Description X509Certificate certificate X509Certificated object that was received from the TLS client during the connection handshake process. May be null if the client did not provide a certificate. X509Chain chain Certificate chain for the X.509 certificate that was received. May be null if an X.509 client certificate was not sent. SslPolicyErrors? sslPolicyErrors Contains the SSL (TLS) policy errors that were detected by the underlying OS for the certificate that was received. May be null if qn X.509 certificate was not sent. Returns Type Description bool Return true to accept the connection request or false to reject the connection request."
  },
  "api/SipLib.Channels.AcceptConnectionDelegate.html": {
    "href": "api/SipLib.Channels.AcceptConnectionDelegate.html",
    "title": "Delegate AcceptConnectionDelegate",
    "keywords": "Delegate AcceptConnectionDelegate Delegate definition for a function that a SIPChannel user can provide to determine whether or not to allow a connection from a remote SIP endpoint. Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public delegate bool AcceptConnectionDelegate(SIPProtocolsEnum protocol, IPEndPoint remoteEndPoint) Parameters Type Name Description SIPProtocolsEnum protocol Specifies the protocol that the connection request came in on. IPEndPoint remoteEndPoint IPEndPoint (IP address and port) of the remote SIP endpoint that is trying to establish a connection. Returns Type Description bool Return true if the connection request is to be allowed or false if the connection request is to be refused."
  },
  "api/SipLib.Channels.DscpSettings.html": {
    "href": "api/SipLib.Channels.DscpSettings.html",
    "title": "Class DscpSettings",
    "keywords": "Class DscpSettings Static class that defines the default Differentiated Services Code Point (DSCP) values to use for different media types. See RFC 2475 and RFC 3260 for DSCP. The default values are those specified in Section 2.7 of NENA STA-010.3 Inheritance object DscpSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public static class DscpSettings Remarks The DSCP is a 6-bit field that is located in the upper 6 bits of the Type of Service (TOS) field of the IPv4 header or the upper 6 bits Traffic Class byte of the IPv6 header. Fields | Edit this page View Source AudioDscp DSCP value for audio media. Declaration public static uint AudioDscp Field Value Type Description uint | Edit this page View Source MSRPDscp DSCP value for MSRP media. Declaration public static uint MSRPDscp Field Value Type Description uint | Edit this page View Source RTTDscp DSCP value for Real Time Text (RTT) media. Declaration public static uint RTTDscp Field Value Type Description uint | Edit this page View Source SipSignalingDscp DSCP value for SIP signaling. Declaration public static uint SipSignalingDscp Field Value Type Description uint | Edit this page View Source VideoDscp DSCP value for for video media. Declaration public static uint VideoDscp Field Value Type Description uint Methods | Edit this page View Source GetDscpForMediaType(string) Gets the DSCP setting for a media type. Declaration public static uint GetDscpForMediaType(string mediaType) Parameters Type Name Description string mediaType Input media type. Must be one of: audio, text (for RTT), message (for MSRP), or video Returns Type Description uint Returns the configured DSCP value to use"
  },
  "api/SipLib.Channels.LogInvalidSipMessageDelegate.html": {
    "href": "api/SipLib.Channels.LogInvalidSipMessageDelegate.html",
    "title": "Delegate LogInvalidSipMessageDelegate",
    "keywords": "Delegate LogInvalidSipMessageDelegate Delegate type for the LogInvalidSipMessage event of the SipTransport class. Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public delegate void LogInvalidSipMessageDelegate(byte[] msgBytes, IPEndPoint remoteEndPoint, SIPMessageTypesEnum messageType, SipTransport sipTransport) Parameters Type Name Description byte[] msgBytes Byte array containing the received message. IPEndPoint remoteEndPoint Remote endpoint that sent the message. SIPMessageTypesEnum messageType Message type SipTransport sipTransport SipTransport object that fired the event. See Also LogInvalidSipMessage"
  },
  "api/SipLib.Channels.LogSipRequestDelegate.html": {
    "href": "api/SipLib.Channels.LogSipRequestDelegate.html",
    "title": "Delegate LogSipRequestDelegate",
    "keywords": "Delegate LogSipRequestDelegate Delegate type for the LogSipRequest event of the SipTransport class. Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public delegate void LogSipRequestDelegate(SIPRequest sipRequest, IPEndPoint remoteEndPoint, bool Sent, SipTransport sipTransport) Parameters Type Name Description SIPRequest sipRequest SIPRequest that was sent or received IPEndPoint remoteEndPoint If Sent is true then this is the IPEndPoint that the request was sent to. If Sent is false, then this is the IPEndPoint that the request was received from. bool Sent True if the SipTransport sent the SIPRequest. False if the SipTransport received the SIPRequest. SipTransport sipTransport SipTransport object that fired the event. See Also LogSipRequest"
  },
  "api/SipLib.Channels.LogSipResponseDelegate.html": {
    "href": "api/SipLib.Channels.LogSipResponseDelegate.html",
    "title": "Delegate LogSipResponseDelegate",
    "keywords": "Delegate LogSipResponseDelegate Delegate type for the LogSipResponse event of the SipTransport class. Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public delegate void LogSipResponseDelegate(SIPResponse sipResponse, IPEndPoint remoteEndPoint, bool Sent, SipTransport sipTransport) Parameters Type Name Description SIPResponse sipResponse SIPResponse that was sent or received IPEndPoint remoteEndPoint If Sent is true then this is the IPEndPoint that the response was sent to. If Sent is false, then this is the IPEndPoint from which the response was received from. bool Sent If true then the SipTransport sent the SIPResponse. If false then the SipTransport received the response. SipTransport sipTransport SipTransport object that fired the event. See Also LogSipResponse"
  },
  "api/SipLib.Channels.Qos.html": {
    "href": "api/SipLib.Channels.Qos.html",
    "title": "Class Qos",
    "keywords": "Class Qos This class handles setting the Differentiated Services Code Point (DSCP) for both IPv4 and IPv6 for both Windows and Linux. The Windows terminology is Quality of Service (QOS). Inheritance object Qos Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public class Qos Constructors | Edit this page View Source Qos() Constructor Declaration public Qos() Methods | Edit this page View Source SetTcpDscp(TcpClient, uint, IPEndPoint) Sets the DSCP bits in the TOS field of the IP packets sent by the UdpClient. In Windows this is done by adding the UDP socket handle to a QOS flow. In Linux this is done by setting the socket options. Declaration public void SetTcpDscp(TcpClient tcpClient, uint DscpValue, IPEndPoint RemIpe) Parameters Type Name Description TcpClient tcpClient TcpClient object to the DSCP value for. The socket must be in the connected state. uint DscpValue DSCP value to set. Must be between 0x00 and 0x3f inclusive. IPEndPoint RemIpe Remote IP endpoint of the socket. | Edit this page View Source SetUdpDscp(UdpClient, uint) Sets the DSCP bits in the TOS field of the IP packets sent by the UdpClient. In Windows this is done by adding the UDP socket handle to a QOS flow. In Linux this is done by setting the socket options. Declaration public void SetUdpDscp(UdpClient udpClient, uint DscpValue) Parameters Type Name Description UdpClient udpClient UdpClient to set the DSCP value for. uint DscpValue DSCP value to set. Must be between 0x00 and 0x3f inclusive. | Edit this page View Source Shutdown() When running under Windows, this method must be called before the UDP/TCP connection is closed to remove the socket handle from the QOS flow and to release the handle to the Windows QOS subsystem. It is not necessary to call this method when running under Linux. Calling it performs no action. Declaration public void Shutdown()"
  },
  "api/SipLib.Channels.SIPChannel.html": {
    "href": "api/SipLib.Channels.SIPChannel.html",
    "title": "Class SIPChannel",
    "keywords": "Class SIPChannel Base class for all SIP channel classes. Inheritance object SIPChannel SIPTCPChannel SIPTLSChannel SIPUDPChannel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public abstract class SIPChannel Fields | Edit this page View Source AcceptConnection Delegate function that can be provided by the user of a SIPConnection derived class to determine whether or not to accept a SIP connection request. The function should return true to accept a connection request or false to refuse it. If this delegate member is null then all connection requests will be received regardless of where they came from. Declaration protected AcceptConnectionDelegate? AcceptConnection Field Value Type Description AcceptConnectionDelegate | Edit this page View Source ChannelStarted This is set to true when the main listener thread has been started. Declaration public bool ChannelStarted Field Value Type Description bool | Edit this page View Source Closed True if the connection has been closed. Declaration protected bool Closed Field Value Type Description bool | Edit this page View Source LocalSIPEndPoint This is the local SIPEndPoint Declaration protected SIPEndPoint? LocalSIPEndPoint Field Value Type Description SIPEndPoint | Edit this page View Source LocalTCPSockets Keeps a list of TCP sockets this process is listening on to prevent it establishing TCP connections to itself. This is used only for TCP and TLS. Declaration protected List<string> LocalTCPSockets Field Value Type Description List<string> | Edit this page View Source SIPMessageReceived Delegate (callback function) that gets called when a SIP message is received. Declaration public SIPMessageReceivedDelegate? SIPMessageReceived Field Value Type Description SIPMessageReceivedDelegate | Edit this page View Source SipUri This is the local SIPURI Declaration protected SIPURI? SipUri Field Value Type Description SIPURI Properties | Edit this page View Source IsReliable If the underlying transport channel is reliable, such as TCP, this will be set to true; Declaration public bool IsReliable { get; } Property Value Type Description bool | Edit this page View Source IsTLS If true then the SIPConnection uses Transport Layer Security (TLS). Declaration public bool IsTLS { get; } Property Value Type Description bool | Edit this page View Source SIPChannelContactURI This is the URI to be used for contacting this SIP channel. Declaration public SIPURI SIPChannelContactURI { get; } Property Value Type Description SIPURI | Edit this page View Source SIPChannelEndPoint Gets the local SIPEndPoint for the SIP channel Declaration public SIPEndPoint? SIPChannelEndPoint { get; } Property Value Type Description SIPEndPoint Methods | Edit this page View Source Close() Closes the connection Declaration public abstract void Close() | Edit this page View Source GetConnectionsList() Gets reference to the dictionary of the connections. The string is the string version of the remote endpoint's IPEndPoint. Declaration protected abstract Dictionary<string, SIPConnection> GetConnectionsList() Returns Type Description Dictionary<string, SIPConnection> | Edit this page View Source GetProtocol() Gets the transport protocol used for this channel. Declaration public SIPProtocolsEnum GetProtocol() Returns Type Description SIPProtocolsEnum Returns a SIPProtocolsEnum value. | Edit this page View Source GetRemoteCertificate(string) Virtual function to get the remote certificate for a connection that is being managed by this SIPChannel object. Declaration public virtual X509Certificate? GetRemoteCertificate(string strRemoteEp) Parameters Type Name Description string strRemoteEp String version of the IP endpoint of the connection. Returns Type Description X509Certificate Returns null if there is no remote certificate available. | Edit this page View Source GetRemoteCertificate2(string) Virtual function to get the remote certificate for a connection that is being managed by this SIPChannel object. Declaration public virtual X509Certificate2? GetRemoteCertificate2(string strRemoteEp) Parameters Type Name Description string strRemoteEp String version of the IP endpoint of the connection. Returns Type Description X509Certificate2 Returns null if there is no remote certificate available. | Edit this page View Source IsConnectionEstablished(IPEndPoint) Returns true if there is an established connection the specified IPEndPoint Declaration public abstract bool IsConnectionEstablished(IPEndPoint remoteEndPoint) Parameters Type Name Description IPEndPoint remoteEndPoint Returns Type Description bool | Edit this page View Source PruneConnections(string) Periodically checks the established connections and closes any that have not had a transmission for a specified period or where the number of connections allowed per IP address has been exceeded. Only relevant for connection oriented channels such as TCP and TLS. Declaration protected void PruneConnections(string threadName) Parameters Type Name Description string threadName | Edit this page View Source Send(IPEndPoint, byte[]) Sends a SIP message to the specified destination IPEndPoint Declaration public abstract void Send(IPEndPoint destinationEndPoint, byte[] buffer) Parameters Type Name Description IPEndPoint destinationEndPoint Destination to send the message to byte[] buffer Byte array containing the SIP message | Edit this page View Source Send(IPEndPoint, byte[], string?) Sends a SIP message to a destination IPEndPoint given a byte array and the namd of the server's X.509 certificate name Declaration public abstract void Send(IPEndPoint destinationEndPoint, byte[] buffer, string? serverCertificateName) Parameters Type Name Description IPEndPoint destinationEndPoint Destination to send the message to byte[] buffer Byte array containing the SIP message string serverCertificateName Name of the server's X.509 certificate | Edit this page View Source Send(IPEndPoint, string) Sends a SIP message to the specified destination IPEndPoint Declaration public abstract void Send(IPEndPoint destinationEndPoint, string message) Parameters Type Name Description IPEndPoint destinationEndPoint Destination to send the message to string message String message to send | Edit this page View Source SetupContactURI(string?) Sets the local contact SIPURI for this SIPChannel. This method must be called in the constructor of all derived classes. Declaration protected void SetupContactURI(string? User) Parameters Type Name Description string User Specifies the User part of the SIPURI. This may be null."
  },
  "api/SipLib.Channels.SIPConnection.html": {
    "href": "api/SipLib.Channels.SIPConnection.html",
    "title": "Class SIPConnection",
    "keywords": "Class SIPConnection Class for managing a SIP connection. Inheritance object SIPConnection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public class SIPConnection Constructors | Edit this page View Source SIPConnection(SIPChannel, TcpClient, Stream, IPEndPoint, SIPProtocolsEnum, SIPConnectionsEnum) Class for managing a bi-directional SIP connection. This class is used by the steam based channel classes (SIPTCPChannel and SIPTLSChannel). Declaration public SIPConnection(SIPChannel channel, TcpClient tcpClient, Stream sipStream, IPEndPoint remoteEndPoint, SIPProtocolsEnum connectionProtocol, SIPConnectionsEnum connectionType) Parameters Type Name Description SIPChannel channel Channel that owns this connection TcpClient tcpClient TcpClient of the channel Stream sipStream Underlying stream for the connection IPEndPoint remoteEndPoint Remote IPEndPoint of the connection SIPProtocolsEnum connectionProtocol Type of transport protocol used by the connection SIPConnectionsEnum connectionType Either a Listener (server) or a Caller (client) Fields | Edit this page View Source ConnectionProtocol Connection/transport protocol Declaration public SIPProtocolsEnum ConnectionProtocol Field Value Type Description SIPProtocolsEnum For example: udp, tcp, tls, ws, wss. | Edit this page View Source ConnectionType Connection type Declaration public SIPConnectionsEnum ConnectionType Field Value Type Description SIPConnectionsEnum The available connection types are Listener or Caller | Edit this page View Source LastTransmission Contains the time when a SIP packet was last sent or received. Declaration public DateTime LastTransmission Field Value Type Description DateTime | Edit this page View Source RemoteEndPoint Remote endpoint of the connection Declaration public IPEndPoint RemoteEndPoint Field Value Type Description IPEndPoint Properties | Edit this page View Source LocalEndpoint Gets the IPEndpoint that this connection object is listening on. Declaration public IPEndPoint? LocalEndpoint { get; } Property Value Type Description IPEndPoint Events | Edit this page View Source SIPMessageReceived Fired when a complete SIP message is received Declaration public event SIPMessageReceivedDelegate? SIPMessageReceived Event Type Type Description SIPMessageReceivedDelegate | Edit this page View Source SIPSocketDisconnected Fired when the SIP socket gets disconnected Declaration public event SIPConnectionDisconnectedDelegate? SIPSocketDisconnected Event Type Type Description SIPConnectionDisconnectedDelegate"
  },
  "api/SipLib.Channels.SIPConnectionDisconnectedDelegate.html": {
    "href": "api/SipLib.Channels.SIPConnectionDisconnectedDelegate.html",
    "title": "Delegate SIPConnectionDisconnectedDelegate",
    "keywords": "Delegate SIPConnectionDisconnectedDelegate Delegate type for the SIPSocketDisconnected event of the SIPConnection class. Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public delegate void SIPConnectionDisconnectedDelegate(IPEndPoint remoteEndPoint) Parameters Type Name Description IPEndPoint remoteEndPoint IPEndPoint of the remote endpoint"
  },
  "api/SipLib.Channels.SIPConnectionsEnum.html": {
    "href": "api/SipLib.Channels.SIPConnectionsEnum.html",
    "title": "Enum SIPConnectionsEnum",
    "keywords": "Enum SIPConnectionsEnum Enumeration for the type of the SIP connection type. Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public enum SIPConnectionsEnum Fields Name Description Caller Indicates the connection was initiated locally to a remote server socket. Listener Indicates the connection was initiated by the remote client to a local server socket."
  },
  "api/SipLib.Channels.SIPMessageReceivedDelegate.html": {
    "href": "api/SipLib.Channels.SIPMessageReceivedDelegate.html",
    "title": "Delegate SIPMessageReceivedDelegate",
    "keywords": "Delegate SIPMessageReceivedDelegate Delegate definition for the SIPMessageReceived event of the SIPConnection class. Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public delegate void SIPMessageReceivedDelegate(SIPChannel sipChannel, SIPEndPoint remoteEndPoint, byte[] buffer) Parameters Type Name Description SIPChannel sipChannel SIPChannel derived object that the SIP message was received on. SIPEndPoint remoteEndPoint SIPEndPoint of the sender of the message. byte[] buffer Contains the binary bytes of the SIP message."
  },
  "api/SipLib.Channels.SIPTCPChannel.html": {
    "href": "api/SipLib.Channels.SIPTCPChannel.html",
    "title": "Class SIPTCPChannel",
    "keywords": "Class SIPTCPChannel Class for managing a SIP connection using the TCP protocol. Inheritance object SIPChannel SIPTCPChannel Inherited Members SIPChannel.AcceptConnection SIPChannel.LocalTCPSockets SIPChannel.SipUri SIPChannel.ChannelStarted SIPChannel.LocalSIPEndPoint SIPChannel.SIPChannelEndPoint SIPChannel.SetupContactURI(string) SIPChannel.SIPChannelContactURI SIPChannel.IsReliable SIPChannel.IsTLS SIPChannel.Closed SIPChannel.SIPMessageReceived SIPChannel.PruneConnections(string) SIPChannel.GetProtocol() SIPChannel.GetRemoteCertificate2(string) SIPChannel.GetRemoteCertificate(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public class SIPTCPChannel : SIPChannel Constructors | Edit this page View Source SIPTCPChannel(IPEndPoint, string?, AcceptConnectionDelegate?) Constructs a new SIPTCPChannel and initializes the connection. Declaration public SIPTCPChannel(IPEndPoint localIPEndPoint, string? User = null, AcceptConnectionDelegate? acceptConnection = null) Parameters Type Name Description IPEndPoint localIPEndPoint Local IPEndPoint to listen on. string User Specifies the User part of the SIPURI for the local contact URI. This parameter defaults to null. AcceptConnectionDelegate acceptConnection User provided callback function that can determine whether or not to accept a network connection based on the client's IPEndPoint and the protocol type. Defaults to null. Methods | Edit this page View Source Close() Closes the listener socket and closes connections to all clients. Declaration public override void Close() Overrides SIPChannel.Close() | Edit this page View Source GetConnectionsList() Gets a dictionary containing the current connections. The returned object must be locked by the caller. Declaration protected override Dictionary<string, SIPConnection> GetConnectionsList() Returns Type Description Dictionary<string, SIPConnection> Overrides SIPChannel.GetConnectionsList() | Edit this page View Source IsConnectionEstablished(IPEndPoint) Checks to see if this object is currently connected to a remote endpoint Declaration public override bool IsConnectionEstablished(IPEndPoint remoteEndPoint) Parameters Type Name Description IPEndPoint remoteEndPoint Returns Type Description bool True if currently connected or false if not connected Overrides SIPChannel.IsConnectionEstablished(IPEndPoint) | Edit this page View Source Send(IPEndPoint, byte[]) Sends a byte array Declaration public override void Send(IPEndPoint dstEndPoint, byte[] buffer) Parameters Type Name Description IPEndPoint dstEndPoint IPEndPoint to send the message to. byte[] buffer Message to send. Overrides SIPChannel.Send(IPEndPoint, byte[]) | Edit this page View Source Send(IPEndPoint, byte[], string?) Sends a byte array. Declaration public override void Send(IPEndPoint dstEndPoint, byte[] buffer, string? serverCertificateName) Parameters Type Name Description IPEndPoint dstEndPoint IPEndPoint to send the message to. byte[] buffer Message to send. string serverCertificateName Not used. May be null. Overrides SIPChannel.Send(IPEndPoint, byte[], string?) | Edit this page View Source Send(IPEndPoint, string) Sends a string Declaration public override void Send(IPEndPoint destinationEndPoint, string message) Parameters Type Name Description IPEndPoint destinationEndPoint IPEndPoint to send the message to. string message Message to send. Overrides SIPChannel.Send(IPEndPoint, string) Events | Edit this page View Source SIPConnectionDisconnected Fired if the TCP connection gets disconnected Declaration public event SipConnectionFailedDelegate? SIPConnectionDisconnected Event Type Type Description SipConnectionFailedDelegate | Edit this page View Source SIPConnectionFailed Fired if the TCP connection request to a remote endpoint failed. Declaration public event SipConnectionFailedDelegate? SIPConnectionFailed Event Type Type Description SipConnectionFailedDelegate"
  },
  "api/SipLib.Channels.SIPTLSChannel.html": {
    "href": "api/SipLib.Channels.SIPTLSChannel.html",
    "title": "Class SIPTLSChannel",
    "keywords": "Class SIPTLSChannel Class for managing SIP connections using the Transport Layer Security (TLS) protocol. Inheritance object SIPChannel SIPTLSChannel Inherited Members SIPChannel.AcceptConnection SIPChannel.LocalTCPSockets SIPChannel.SipUri SIPChannel.ChannelStarted SIPChannel.LocalSIPEndPoint SIPChannel.SIPChannelEndPoint SIPChannel.SetupContactURI(string) SIPChannel.SIPChannelContactURI SIPChannel.IsReliable SIPChannel.IsTLS SIPChannel.Closed SIPChannel.SIPMessageReceived SIPChannel.PruneConnections(string) SIPChannel.GetProtocol() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public class SIPTLSChannel : SIPChannel Constructors | Edit this page View Source SIPTLSChannel(X509Certificate2?, IPEndPoint, string?, bool, AcceptConnectionDelegate?, AcceptCertificateDelegate?, AcceptCertificateDelegate?) Constructs a new SIPTLSChannel and initializes it. Declaration public SIPTLSChannel(X509Certificate2? serverCertificate, IPEndPoint localIPEndPoint, string? User = null, bool UseMutualAuth = true, AcceptConnectionDelegate? acceptConnection = null, AcceptCertificateDelegate? acceptClientCertificate = null, AcceptCertificateDelegate? acceptServerCertificate = null) Parameters Type Name Description X509Certificate2 serverCertificate Server X.509 certificate to use IPEndPoint localIPEndPoint Local IPEndPoint to listen on string User Specifies the User part of the SIPURI for the local contact URI. This parameter defaults to null. bool UseMutualAuth If true then use mutual TLS authentication. This parameter defaults to true. AcceptConnectionDelegate acceptConnection User provided callback function that can determine whether or not to accept a network connection based on the client's IPEndPoint and the protocol type. Defaults to null. AcceptCertificateDelegate acceptClientCertificate User provided callback function that can determine whether or not to accept a connection from a client based on the client's X.509 certificate. Defaults to null. AcceptCertificateDelegate acceptServerCertificate User provided callback function that can determine whether or not to allow a connection to a server base on the server's X.509 certificate. Defaults to null. Methods | Edit this page View Source Close() Closes the listener socket and closes connections to all clients. Declaration public override void Close() Overrides SIPChannel.Close() | Edit this page View Source GetConnectionsList() Gets the current connections dictionary. The returned object must be locked by the caller. Don't use this function because its not thread safe. Declaration protected override Dictionary<string, SIPConnection> GetConnectionsList() Returns Type Description Dictionary<string, SIPConnection> Overrides SIPChannel.GetConnectionsList() | Edit this page View Source GetRemoteCertificate(string) Virtual function to get the remote certificate for a connection that is being managed by this SIPChannel object. Declaration public override X509Certificate? GetRemoteCertificate(string strRemoteEp) Parameters Type Name Description string strRemoteEp String version of the IP endpoint of the connection. Returns Type Description X509Certificate Returns null if there is no remote certificate available. Overrides SIPChannel.GetRemoteCertificate(string) | Edit this page View Source GetRemoteCertificate2(string) Virtual function to get the remote certificate for a connection that is being managed by this SIPChannel object. Declaration public override X509Certificate2? GetRemoteCertificate2(string strRemoteEp) Parameters Type Name Description string strRemoteEp String version of the IP endpoint of the connection. Returns Type Description X509Certificate2 Returns null if there is no remote certificate available. Overrides SIPChannel.GetRemoteCertificate2(string) | Edit this page View Source IsConnectionEstablished(IPEndPoint) Checks to see if this object is currently connected to a remote endpoint Declaration public override bool IsConnectionEstablished(IPEndPoint remoteEndPoint) Parameters Type Name Description IPEndPoint remoteEndPoint Returns Type Description bool True if currently connected or false if not connected Overrides SIPChannel.IsConnectionEstablished(IPEndPoint) | Edit this page View Source Send(IPEndPoint, byte[]) Sends a byte array Declaration public override void Send(IPEndPoint dstEndPoint, byte[] buffer) Parameters Type Name Description IPEndPoint dstEndPoint IPEndPoint to send the message to. byte[] buffer Message to send. Overrides SIPChannel.Send(IPEndPoint, byte[]) | Edit this page View Source Send(IPEndPoint, byte[], string?) Sends a byte array Declaration public override void Send(IPEndPoint dstEndPoint, byte[] buffer, string? serverCertificateName) Parameters Type Name Description IPEndPoint dstEndPoint IPEndPoint to send the message to. byte[] buffer Message to send. string serverCertificateName Name of the remote endpoint's X.509 certificate. Overrides SIPChannel.Send(IPEndPoint, byte[], string?) | Edit this page View Source Send(IPEndPoint, string) Sends a string Declaration public override void Send(IPEndPoint destinationEndPoint, string message) Parameters Type Name Description IPEndPoint destinationEndPoint IPEndPoint to send the message to. string message Message to send. Overrides SIPChannel.Send(IPEndPoint, string) Remarks Must already be connected to the remote endpoint in order to use this method. Events | Edit this page View Source SIPConnectionDisconnected Fired if the TCP connection gets disconnected Declaration public event SipConnectionFailedDelegate? SIPConnectionDisconnected Event Type Type Description SipConnectionFailedDelegate | Edit this page View Source SIPConnectionFailed Fired if the TCP connection request to a remote endpoint failed. Declaration public event SipConnectionFailedDelegate? SIPConnectionFailed Event Type Type Description SipConnectionFailedDelegate"
  },
  "api/SipLib.Channels.SIPUDPChannel.html": {
    "href": "api/SipLib.Channels.SIPUDPChannel.html",
    "title": "Class SIPUDPChannel",
    "keywords": "Class SIPUDPChannel Class for managing a SIP connection using the UDP transport protocol. Inheritance object SIPChannel SIPUDPChannel Inherited Members SIPChannel.AcceptConnection SIPChannel.LocalTCPSockets SIPChannel.SipUri SIPChannel.ChannelStarted SIPChannel.LocalSIPEndPoint SIPChannel.SIPChannelEndPoint SIPChannel.SetupContactURI(string) SIPChannel.SIPChannelContactURI SIPChannel.IsReliable SIPChannel.IsTLS SIPChannel.Closed SIPChannel.SIPMessageReceived SIPChannel.PruneConnections(string) SIPChannel.GetProtocol() SIPChannel.GetRemoteCertificate2(string) SIPChannel.GetRemoteCertificate(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public class SIPUDPChannel : SIPChannel Constructors | Edit this page View Source SIPUDPChannel(IPEndPoint, string?, AcceptConnectionDelegate?) Constructs a new SIPUDPChannel. Declaration public SIPUDPChannel(IPEndPoint localIPEndPoint, string? User = null, AcceptConnectionDelegate? acceptConnection = null) Parameters Type Name Description IPEndPoint localIPEndPoint Local IPEndpoint to listen on. string User Specifies the User part of the SIPURI for the local contact URI. This parameter is optional and defaults to null. AcceptConnectionDelegate acceptConnection User provided callback function that can determine whether or not to accept a network connection based on the client's IPEndPoint and the protocol type. Defaults to null. Methods | Edit this page View Source Close() Closes the UDP client. Declaration public override void Close() Overrides SIPChannel.Close() | Edit this page View Source DisableConnectionReset(UdpClient) Performs a IOControl call to disable SocketExceptions that occur when ICMP port unreachable messages occur if the remote client is not listening on its port. This method can be called if the platform is Windows. Declaration public static void DisableConnectionReset(UdpClient Client) Parameters Type Name Description UdpClient Client UdpClient to disable SocketExceptions on. Remarks The SocketExceptions only occur on Windows. See the first answer at: https://stackoverflow.com/questions/5199026/c-sharp-async-udp-listener-socketexception See also: https://microsoft.public.win32.programmer.networks.narkive.com/RlxW2V6m/udp-comms-and-connection-reset-problem | Edit this page View Source GetConnectionsList() Not used for UDP. Declaration protected override Dictionary<string, SIPConnection> GetConnectionsList() Returns Type Description Dictionary<string, SIPConnection> Returns an empty Dictionary object for UDP because UDP is not a connected transport protocol. Overrides SIPChannel.GetConnectionsList() | Edit this page View Source IsConnectionEstablished(IPEndPoint) Gets the connection status. Declaration public override bool IsConnectionEstablished(IPEndPoint remoteEndPoint) Parameters Type Name Description IPEndPoint remoteEndPoint Endpoint to test. Returns Type Description bool Always returns true for UDP because UDP is not a connected transport protocol. Overrides SIPChannel.IsConnectionEstablished(IPEndPoint) | Edit this page View Source Send(IPEndPoint, byte[]) Sends a byte array Declaration public override void Send(IPEndPoint destinationEndPoint, byte[] buffer) Parameters Type Name Description IPEndPoint destinationEndPoint IPEndPoint to send the message to. byte[] buffer Message to send. Overrides SIPChannel.Send(IPEndPoint, byte[]) Exceptions Type Condition ArgumentException Thrown if the SIP message is longer than that allowed by UDP | Edit this page View Source Send(IPEndPoint, byte[], string?) Sends a byte array. Declaration public override void Send(IPEndPoint dstEndPoint, byte[] buffer, string? serverCertificateName) Parameters Type Name Description IPEndPoint dstEndPoint IPEndPoint to send the message to. byte[] buffer Message to send. string serverCertificateName Not used. May be null. Overrides SIPChannel.Send(IPEndPoint, byte[], string?) | Edit this page View Source Send(IPEndPoint, string) Sends a string message. Declaration public override void Send(IPEndPoint destinationEndPoint, string message) Parameters Type Name Description IPEndPoint destinationEndPoint IPEndPoint to send the message to. string message Input message to send. Overrides SIPChannel.Send(IPEndPoint, string) Exceptions Type Condition ArgumentException Thrown if the SIP message is longer than that allowed by UDP"
  },
  "api/SipLib.Channels.SipConnectionFailedDelegate.html": {
    "href": "api/SipLib.Channels.SipConnectionFailedDelegate.html",
    "title": "Delegate SipConnectionFailedDelegate",
    "keywords": "Delegate SipConnectionFailedDelegate Delegate type for the SIPConnectionFailed event of the SIPTCPChannel and the SIPTLSChannel classes. Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public delegate void SipConnectionFailedDelegate(SIPChannel sipChannel, IPEndPoint remoteEndPoint) Parameters Type Name Description SIPChannel sipChannel SIPChannel derived object that the connection request failed on. IPEndPoint remoteEndPoint Remote IPEndPoint"
  },
  "api/SipLib.Channels.SipRequestReceivedDelegate.html": {
    "href": "api/SipLib.Channels.SipRequestReceivedDelegate.html",
    "title": "Delegate SipRequestReceivedDelegate",
    "keywords": "Delegate SipRequestReceivedDelegate Delegate type for the SipRequestReceived event of the SipTransportManager class. Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public delegate void SipRequestReceivedDelegate(SIPRequest sipRequest, SIPEndPoint remoteEndPoint, SipTransport sipTransportManager) Parameters Type Name Description SIPRequest sipRequest Request that was received. SIPEndPoint remoteEndPoint Remote endpoint that received the message. SipTransport sipTransportManager SipTransportManager that fired the event. See Also SipRequestReceived"
  },
  "api/SipLib.Channels.SipResponseReceivedDelegate.html": {
    "href": "api/SipLib.Channels.SipResponseReceivedDelegate.html",
    "title": "Delegate SipResponseReceivedDelegate",
    "keywords": "Delegate SipResponseReceivedDelegate Delegate type for the SipResponseReceived event of the SipTransportManager class. Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public delegate void SipResponseReceivedDelegate(SIPResponse sipResponse, SIPEndPoint remoteEndPoint, SipTransport sipTransportManager) Parameters Type Name Description SIPResponse sipResponse Request that was received SIPEndPoint remoteEndPoint Remote endpoint that sent the response SipTransport sipTransportManager SipTransportManager that fired the event. See Also SipResponseReceived"
  },
  "api/SipLib.Channels.SipTransactionCompleteDelegate.html": {
    "href": "api/SipLib.Channels.SipTransactionCompleteDelegate.html",
    "title": "Delegate SipTransactionCompleteDelegate",
    "keywords": "Delegate SipTransactionCompleteDelegate Delegate type for the method that the SipTransport will call when a SIP transaction has been completed. Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public delegate void SipTransactionCompleteDelegate(SIPRequest sipRequest, SIPResponse? sipResponse, IPEndPoint remoteEndPoint, SipTransport sipTransport, SipTransactionBase Transaction) Parameters Type Name Description SIPRequest sipRequest SIP request for the transaction. SIPResponse sipResponse SIP response that was received. Will be null if the transaction timed out. IPEndPoint remoteEndPoint Endpoint that send the response. Will be null if the transaction timed out. SipTransport sipTransport SipTransport that called this method. SipTransactionBase Transaction Transaction that completed."
  },
  "api/SipLib.Channels.SipTransport.html": {
    "href": "api/SipLib.Channels.SipTransport.html",
    "title": "Class SipTransport",
    "keywords": "Class SipTransport This class manages sending and receiving SIP messages on a single SIPChannel. It also manages SIP transactions for transactions on that SIPChannel. Inheritance object SipTransport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public class SipTransport Constructors | Edit this page View Source SipTransport(SIPChannel) Constructor Declaration public SipTransport(SIPChannel sipChannel) Parameters Type Name Description SIPChannel sipChannel SIPChannel to use for sending and receiving SIP messages. Properties | Edit this page View Source SipChannel Gets the SIPChannel object that this class is managing. Declaration public SIPChannel SipChannel { get; } Property Value Type Description SIPChannel | Edit this page View Source TransactionCount Gets the number of active transactions. Declaration public int TransactionCount { get; } Property Value Type Description int Methods | Edit this page View Source SendSipRequest(SIPRequest, IPEndPoint) Sends a SIP request on the SIPChannel Declaration public void SendSipRequest(SIPRequest Request, IPEndPoint DestEp) Parameters Type Name Description SIPRequest Request SIP request to send IPEndPoint DestEp Destination endpoint | Edit this page View Source SendSipResponse(SIPResponse, SIPEndPoint) Sends a SIP response message on the SIPChannel. This method fires the LogSipResponse event for NG9-1-1 event logging. Declaration public void SendSipResponse(SIPResponse Response, SIPEndPoint DestEp) Parameters Type Name Description SIPResponse Response SIP response message to send SIPEndPoint DestEp Destination SIPEndPoint to send the message to. | Edit this page View Source SendSipResponse(SIPResponse, IPEndPoint) Sends a SIP response message on the SIPChannel. This method fires the LogSipResponse event for NG9-1-1 event logging. Declaration public void SendSipResponse(SIPResponse Response, IPEndPoint DestEp) Parameters Type Name Description SIPResponse Response SIP response message to send IPEndPoint DestEp Destination IPEndPoint to send the message to. | Edit this page View Source Shutdown() Call this method to shutdown the processing thread and close the SIP channel and all current connections. Declaration public void Shutdown() | Edit this page View Source Start() Call this method after hooking the events to start the message processing thread. Declaration public void Start() | Edit this page View Source StartClientInvite(SIPRequest, IPEndPoint, SipTransactionCompleteDelegate?, TransactionResponseReceivedDelegate?) Creates and starts a client INVITE transaction. Declaration public ClientInviteTransaction StartClientInvite(SIPRequest request, IPEndPoint remoteEndPoint, SipTransactionCompleteDelegate? completeDelegate, TransactionResponseReceivedDelegate? responseReceivedDelegate) Parameters Type Name Description SIPRequest request SIP INVITE request to send IPEndPoint remoteEndPoint Destination to send the request to SipTransactionCompleteDelegate completeDelegate Notification callback. Called when the transaction is completed or terminated. May be null if a notification is not required. TransactionResponseReceivedDelegate responseReceivedDelegate Callback function to call when a response is received for the transaction. Optional, may be null. This may be used when the client transaction user needs to be informed of provisional responses (ex. 180 Ringing or 183 Session Progress) Returns Type Description ClientInviteTransaction Returns a new ClientInviteTransaction object | Edit this page View Source StartClientInviteAsync(SIPRequest, IPEndPoint, TransactionResponseReceivedDelegate?) Creates and starts a client INVITE transaction asynchronously. Declaration public Task<ClientInviteTransaction> StartClientInviteAsync(SIPRequest request, IPEndPoint remoteEndPoint, TransactionResponseReceivedDelegate? responseReceivedDelegate) Parameters Type Name Description SIPRequest request SIP INVITE request to send IPEndPoint remoteEndPoint Destination to send the request to TransactionResponseReceivedDelegate responseReceivedDelegate Callback function to call when a response is received for the transaction. Optional, may be null. This may be used when the client transaction user needs to be informed of provisional responses (ex. 180 Ringing or 183 Session Progress) Returns Type Description Task<ClientInviteTransaction> Returns a ClientInviteTransaction that contains the results of the transaction | Edit this page View Source StartClientNonInviteTransaction(SIPRequest, IPEndPoint, SipTransactionCompleteDelegate?, int) Creates and starts a client non-INVITE SIP transaction Declaration public ClientNonInviteTransaction StartClientNonInviteTransaction(SIPRequest request, IPEndPoint remoteEndPoint, SipTransactionCompleteDelegate? completeDelegate, int FinalResponseTimeoutMs = 32000) Parameters Type Name Description SIPRequest request SIP request to send IPEndPoint remoteEndPoint Destination to send the request to SipTransactionCompleteDelegate completeDelegate Notification callback. Called when the transaction is completed or terminated. May be null if a notification is not required. int FinalResponseTimeoutMs Number of milliseconds to wait for a final response. This corresponds to Timer F shown in Figure 6 of RFC 3261. The default value is 32,000 milliseconds (64 * T1, where T1 is 500 ms). Returns Type Description ClientNonInviteTransaction Returns a new ClientNonInviteTransaction object | Edit this page View Source StartServerInviteTransaction(SIPRequest, IPEndPoint, SipTransactionCompleteDelegate?, SIPResponse) Creates and starts a server INVITE transaction. Declaration public ServerInviteTransaction StartServerInviteTransaction(SIPRequest request, IPEndPoint remoteEndPoint, SipTransactionCompleteDelegate? completeDelegate, SIPResponse ResponseToSend) Parameters Type Name Description SIPRequest request INVITE request that was received. IPEndPoint remoteEndPoint IP endpoint of the remote client that sent the request. SipTransactionCompleteDelegate completeDelegate Notification callback. Called when the transaction is completed or terminated. May be null if a notification is not required. SIPResponse ResponseToSend Initial response to send to the client. Will be sent when the transport layer calls the StartTransaction() method. Returns Type Description ServerInviteTransaction Returns a new ServerInviteTransaction object. | Edit this page View Source StartServerNonInviteTransaction(SIPRequest, IPEndPoint, SipTransactionCompleteDelegate, SIPResponse) Creates and starts a server non-INVITE transaction. Declaration public ServerNonInviteTransaction StartServerNonInviteTransaction(SIPRequest request, IPEndPoint remoteEndPoint, SipTransactionCompleteDelegate completeDelegate, SIPResponse ResponseToSend) Parameters Type Name Description SIPRequest request SIP request that was received by the server. IPEndPoint remoteEndPoint IP endpoint of the remote client that sent the request. SipTransactionCompleteDelegate completeDelegate Notification callback. Called when the transaction is completed or terminated. May be null if a notification is not required. SIPResponse ResponseToSend Initial response to send to the client. Will be sent when the transport layer calls the StartTransaction() method. Returns Type Description ServerNonInviteTransaction Returns a new ServerNonInviteTransaction object Events | Edit this page View Source LogInvalidSipMessage Event that is fired if this SipTransport object receives an invalid SIP message. Declaration public event LogInvalidSipMessageDelegate? LogInvalidSipMessage Event Type Type Description LogInvalidSipMessageDelegate | Edit this page View Source LogSipRequest Event that is fired for every SIP request that is sent or received by the SipTransport class. For received requests, this event is fired after the request is sent to a transaction object or to the SipTransport user. Declaration public event LogSipRequestDelegate? LogSipRequest Event Type Type Description LogSipRequestDelegate | Edit this page View Source LogSipResponse Event that is fired for every SIP response that is sent or received by the SipTransport class. For received responses, this event is fired after the response is sent to a transaction object or to the SipTransport user. Declaration public event LogSipResponseDelegate? LogSipResponse Event Type Type Description LogSipResponseDelegate | Edit this page View Source SipRequestReceived Event that is fired when a SIP request is received. This event is not fired if the SIP request is handled by a SIP transaction object (a SipTransactionBase derived class). The SIP transaction layer may pass the request up to the transaction user if required. Declaration public event SipRequestReceivedDelegate? SipRequestReceived Event Type Type Description SipRequestReceivedDelegate | Edit this page View Source SipResponseReceived Event that is fired when a SIP response is received. This event is not fired if the SIP response is handled by a SIP transaction object (a SipTransactionBase derived class). The SIP transaction layer may pass the response up to the transaction user if required. Declaration public event SipResponseReceivedDelegate? SipResponseReceived Event Type Type Description SipResponseReceivedDelegate"
  },
  "api/SipLib.Channels.WindowsQos.html": {
    "href": "api/SipLib.Channels.WindowsQos.html",
    "title": "Class WindowsQos",
    "keywords": "Class WindowsQos Class for setting the Quality of Service (QOS) for UDP or TCP sockets used for transporting media or call signaling. This class is for the Windows operating systems only. It will not work when running on the Linux operating system. This class handles setting the Differentiated Services Code Point (DSCP) for both IPv4 and IPv6. Inheritance object WindowsQos Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Channels Assembly: SipLib.dll Syntax public class WindowsQos Constructors | Edit this page View Source WindowsQos() Constructs a new Qos object. This constructor creates a Win32 handle to the Windows QOS subsystem and maintains it until the Shutdown method is called. Therefore, the Shutdown method must be called before this object is disposed of. Declaration public WindowsQos() Methods | Edit this page View Source AddTcpQos(TcpClient, uint, IPEndPoint) Adds the specified TcpClient object to the QOS subsystem and sets the Differentiated Services Code Point (DSCP) value for the IP layer that will handle transport for the socket. Use this method for TCP sockets. Declaration public int AddTcpQos(TcpClient TcpCli, uint DscpValue, IPEndPoint RemIpe) Parameters Type Name Description TcpClient TcpCli TcpClient object to add QOS to. The socket must be in the connected state. uint DscpValue DSCP value to set. Must be between 0x00 and 0x3f inclusive. IPEndPoint RemIpe Remote IP endpoint of the socket. Returns Type Description int Returns a Flow Identifier (FlowID) that the Windows QOS subsystem assigned to the socket. The caller must retain this value and use it in the call to the RemoveQos() method. This method returns a value of 0 if it was not able to setup the QOS for the socket. In this case, the socket is still usable but the DSCP field for the IP layer will not be set. | Edit this page View Source AddUdpQos(UdpClient, uint) Adds the specified Socket object to the QOS subsystem and sets the Differentiated Servies Code Point (DSCP) value for the IP layer that will handle transport for the socket For UDP. Declaration public int AddUdpQos(UdpClient udpClient, uint DscpValue) Parameters Type Name Description UdpClient udpClient UdpClient to set the DSCP value for. uint DscpValue DSCP value to set. Must be between 0x00 and 0x3f inclusive. Returns Type Description int Returns a Flow Identifier (FlowID) that the Windows QOS subsystem assigned to the socket. The caller must retain this value and use it in the call to the RemoveQos() method. This method returns a value of 0 if it was not able to setup the QOS for the socket. In this case, the socket is still usable but the DSCP field for the IP layer will not be set. | Edit this page View Source RemoveQos(nint, int) Removes the socket from the Windows QOS subsystem. This method must be called before the socket is closed. Declaration public void RemoveQos(nint SockHandle, int FlowId) Parameters Type Name Description nint SockHandle Underlying Socket client object of a UDP or a TCP client socket. int FlowId Flow ID of the QOS flow that was returned by the AddQos() method. | Edit this page View Source Shutdown() Frees the handle to the underlying handle to the Windows QOS subsystem. This method must be called before this object is disposed of. Do not call any other methods of this object after this method is called. Declaration public void Shutdown()"
  },
  "api/SipLib.Channels.html": {
    "href": "api/SipLib.Channels.html",
    "title": "Namespace SipLib.Channels",
    "keywords": "Namespace SipLib.Channels Classes for sending and receiving SIP messages over UDP, TCP or TLS connections. The main classes in this namespace are: SIPChannel SIPUDPChannel SIPTCPChannel SIPTLSChannel SIPConnection The SIPChannel class is the base class for the SIPUDPChannel, SIPTCPChannel and SIPTLSChannel classes. The SIPUDPChannel manages SIP packet transport using UDP. The SIPTCPChannel class manages SIP packet transport using TCP and the SIPTLSChannel manages SIP packet transport using TLS. TCP and TLS are connection oriented stream protocols so the SIPTCPChannel and SIPTLSChannel manage multiple transport layer connections by maintaining a list of SIPConnection objects. Each SIPConnection object represents a socket connection between a local endpoint and a remote endpoint. Classes DscpSettings Static class that defines the default Differentiated Services Code Point (DSCP) values to use for different media types. See RFC 2475 and RFC 3260 for DSCP. The default values are those specified in Section 2.7 of NENA STA-010.3 Qos This class handles setting the Differentiated Services Code Point (DSCP) for both IPv4 and IPv6 for both Windows and Linux. The Windows terminology is Quality of Service (QOS). SIPChannel Base class for all SIP channel classes. SIPConnection Class for managing a SIP connection. SIPTCPChannel Class for managing a SIP connection using the TCP protocol. SIPTLSChannel Class for managing SIP connections using the Transport Layer Security (TLS) protocol. SIPUDPChannel Class for managing a SIP connection using the UDP transport protocol. WindowsQos Class for setting the Quality of Service (QOS) for UDP or TCP sockets used for transporting media or call signaling. This class is for the Windows operating systems only. It will not work when running on the Linux operating system. This class handles setting the Differentiated Services Code Point (DSCP) for both IPv4 and IPv6. Enums SIPConnectionsEnum Enumeration for the type of the SIP connection type. Delegates AcceptCertificateDelegate Delegate definition for a function that a SIPTLSChannel user can provide to determine whether or not to allow a connection given a client's X.509 certificate. AcceptConnectionDelegate Delegate definition for a function that a SIPChannel user can provide to determine whether or not to allow a connection from a remote SIP endpoint. LogInvalidSipMessageDelegate Delegate type for the LogInvalidSipMessage event of the SipTransport class. LogSipRequestDelegate Delegate type for the LogSipRequest event of the SipTransport class. LogSipResponseDelegate Delegate type for the LogSipResponse event of the SipTransport class. SIPConnectionDisconnectedDelegate Delegate type for the SIPSocketDisconnected event of the SIPConnection class. SIPMessageReceivedDelegate Delegate definition for the SIPMessageReceived event of the SIPConnection class. SipConnectionFailedDelegate Delegate type for the SIPConnectionFailed event of the SIPTCPChannel and the SIPTLSChannel classes. SipRequestReceivedDelegate Delegate type for the SipRequestReceived event of the SipTransportManager class. SipResponseReceivedDelegate Delegate type for the SipResponseReceived event of the SipTransportManager class. SipTransactionCompleteDelegate Delegate type for the method that the SipTransport will call when a SIP transaction has been completed."
  },
  "api/SipLib.Collections.ThreadSafeGenericList-1.html": {
    "href": "api/SipLib.Collections.ThreadSafeGenericList-1.html",
    "title": "Class ThreadSafeGenericList<T>",
    "keywords": "Class ThreadSafeGenericList<T> This class is a thread-safe, generic (template based) List class. This class does not support enumerating the list elements or an index operator. To enumerate the current items in the list or to get an element at an index position, call the ToArray() method then perform the desired action on the array of current items. Inheritance object ThreadSafeGenericList<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Collections Assembly: SipLib.dll Syntax public class ThreadSafeGenericList<T> Type Parameters Name Description T The Type of the objects in the List. Properties | Edit this page View Source Count Gets the number of items in the list. Declaration public int Count { get; } Property Value Type Description int Methods | Edit this page View Source Add(T) Adds a new item to the list. Declaration public void Add(T NewItem) Parameters Type Name Description T NewItem | Edit this page View Source Clear() Clears the list. Declaration public void Clear() | Edit this page View Source Remove(T) Removes an element from the list if its present Declaration public void Remove(T Element) Parameters Type Name Description T Element | Edit this page View Source ToArray() Converts the list to an array. Declaration public T[] ToArray() Returns Type Description T[] Returns a new array containing all of the items"
  },
  "api/SipLib.Collections.html": {
    "href": "api/SipLib.Collections.html",
    "title": "Namespace SipLib.Collections",
    "keywords": "Namespace SipLib.Collections Contains thread-safe generic collection classes that are not provided by the .NET class libraries Classes ThreadSafeGenericList<T> This class is a thread-safe, generic (template based) List class. This class does not support enumerating the list elements or an index operator. To enumerate the current items in the list or to get an element at an index position, call the ToArray() method then perform the desired action on the array of current items."
  },
  "api/SipLib.Core.AuthHeaders.html": {
    "href": "api/SipLib.Core.AuthHeaders.html",
    "title": "Class AuthHeaders",
    "keywords": "Class AuthHeaders Authorization Headers Inheritance object AuthHeaders Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class AuthHeaders Fields | Edit this page View Source AUTH_ALGORITHM_KEY Declaration public const string AUTH_ALGORITHM_KEY = \"algorithm\" Field Value Type Description string | Edit this page View Source AUTH_CNONCE_KEY Declaration public const string AUTH_CNONCE_KEY = \"cnonce\" Field Value Type Description string | Edit this page View Source AUTH_DIGEST_KEY Declaration public const string AUTH_DIGEST_KEY = \"Digest\" Field Value Type Description string | Edit this page View Source AUTH_NONCECOUNT_KEY Declaration public const string AUTH_NONCECOUNT_KEY = \"nc\" Field Value Type Description string | Edit this page View Source AUTH_NONCE_KEY Declaration public const string AUTH_NONCE_KEY = \"nonce\" Field Value Type Description string | Edit this page View Source AUTH_OPAQUE_KEY Declaration public const string AUTH_OPAQUE_KEY = \"opaque\" Field Value Type Description string | Edit this page View Source AUTH_QOP_KEY Declaration public const string AUTH_QOP_KEY = \"qop\" Field Value Type Description string | Edit this page View Source AUTH_REALM_KEY Declaration public const string AUTH_REALM_KEY = \"realm\" Field Value Type Description string | Edit this page View Source AUTH_RESPONSE_KEY Declaration public const string AUTH_RESPONSE_KEY = \"response\" Field Value Type Description string | Edit this page View Source AUTH_URI_KEY Declaration public const string AUTH_URI_KEY = \"uri\" Field Value Type Description string | Edit this page View Source AUTH_USERNAME_KEY Declaration public const string AUTH_USERNAME_KEY = \"username\" Field Value Type Description string"
  },
  "api/SipLib.Core.ByteBufferInfo.html": {
    "href": "api/SipLib.Core.ByteBufferInfo.html",
    "title": "Class ByteBufferInfo",
    "keywords": "Class ByteBufferInfo Class for parsing a buffer of bytes Inheritance object ByteBufferInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class ByteBufferInfo Methods | Edit this page View Source ExtractDelimitedByteArray(byte[], int, byte[], byte[]) Extracts a byte array that is delimited by two byte array patterns Declaration public static byte[]? ExtractDelimitedByteArray(byte[] SrcArray, int StartIndex, byte[] FirstPattern, byte[] SecondPattern) Parameters Type Name Description byte[] SrcArray The input source array int StartIndex The stating index in the source array byte[] FirstPattern The first byte pattern byte[] SecondPattern The second byte array Returns Type Description byte[] Returns a new byte array if there is one between the FirstPattern and the SecondPattern or null if the FirstPattern and the SecondPattern are not found | Edit this page View Source FindFirstBytePattern(byte[], int, byte[]) Finds the first occurrence of byte array pattern within an array. Declaration public static int FindFirstBytePattern(byte[] SrcArray, int StartIndex, byte[] BytePattern) Parameters Type Name Description byte[] SrcArray Array to search in. int StartIndex Index to start looking at byte[] BytePattern Array of bytes containing the pattern to search for. Returns Type Description int The index within the search array of the start of the pattern to search for. Returns -1 if the pattern is not found. | Edit this page View Source FindLastBytePattern(byte[], int, byte[]) Finds the last occurrence of byte array pattern within an array. Declaration public static int FindLastBytePattern(byte[] SrcArray, int LastSrcIndex, byte[] BytePattern) Parameters Type Name Description byte[] SrcArray Array to search in. int LastSrcIndex Last index in the source array to include in the search range byte[] BytePattern Array of bytes containing the pattern to search for. Returns Type Description int The index within the search array of the start of the pattern to search for. Returns -1 if the pattern is not found. | Edit this page View Source GetStringPosition(byte[], int, int, string, string?) Searches a binary buffer for a string up until a specified end string. Declaration public static int GetStringPosition(byte[] buffer, int startPosition, int endPosition, string find, string? end) Parameters Type Name Description byte[] buffer The byte array to search for an instance of the specified string. int startPosition The position in the array that the search should be started from. int endPosition An index that if reached indicates the search should be halted. string find The string that is being searched for. string end If the end string is found the search is halted and a negative result returned. Returns Type Description int The start position in the buffer of the requested string or -1 if not found. | Edit this page View Source HasString(byte[], int, int, string, string) Tests to see if a binary array contains a string. Declaration public static bool HasString(byte[] buffer, int startPosition, int endPosition, string find, string end) Parameters Type Name Description byte[] buffer The byte array to search for an instance of the specified string. int startPosition The position in the array that the search should be started from. int endPosition An index that if reached indicates the search should be halted. string find The string that is being searched for. string end If this string is not null and is found before the find string is found, then false is returned. Returns Type Description bool Returns true if the array contains the specified string or false if it does not"
  },
  "api/SipLib.Core.CallProperties.html": {
    "href": "api/SipLib.Core.CallProperties.html",
    "title": "Class CallProperties",
    "keywords": "Class CallProperties Class that provides various static utility functions relating to call properties Inheritance object CallProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class CallProperties Methods | Edit this page View Source CreateBranchId() Creates a simplified branch ID parameter using the magic cookie and a GUID Declaration public static string CreateBranchId() Returns Type Description string | Edit this page View Source CreateBranchId(string, string, string, string, string, string, int, string, string, string) From RFC 3261, Section 16.6, Step 8. The value placed in this part of the branch parameter SHOULD reflect all of those fields (including any Route, Proxy-Require and Proxy- Authorization header fields). This is to ensure that if the request is routed back to the proxy and one of those fields changes, it is treated as a spiral and not a loop (see Section 16.3). A common way to create this value is to compute a cryptographic hash of the To tag, From tag, Call-ID header field, the Request-URI of the request received (before translation), the topmost Via header, and the sequence number from the CSeq header field, in addition to any Proxy-Require algorithm used to compute the hash is implementation-dependent, but MD5 (RFC 1321 [35]), expressed in hexadecimal, is a reasonable choice. (Base64 is not permissible for a token.) Declaration public static string CreateBranchId(string magicCookie, string toTag, string fromTag, string callId, string uri, string topVia, int cSeq, string route, string proxyRequire, string proxyAuth) Parameters Type Name Description string magicCookie string toTag string fromTag string callId string uri string topVia int cSeq string route string proxyRequire string proxyAuth Returns Type Description string | Edit this page View Source CreateNewCallId() Creates a unique call ID Declaration public static string CreateNewCallId() Returns Type Description string | Edit this page View Source CreateNewTag() Creates a new tag value for a To-Tag or a From-Tag Declaration public static string CreateNewTag() Returns Type Description string"
  },
  "api/SipLib.Core.Crypto.html": {
    "href": "api/SipLib.Core.Crypto.html",
    "title": "Class Crypto",
    "keywords": "Class Crypto Class containing various cryptography utilities Inheritance object Crypto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class Crypto Methods | Edit this page View Source GetRandomByteArray(byte[], int, int) Fills an array of bytes with random numbers. Declaration public static void GetRandomByteArray(byte[] buffer, int offset, int length) Parameters Type Name Description byte[] buffer Destination int offset Starting index in the destination buffer int length Number of bytes to write | Edit this page View Source GetRandomByteString(int) Gets an \"X2\" string representation of a random number. Declaration public static string GetRandomByteString(int byteLength) Parameters Type Name Description int byteLength The byte length of the random number string to obtain. Returns Type Description string A string representation of the random number. It will be twice the length of byteLength. | Edit this page View Source GetRandomInt() Returns a 10 digit random number. Declaration public static int GetRandomInt() Returns Type Description int | Edit this page View Source GetRandomInt(int) Returns a random number of a specified length. Declaration public static int GetRandomInt(int length) Parameters Type Name Description int length Returns Type Description int | Edit this page View Source GetRandomInt(int, int) Generates a 32-bit random number between a minimum and a maximum value. Declaration public static int GetRandomInt(int minValue, int maxValue) Parameters Type Name Description int minValue int maxValue Returns Type Description int | Edit this page View Source GetRandomString() Creates a random string of characters. The length is DEFAULT_RANDOM_LENGTH Declaration public static string GetRandomString() Returns Type Description string The random string | Edit this page View Source GetRandomString(int) Creates a string of random characters Declaration public static string GetRandomString(int length) Parameters Type Name Description int length Desired length of the string Returns Type Description string Random string of random alphabet characters | Edit this page View Source GetRandomUInt() Gets a unsigned 32 bit random number Declaration public static uint GetRandomUInt() Returns Type Description uint | Edit this page View Source GetRandomUInt16() Gets a 16 bit unsigned random number Declaration public static ushort GetRandomUInt16() Returns Type Description ushort | Edit this page View Source GetSHAHash(params string[]) Gets the SHA1 hash of an array of string values Declaration public static byte[] GetSHAHash(params string[] values) Parameters Type Name Description string[] values Returns Type Description byte[] | Edit this page View Source GetSHAHashAsHex(params string[]) Returns the hash with each byte as an X2 string. This is useful for situations where the hash needs to only contain safe ASCII characters. Declaration public static string GetSHAHashAsHex(params string[] values) Parameters Type Name Description string[] values The list of string to concantenate and hash. Returns Type Description string A string with \"safe\" (0-9 and A-F) characters representing the hash."
  },
  "api/SipLib.Core.HTTPDigest.html": {
    "href": "api/SipLib.Core.HTTPDigest.html",
    "title": "Class HTTPDigest",
    "keywords": "Class HTTPDigest Class for processing an HTTP digest Inheritance object HTTPDigest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class HTTPDigest Methods | Edit this page View Source DigestCalcHA1(string, string, string) Calculate H(A1) as per HTTP Digest specification. Declaration public static string DigestCalcHA1(string username, string realm, string password) Parameters Type Name Description string username string realm string password Returns Type Description string | Edit this page View Source DigestCalcHA2(string, string) Calculate H(A2) as per HTTP Digest specification. Declaration public static string DigestCalcHA2(string method, string uri) Parameters Type Name Description string method string uri Returns Type Description string | Edit this page View Source DigestCalcResponse(string, string, string, string, string, string, string, string, string, string, string, string) Calculates the digest response Declaration public static string DigestCalcResponse(string algorithm, string username, string realm, string password, string uri, string nonce, string nonceCount, string cnonce, string qop, string method, string digestURL, string hEntity) Parameters Type Name Description string algorithm string username string realm string password string uri string nonce string nonceCount string cnonce string qop string method string digestURL string hEntity Returns Type Description string"
  },
  "api/SipLib.Core.IPSocket.html": {
    "href": "api/SipLib.Core.IPSocket.html",
    "title": "Class IPSocket",
    "keywords": "Class IPSocket Class containing various utility functions for sockets. Inheritance object IPSocket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class IPSocket Fields | Edit this page View Source MaxPort Specifies the maximum acceptable value for the IPEndPoint Port property. Declaration public const int MaxPort = 65535 Field Value Type Description int | Edit this page View Source MinPort Specifies the minimum acceptable value for the IPEndPoint Port property. Declaration public const int MinPort = 0 Field Value Type Description int Methods | Edit this page View Source GetIPEndPoint(string) Returns an IPv4 end point from a socket address in 10.0.0.1:5060 format. Declaration public static IPEndPoint GetIPEndPoint(string IPSocket) Parameters Type Name Description string IPSocket Returns Type Description IPEndPoint | Edit this page View Source GetSocketString(IPEndPoint) This code is based on the IPEndPoint.ToString method in the dotnet source code at https://github.com/dotnet/corefx/blob/master/src/System.Net.Primitives/src/System/Net/IPEndPoint.cs. If/when that feature makes it into .NET Standard this method can be replaced. Declaration public static string GetSocketString(IPEndPoint endPoint) Parameters Type Name Description IPEndPoint endPoint Returns Type Description string | Edit this page View Source IsIPAddress(string) (convenience method) check if string can be parsed as IPAddress Declaration public static bool IsIPAddress(string socket) Parameters Type Name Description string socket string to check Returns Type Description bool true/false | Edit this page View Source IsPrivateAddress(string) Checks the Contact SIP URI host and if it is recognised as a private address it is replaced with the socket the SIP message was received on. Private address space blocks RFC 1597. 10.0.0.0 - 10.255.255.255 172.16.0.0 - 172.31.255.255 192.168.0.0 - 192.168.255.255 Declaration public static bool IsPrivateAddress(string host) Parameters Type Name Description string host Returns Type Description bool | Edit this page View Source Parse(string, int) Parses an endpoint string into an IPEndPoint Declaration public static IPEndPoint Parse(string endpointstring, int defaultport = -1) Parameters Type Name Description string endpointstring int defaultport Returns Type Description IPEndPoint | Edit this page View Source Parse(string, out string, out int) Check if endpointstring contains a hostname or ip-address and ip-port accepts IPv4 and IPv6 and IPv6 mapped IPv4 addresses return detected values in host and port adapted from: http://stackoverflow.com/questions/2727609/best-way-to-create-ipendpoint-from-string Declaration public static bool Parse(string endpointstring, out string host, out int port) Parameters Type Name Description string endpointstring string to check string host host-portion of endpointstring, if host can be parsed as I PAddress, then host is IPAddress.ToString int port port-portion of endpointstring Returns Type Description bool true if host-portion of endpoint string is valid ip-address Remarks rj2: I had the requirement of parsing an IPEndpoint with IPv6, v4 and hostnames and getting them as string and int Exceptions Type Condition ArgumentException if endpointstring is null/empty FormatException if host looks like ip-address but can't be parsed | Edit this page View Source ParsePortFromSocket(string) For IPv6 addresses with port the string format is of the form: [2a02:8084:6981:7880:54a9:d238:b2ee:ceb]:6060 Without a port the form is: 2a02:8084:6981:7880:54a9:d238:b2ee:ceb Declaration public static int ParsePortFromSocket(string socket) Parameters Type Name Description string socket The socket string to check Returns Type Description int The socket string's explicit port number or 0 if it does not have one. | Edit this page View Source TryParseIPEndPoint(string, out IPEndPoint?) This code is based on the IPEndPoint.TryParse method in the dotnet source code at https://github.com/dotnet/corefx/blob/master/src/System.Net.Primitives/src/System/Net/IPEndPoint.cs. If/when that feature makes it into .NET Standard this method can be replaced. Declaration public static bool TryParseIPEndPoint(string s, out IPEndPoint? result) Parameters Type Name Description string s The end point string to parse. IPEndPoint result If the parse is successful this output parameter will contain the IPv4 or IPv6 end point. Returns Type Description bool Returns true if the string could be successfully parsed as an IPv4 or IPv6 end point. False if not."
  },
  "api/SipLib.Core.SIPAuthenticationHeader.html": {
    "href": "api/SipLib.Core.SIPAuthenticationHeader.html",
    "title": "Class SIPAuthenticationHeader",
    "keywords": "Class SIPAuthenticationHeader Class for the SIP WWW-Authenticate and Authorization headers Inheritance object SIPAuthenticationHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPAuthenticationHeader Constructors | Edit this page View Source SIPAuthenticationHeader(SIPAuthorisationDigest) Constructor Declaration public SIPAuthenticationHeader(SIPAuthorisationDigest sipDigest) Parameters Type Name Description SIPAuthorisationDigest sipDigest Authorization digest | Edit this page View Source SIPAuthenticationHeader(SIPAuthorisationHeadersEnum, string, string) Constructor Declaration public SIPAuthenticationHeader(SIPAuthorisationHeadersEnum authorisationType, string realm, string nonce) Parameters Type Name Description SIPAuthorisationHeadersEnum authorisationType Type of authorization string realm Realm string nonce Nonce Fields | Edit this page View Source SIPDigest SIP digest Declaration public SIPAuthorisationDigest SIPDigest Field Value Type Description SIPAuthorisationDigest Methods | Edit this page View Source ParseSIPAuthenticationHeader(SIPAuthorisationHeadersEnum, string) Parses an authentication or authorization header Declaration public static SIPAuthenticationHeader? ParseSIPAuthenticationHeader(SIPAuthorisationHeadersEnum authorizationType, string headerValue) Parameters Type Name Description SIPAuthorisationHeadersEnum authorizationType Type of authorization or authentication string headerValue String header value Returns Type Description SIPAuthenticationHeader Returns a new SIPAuthenticationHeader if successful or null if unable to parse the input header value. | Edit this page View Source ToString() Converts this object into a string Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/SipLib.Core.SIPAuthorisationDigest.html": {
    "href": "api/SipLib.Core.SIPAuthorisationDigest.html",
    "title": "Class SIPAuthorisationDigest",
    "keywords": "Class SIPAuthorisationDigest Class for the SIP authorization digest Inheritance object SIPAuthorisationDigest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPAuthorisationDigest Constructors | Edit this page View Source SIPAuthorisationDigest() Constructor Declaration public SIPAuthorisationDigest() | Edit this page View Source SIPAuthorisationDigest(SIPAuthorisationHeadersEnum) Constructor Declaration public SIPAuthorisationDigest(SIPAuthorisationHeadersEnum authorisationType) Parameters Type Name Description SIPAuthorisationHeadersEnum authorisationType Specifies the type of authorization/authentication | Edit this page View Source SIPAuthorisationDigest(SIPAuthorisationHeadersEnum, string, string, string, string, string, string) Constructor Declaration public SIPAuthorisationDigest(SIPAuthorisationHeadersEnum authorisationType, string realm, string username, string password, string uri, string nonce, string request) Parameters Type Name Description SIPAuthorisationHeadersEnum authorisationType string realm string username string password string uri string nonce string request Fields | Edit this page View Source AUTH_ALGORITHM MD5 authorization algorithm Declaration public const string AUTH_ALGORITHM = \"MD5\" Field Value Type Description string | Edit this page View Source Algorithhm Algorithm value Declaration public string Algorithhm Field Value Type Description string | Edit this page View Source Cnonce Client nonce (used with WWW-Authenticate and qop=auth). Declaration public string Cnonce Field Value Type Description string | Edit this page View Source DestinationURL Destination URL value Declaration public string DestinationURL Field Value Type Description string | Edit this page View Source Nonce Nonce value Declaration public string Nonce Field Value Type Description string | Edit this page View Source Opaque Opaque value Declaration public string Opaque Field Value Type Description string | Edit this page View Source Password Password value Declaration public string Password Field Value Type Description string | Edit this page View Source QOP_AUTHENTICATION_VALUE QOP authentication value Declaration public const string QOP_AUTHENTICATION_VALUE = \"auth\" Field Value Type Description string | Edit this page View Source Qop Quality of Protection. Values permitted are auth (authentication) and auth-int (authentication with integrity protection). Declaration public string Qop Field Value Type Description string | Edit this page View Source Realm Realm value Declaration public string Realm Field Value Type Description string | Edit this page View Source RequestType Request type value Declaration public string RequestType Field Value Type Description string | Edit this page View Source Response Response value Declaration public string Response Field Value Type Description string | Edit this page View Source URI URI value Declaration public string URI Field Value Type Description string | Edit this page View Source Username User name value Declaration public string Username Field Value Type Description string Properties | Edit this page View Source AuthorisationResponseType If this is set it's the type of authorisation response to use otherwise use the same as the request Declaration public SIPAuthorisationHeadersEnum AuthorisationResponseType { get; } Property Value Type Description SIPAuthorisationHeadersEnum | Edit this page View Source AuthorisationType This is the type of authorisation request received. Declaration public SIPAuthorisationHeadersEnum AuthorisationType { get; } Property Value Type Description SIPAuthorisationHeadersEnum | Edit this page View Source Digest Gets the digest value Declaration public string Digest { get; } Property Value Type Description string Methods | Edit this page View Source ParseAuthorisationDigest(SIPAuthorisationHeadersEnum, string) Parses an authorization digitest Declaration public static SIPAuthorisationDigest ParseAuthorisationDigest(SIPAuthorisationHeadersEnum authorisationType, string authorisationRequest) Parameters Type Name Description SIPAuthorisationHeadersEnum authorisationType Authorization type string authorisationRequest Returns Type Description SIPAuthorisationDigest | Edit this page View Source SetCredentials(string, string, string, string) Sets the credentials Declaration public void SetCredentials(string username, string password, string uri, string method) Parameters Type Name Description string username string password string uri string method | Edit this page View Source ToString() Converts the authorization digest to a string Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/SipLib.Core.SIPAuthorisationHeadersEnum.html": {
    "href": "api/SipLib.Core.SIPAuthorisationHeadersEnum.html",
    "title": "Enum SIPAuthorisationHeadersEnum",
    "keywords": "Enum SIPAuthorisationHeadersEnum Enumeration of SIP authorization/authentication header types Namespace: SipLib.Core Assembly: SipLib.dll Syntax public enum SIPAuthorisationHeadersEnum Fields Name Description Authorize Authorize ProxyAuthenticate Proxy-Authenticate ProxyAuthorization Proxy-Authorization Unknown Unknown WWWAuthenticate WWW-Authenticate"
  },
  "api/SipLib.Core.SIPCallInfoHeader.html": {
    "href": "api/SipLib.Core.SIPCallInfoHeader.html",
    "title": "Class SIPCallInfoHeader",
    "keywords": "Class SIPCallInfoHeader Class for a SIP Call-Info header. See Sections 20.9 and 25.1 of RFC 3261. Inheritance object SIPCallInfoHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPCallInfoHeader Constructors | Edit this page View Source SIPCallInfoHeader(SIPURI, string) Constructs a new Call-Info header object. Declaration public SIPCallInfoHeader(SIPURI Uri, string PurposeStr) Parameters Type Name Description SIPURI Uri Value field of the Call-Info header. string PurposeStr Purpose string of the header. Fields | Edit this page View Source PURPOSE_PARAMETER_STRING Defines the purpose header parameter for Call-Info. Declaration public const string PURPOSE_PARAMETER_STRING = \"purpose\" Field Value Type Description string Properties | Edit this page View Source CallInfoField Gets or sets the SIPUserField object used to represent this Call-Info header. Declaration public SIPUserField CallInfoField { get; set; } Property Value Type Description SIPUserField May be null if not set yet. Methods | Edit this page View Source ParseCallInfoHeader(string) Parses a Call-Info header value string and returns a list of SIPCallInfoHeader objects. Note: a Call-Info value string may contain multiple Call-Info headers with the headers separated by commas. Declaration public static List<SIPCallInfoHeader> ParseCallInfoHeader(string HeaderStr) Parameters Type Name Description string HeaderStr Call-Info header value string to parse. Returns Type Description List<SIPCallInfoHeader> Returns a list of SIPCallInfoHeader objects that contains one or more objects if succussful. Returns an empty list is an error occurred. Exceptions Type Condition SIPValidationException Thrown if a validation error occured while parsing the SIP user field portion of the header. | Edit this page View Source ToString() Converts this object into a string for use as a header value. Declaration public override string ToString() Returns Type Description string Returns the string value of this object. Overrides object.ToString()"
  },
  "api/SipLib.Core.SIPConstants.html": {
    "href": "api/SipLib.Core.SIPConstants.html",
    "title": "Class SIPConstants",
    "keywords": "Class SIPConstants Defines various constants used for SIP Inheritance object SIPConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPConstants Fields | Edit this page View Source CRLF SIP message line terminator Declaration public const string CRLF = \"\\r\\n\" Field Value Type Description string | Edit this page View Source DEFAULT_MAX_FORWARDS Default value for the Max-Forwards SIP header Declaration public const int DEFAULT_MAX_FORWARDS = 70 Field Value Type Description int | Edit this page View Source DEFAULT_SIPS_WEBSOCKET_PORT Default SIP port number for the secure Web Sockets transport Declaration public const ushort DEFAULT_SIPS_WEBSOCKET_PORT = 443 Field Value Type Description ushort | Edit this page View Source DEFAULT_SIP_PORT Default SIP port number for UDP and TCP Declaration public const int DEFAULT_SIP_PORT = 5060 Field Value Type Description int | Edit this page View Source DEFAULT_SIP_TLS_PORT Default SIP port number for TLS Declaration public const int DEFAULT_SIP_TLS_PORT = 5061 Field Value Type Description int | Edit this page View Source DEFAULT_SIP_WEBSOCKET_PORT Default SIP port number for the Web Sockets transport Declaration public const ushort DEFAULT_SIP_WEBSOCKET_PORT = 80 Field Value Type Description ushort | Edit this page View Source HEADER_DELIMITER_CHAR SIP header delimiter character Declaration public const char HEADER_DELIMITER_CHAR = ':' Field Value Type Description char | Edit this page View Source SIP_BRANCH_MAGICCOOKIE Magic cookie for the branch parameter in a Via header Declaration public const string SIP_BRANCH_MAGICCOOKIE = \"z9hG4bK\" Field Value Type Description string | Edit this page View Source SIP_DEFAULT_FROMURI Default URI for the From header Declaration public const string SIP_DEFAULT_FROMURI = \"sip:thisis@anonymous.invalid\" Field Value Type Description string | Edit this page View Source SIP_FULLVERSION_STRING SIP full version string Declaration public const string SIP_FULLVERSION_STRING = \"SIP/2.0\" Field Value Type Description string | Edit this page View Source SIP_LOOSEROUTER_PARAMETER SIP loose routing parameter Declaration public const string SIP_LOOSEROUTER_PARAMETER = \"lr\" Field Value Type Description string | Edit this page View Source SIP_MAJOR_VERSION SIP major version Declaration public const int SIP_MAJOR_VERSION = 2 Field Value Type Description int | Edit this page View Source SIP_MAXIMUM_RECEIVE_LENGTH Any SIP messages over this size will generate an error Declaration public const int SIP_MAXIMUM_RECEIVE_LENGTH = 200000 Field Value Type Description int | Edit this page View Source SIP_MINOR_VERSION SIP minor version Declaration public const int SIP_MINOR_VERSION = 0 Field Value Type Description int | Edit this page View Source SIP_REGISTER_REMOVEALL Remove all registrations Declaration public const string SIP_REGISTER_REMOVEALL = \"*\" Field Value Type Description string | Edit this page View Source SIP_VERSION_STRING SIP protocol identifier Declaration public const string SIP_VERSION_STRING = \"SIP\" Field Value Type Description string Methods | Edit this page View Source GetDefaultPort(SIPProtocolsEnum) Gets the default SIP port for the protocol. Declaration public static int GetDefaultPort(SIPProtocolsEnum protocol) Parameters Type Name Description SIPProtocolsEnum protocol The transport layer protocol to get the port for. Returns Type Description int The default port to use."
  },
  "api/SipLib.Core.SIPContactHeader.html": {
    "href": "api/SipLib.Core.SIPContactHeader.html",
    "title": "Class SIPContactHeader",
    "keywords": "Class SIPContactHeader Class for building or parsing a SIP Contact header. See Section 20.10 and page 228 of RFC 3261. Inheritance object SIPContactHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPContactHeader Remarks The Contact header only has parameters, no headers. Parameters of from ...; name=value;name2=value2 Specific parameters: q, expires. Constructors | Edit this page View Source SIPContactHeader(SIPUserField) Constructor Declaration public SIPContactHeader(SIPUserField contactUserField) Parameters Type Name Description SIPUserField contactUserField Input SIPUserField | Edit this page View Source SIPContactHeader(string?, SIPURI) Constructor Declaration public SIPContactHeader(string? contactName, SIPURI contactURI) Parameters Type Name Description string contactName Name value for the Contact header value. Optional SIPURI contactURI Contact header URI Properties | Edit this page View Source ContactName Gets or sets the Contact name field Declaration public string? ContactName { get; set; } Property Value Type Description string | Edit this page View Source ContactParameters Gets or sets the Contact header URI parameters Declaration public SIPParameters ContactParameters { get; set; } Property Value Type Description SIPParameters | Edit this page View Source ContactURI Gets or sets the Contact URI field Declaration public SIPURI? ContactURI { get; set; } Property Value Type Description SIPURI | Edit this page View Source Expires Gets or sets the Expires field. A value of -1 indicates the header did not contain an expires parameter setting. Declaration public int Expires { get; set; } Property Value Type Description int | Edit this page View Source Q Gets or sets the Q value parameter Declaration public string? Q { get; set; } Property Value Type Description string Methods | Edit this page View Source AreEqual(SIPContactHeader, SIPContactHeader) Compares two contact headers to determine contact address equality. Declaration public static bool AreEqual(SIPContactHeader contact1, SIPContactHeader contact2) Parameters Type Name Description SIPContactHeader contact1 SIPContactHeader contact2 Returns Type Description bool Returns true if the two SIPContact headers are equal | Edit this page View Source CopyOf() Returns a deep copy of this SIPContactHeader object. Declaration public SIPContactHeader CopyOf() Returns Type Description SIPContactHeader | Edit this page View Source CreateSIPContactList(SIPURI) Creates a new list of SIPContactHeader objects containing a single SIPContactHeader given a SIPURI object. Declaration public static List<SIPContactHeader> CreateSIPContactList(SIPURI sipURI) Parameters Type Name Description SIPURI sipURI Input Returns Type Description List<SIPContactHeader> Returns a single SIPContactHeader in a list. | Edit this page View Source ParseContactHeader(string) Parsed a Contact header value. Throws a SIPValidationException if an error is detected. Declaration public static List<SIPContactHeader>? ParseContactHeader(string contactHeaderStr) Parameters Type Name Description string contactHeaderStr Input Contact header value Returns Type Description List<SIPContactHeader> Returns a a list containg one or more SIPContactHeader objects | Edit this page View Source ToString() Converts the SIPContactHeader to a string Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/SipLib.Core.SIPEndPoint.html": {
    "href": "api/SipLib.Core.SIPEndPoint.html",
    "title": "Class SIPEndPoint",
    "keywords": "Class SIPEndPoint This class is a more specific version of the SIPURI class BUT is only concerned with the network and transport properties. It contains all the information needed to determine the remote end point to deliver a SIP request or response to. This class must remain immutable otherwise the SIP stack can develop problems. SIP end points can get passed amongst different servers for logging and forwarding SIP messages and a modification of the end point by one server can result in a problem for a different server. Instead a new SIP end point should be created wherever a modification is required. Inheritance object SIPEndPoint Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPEndPoint Constructors | Edit this page View Source SIPEndPoint(SIPProtocolsEnum, IPAddress, int) Instantiates a new SIP end point from a protocol, an IP address and a port number. Unspecified properties will be set to their defaults. Declaration public SIPEndPoint(SIPProtocolsEnum protocol, IPAddress address, int port) Parameters Type Name Description SIPProtocolsEnum protocol Protocol for the SIPEndPoint IPAddress address IPAddress of the SIPEndPoint int port Port number of the SIPEndPoint | Edit this page View Source SIPEndPoint(SIPProtocolsEnum, IPAddress, int, string?, string?) Instantiates a new SIP end point. Declaration public SIPEndPoint(SIPProtocolsEnum protocol, IPAddress address, int port, string? channelID, string? connectionID) Parameters Type Name Description SIPProtocolsEnum protocol The SIP transport/application protocol used for the transmission. IPAddress address The network address. int port The network port. string channelID Optional. The unique ID of the channel that created the end point. string connectionID Optional. For connection oriented protocols the unique ID of the connection. For connectionless protocols should be set to null. | Edit this page View Source SIPEndPoint(SIPProtocolsEnum, IPEndPoint) Creates a SIP endpoint from the protocol and an IPEndPoint. Unspecified properties will be set to their default values. Declaration public SIPEndPoint(SIPProtocolsEnum protocol, IPEndPoint endPoint) Parameters Type Name Description SIPProtocolsEnum protocol Protocol for the SIPEndPoint IPEndPoint endPoint IPEndPoint for the SIPEndPoint | Edit this page View Source SIPEndPoint(SIPProtocolsEnum, IPEndPoint, string?, string?) Constructs a new SIPEndPoint given an IPEndPoint and all parameters Declaration public SIPEndPoint(SIPProtocolsEnum protocol, IPEndPoint endPoint, string? channelID, string? connectionID) Parameters Type Name Description SIPProtocolsEnum protocol Protocol for the SIPEndPoint IPEndPoint endPoint IPEndPoint for the SIPEndPoint string channelID Optional. The unique ID of the channel that created the end point. string connectionID Optional. For connection oriented protocols the unique ID of the connection. For connectionless protocols should be set to null. | Edit this page View Source SIPEndPoint(SIPURI) Constructs a SIPEndPoint from a SIPURI. Unspecified parameters will be set to their default values. Declaration public SIPEndPoint(SIPURI sipURI) Parameters Type Name Description SIPURI sipURI Input SIPURI to build the SIPEndPoint from | Edit this page View Source SIPEndPoint(IPEndPoint) Instantiates a new SIP end point from a network end point. Unspecified properties will be set to their defaults. Declaration public SIPEndPoint(IPEndPoint endPoint) Parameters Type Name Description IPEndPoint endPoint Input IPEndPoint to create the SIPEndPoint from Properties | Edit this page View Source Address The network address for the SIP end point. IPv4 and IPv6 are supported. Declaration public IPAddress? Address { get; } Property Value Type Description IPAddress | Edit this page View Source ChannelID If set represents the SIP channel ID that this SIP end point was created from. Declaration public string? ChannelID { get; set; } Property Value Type Description string | Edit this page View Source ConnectionID For connection oriented transport protocols such as TCP, TLS and WebSockets this ID can record the unique connection a SIP message was received on. This makes it possible to ensure responses or subsequent request can re-use the same connection. Declaration public string? ConnectionID { get; set; } Property Value Type Description string | Edit this page View Source Port The network port for the SIP end point. Declaration public int Port { get; } Property Value Type Description int | Edit this page View Source Protocol The transport/application layer protocol the SIP end point is using. Declaration public SIPProtocolsEnum Protocol { get; } Property Value Type Description SIPProtocolsEnum Methods | Edit this page View Source AreEqual(SIPEndPoint, SIPEndPoint) Determines if two SIPEndPoints are equal. Declaration public static bool AreEqual(SIPEndPoint endPoint1, SIPEndPoint endPoint2) Parameters Type Name Description SIPEndPoint endPoint1 First SIPEndPoint object SIPEndPoint endPoint2 Second SIPEndPoint object Returns Type Description bool Returns true if they are equal or false if they are not. | Edit this page View Source AreSocketsEqual(SIPEndPoint, SIPEndPoint) Determines whether the socket destination for two different SIP end points are equal. Declaration public static bool AreSocketsEqual(SIPEndPoint endPoint1, SIPEndPoint endPoint2) Parameters Type Name Description SIPEndPoint endPoint1 First end point to compare. SIPEndPoint endPoint2 Second end point to compare. Returns Type Description bool True if the end points both resolve to the same protocol and IP end point. | Edit this page View Source CopyOf() Creates a deep copy of this SIPEndPoint object Declaration public SIPEndPoint CopyOf() Returns Type Description SIPEndPoint | Edit this page View Source Equals(object?) Determines if another SIPEndPoint object is equal to this one. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Another SIPEndPoint object Returns Type Description bool Returns true if they are equal of false if they are not. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Computes the hash code for this object Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() | Edit this page View Source GetIPEndPoint(bool) Get the IP end point from the SIP end point Declaration public IPEndPoint GetIPEndPoint(bool mapIpv4ToIpv6 = false) Parameters Type Name Description bool mapIpv4ToIpv6 Set to true if a resultant IPv4 end point should be mapped to IPv6. This is required in some cases when using dual mode sockets. For example Mono requires that a destination IP end point for a dual mode socket is set as IPv6. Returns Type Description IPEndPoint An IP end point. | Edit this page View Source IsSocketEqual(SIPEndPoint) Determines if the socket destination of a SIPEndPoint object is equal to the socket destination of this SIPEndPoint object Declaration public bool IsSocketEqual(SIPEndPoint endPoint) Parameters Type Name Description SIPEndPoint endPoint Returns Type Description bool True if the end points both resolve to the same protocol and IP end point. | Edit this page View Source ParseSIPEndPoint(string) Parses a SIP end point from either a serialised SIP end point string, format of: (udp|tcp|tls|ws|wss):(IPEndpoint)[;connid=abcd] or from a string that represents a SIP URI. Declaration public static SIPEndPoint? ParseSIPEndPoint(string sipEndPointStr) Parameters Type Name Description string sipEndPointStr The string to parse to extract the SIP end point. Returns Type Description SIPEndPoint If successful a SIPEndPoint object or null otherwise. | Edit this page View Source ToString() Converts this SIPEndPoint object to a string Declaration public override string ToString() Returns Type Description string Overrides object.ToString() | Edit this page View Source TryParse(string) Tries to parse a SIPEndPoint from a string. Declaration public static SIPEndPoint? TryParse(string sipEndPointStr) Parameters Type Name Description string sipEndPointStr Input string Returns Type Description SIPEndPoint Returns a new SIPEndPoint object if successful. Return null if an error occurred. Operators | Edit this page View Source operator ==(SIPEndPoint, SIPEndPoint) Equals operator for the SIPEndPoint class Declaration public static bool operator ==(SIPEndPoint endPoint1, SIPEndPoint endPoint2) Parameters Type Name Description SIPEndPoint endPoint1 SIPEndPoint endPoint2 Returns Type Description bool | Edit this page View Source operator !=(SIPEndPoint, SIPEndPoint) Not equal operator for the SIPEndPoint class Declaration public static bool operator !=(SIPEndPoint endPoint1, SIPEndPoint endPoint2) Parameters Type Name Description SIPEndPoint endPoint1 SIPEndPoint endPoint2 Returns Type Description bool"
  },
  "api/SipLib.Core.SIPEscape.html": {
    "href": "api/SipLib.Core.SIPEscape.html",
    "title": "Class SIPEscape",
    "keywords": "Class SIPEscape Static class that contains various methods for escaping and unescaping reserved characters in various parts of SIPURIs, SIP headers, SIP parameters, etc. Inheritance object SIPEscape Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public static class SIPEscape Methods | Edit this page View Source SIPURIParameterEscape(string) Escapes reserved characters in SIP URI parameter fields Declaration public static string SIPURIParameterEscape(string unescapedString) Parameters Type Name Description string unescapedString Returns Type Description string | Edit this page View Source SIPURIParameterUnescape(string) Unescapes reserved characters in SIP URI parameters Declaration public static string SIPURIParameterUnescape(string escapedString) Parameters Type Name Description string escapedString Returns Type Description string | Edit this page View Source SIPURIUserEscape(string) Escapes reserved characters in a SIP user name field Declaration public static string SIPURIUserEscape(string unescapedString) Parameters Type Name Description string unescapedString Returns Type Description string | Edit this page View Source SIPURIUserUnescape(string) Unescapes reserved characters in a SIP user name field Declaration public static string? SIPURIUserUnescape(string escapedString) Parameters Type Name Description string escapedString Returns Type Description string"
  },
  "api/SipLib.Core.SIPFromHeader.html": {
    "href": "api/SipLib.Core.SIPFromHeader.html",
    "title": "Class SIPFromHeader",
    "keywords": "Class SIPFromHeader The From header only has parameters, no headers. Parameters of from ...;name=value;name2=value2. Specific parameters: tag. Inheritance object SIPFromHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPFromHeader Constructors | Edit this page View Source SIPFromHeader(string, SIPURI, string) Constructs a new From header object from a name, a SIPURI and a From tag value. Declaration public SIPFromHeader(string fromName, SIPURI fromURI, string fromTag) Parameters Type Name Description string fromName Name field for the From header. Optional. SIPURI fromURI SIPURI to build the From header from. string fromTag From header tag parameter Properties | Edit this page View Source FromName Gets or sets the name field of the From header value Declaration public string? FromName { get; set; } Property Value Type Description string | Edit this page View Source FromParameters Gets or sets the From header parameters Declaration public SIPParameters FromParameters { get; set; } Property Value Type Description SIPParameters | Edit this page View Source FromTag Gets or sets the From tag parameter value Declaration public string? FromTag { get; set; } Property Value Type Description string | Edit this page View Source FromURI Gets or sets the SIPURI portion of the From header value Declaration public SIPURI? FromURI { get; set; } Property Value Type Description SIPURI | Edit this page View Source FromUserField Gets or or sets the SIPUserField object for the From header Declaration public SIPUserField FromUserField { get; set; } Property Value Type Description SIPUserField Methods | Edit this page View Source ParseFromHeader(string) Parses a string into a SIPFromHeader object. Declaration public static SIPFromHeader ParseFromHeader(string fromHeaderStr) Parameters Type Name Description string fromHeaderStr Input string Returns Type Description SIPFromHeader Returns a SIPFromHeader object. | Edit this page View Source ToString() Converts this object into a From header value string Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/SipLib.Core.SIPGeolocationHeader.html": {
    "href": "api/SipLib.Core.SIPGeolocationHeader.html",
    "title": "Class SIPGeolocationHeader",
    "keywords": "Class SIPGeolocationHeader Class for a SIP Geolocation header as defined in RFC 6442. Inheritance object SIPGeolocationHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPGeolocationHeader Constructors | Edit this page View Source SIPGeolocationHeader(SIPURI) Constructs a new SIPGeolocationHeader object from a SIPURI object. Declaration public SIPGeolocationHeader(SIPURI Uri) Parameters Type Name Description SIPURI Uri URI to use. May be a http, https, sip, sips or a cid type of URI. Properties | Edit this page View Source GeolocationField Gets or sets the SIPUserField object used to represent this Geolocation header. Declaration public SIPUserField GeolocationField { get; set; } Property Value Type Description SIPUserField Methods | Edit this page View Source ParseGeolocationHeader(string) Parses a Geolocation header value string and returns a list of SIPGeolocationHeader objects. Note: a Geolocation value string may contain multiple Geolocation headers with the headers separated by commas. Declaration public static List<SIPGeolocationHeader> ParseGeolocationHeader(string strHeaderField) Parameters Type Name Description string strHeaderField Geolocation header value string to parse. Returns Type Description List<SIPGeolocationHeader> Returns a list of SIPGeolocationHeader objects that contains one or more objects if succussful. Returns an empty list is an error occurred. Exceptions Type Condition SIPValidationException Thrown if there was a validation error detected when parsing the user field. | Edit this page View Source ToString() Converts this object into a string for use as a header value. Declaration public override string ToString() Returns Type Description string Returns the string value of this object. Overrides object.ToString()"
  },
  "api/SipLib.Core.SIPHeader.html": {
    "href": "api/SipLib.Core.SIPHeader.html",
    "title": "Class SIPHeader",
    "keywords": "Class SIPHeader Class for handling the SIP headers portion of a SIP request or a SIP response message. Inheritance object SIPHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPHeader Remarks For header fields with string values, a null value indicates that the header field is not present. For header fields with numeric values, a value of -1 indicates that the header field is not present. Constructors | Edit this page View Source SIPHeader() Default constructor. Declaration public SIPHeader() | Edit this page View Source SIPHeader(SIPContactHeader, SIPFromHeader, SIPToHeader, int, string) Constructs a new SIPHeader object. Declaration public SIPHeader(SIPContactHeader contact, SIPFromHeader from, SIPToHeader to, int cseq, string callId) Parameters Type Name Description SIPContactHeader contact SIPContact object SIPFromHeader from SIPFromHeader object SIPToHeader to SIPToHeader object int cseq Numeric portion of the CSeq header field string callId Call-ID header field value Exceptions Type Condition ApplicationException Thrown if the from, to or callId parameters are null or empty. | Edit this page View Source SIPHeader(SIPFromHeader, SIPToHeader, int, string) Constructs a new SIPHeader object. Declaration public SIPHeader(SIPFromHeader from, SIPToHeader to, int cseq, string callId) Parameters Type Name Description SIPFromHeader from SIPFromHeader object SIPToHeader to SIPToHeader object int cseq Numeric portion of the CSeq header field string callId Call-ID header field value Exceptions Type Condition ApplicationException Thrown if the from, to or callId parameters are null or empty. | Edit this page View Source SIPHeader(List<SIPContactHeader>, SIPFromHeader, SIPToHeader, int, string) Constructs a new SIPHeader object Declaration public SIPHeader(List<SIPContactHeader> contactList, SIPFromHeader from, SIPToHeader to, int cseq, string callId) Parameters Type Name Description List<SIPContactHeader> contactList List of SIPContactHeader objects SIPFromHeader from SIPFromHeader object SIPToHeader to SIPToHeader object int cseq Numeric portion of the CSeq header field string callId Call-ID header field value Exceptions Type Condition ApplicationException Thrown if the from, to or callId parameters are null or empty. | Edit this page View Source SIPHeader(string, string, int, string) Constructs a new SIPHeader object. Declaration public SIPHeader(string fromHeader, string toHeader, int cseq, string callId) Parameters Type Name Description string fromHeader From header field value. string toHeader To header field value. int cseq CSeq header field value. string callId Call-ID header field value. Exceptions Type Condition ApplicationException Thrown if the fromHeader, toHeader or callId parameters are null or empty. | Edit this page View Source SIPHeader(string, string, string, int, string) Constructs a new SIPHeader object. Declaration public SIPHeader(string fromHeader, string toHeader, string contactHeader, int cseq, string callId) Parameters Type Name Description string fromHeader From header field value. string toHeader To header field value. string contactHeader Contact header field value int cseq CSeq header field value. string callId Call-ID header field value. Exceptions Type Condition ApplicationException Thrown if the fromHeader, toHeader or callId parameters are null or empty. Fields | Edit this page View Source Accept Accept header field. See Section 20.1 of RFC 3261. Declaration public string? Accept Field Value Type Description string | Edit this page View Source AcceptEncoding Accept-Encoding header field. See Section 20.2 of RFC 3261. Declaration public string? AcceptEncoding Field Value Type Description string | Edit this page View Source AcceptLanguage Accept-Language header field. See Section 20.3 of RFC 3261. Declaration public string? AcceptLanguage Field Value Type Description string | Edit this page View Source AlertInfo Alert-Info header field. See Section 20.4 of RFC 3261. Declaration public string? AlertInfo Field Value Type Description string | Edit this page View Source Allow Allow header field. See Section 20.5 of RFC 3261. Declaration public string? Allow Field Value Type Description string | Edit this page View Source AllowEvents Allow-Events header field. The Allow header field lists the set of methods supported by the UA generating the message. See Section 3.3.7 of RFC 3265. Declaration public string? AllowEvents Field Value Type Description string | Edit this page View Source AuthenticationHeader WWW-Authenticate header field. See Section 20.44 of RFC 3261. Declaration public SIPAuthenticationHeader? AuthenticationHeader Field Value Type Description SIPAuthenticationHeader | Edit this page View Source AuthenticationInfo Authentication-Info header field. See Section 20.6 of RFC 3261 Declaration public string? AuthenticationInfo Field Value Type Description string | Edit this page View Source CSeq Specifies the numeric portion of the CSeq header field. See Section 20.16 of RFC 3261. A value of -1 indicates that there is no CSeq field. Declaration public int CSeq Field Value Type Description int | Edit this page View Source CSeqMethod Specifies the method portion of the CSeq header field. See Section 20.16 of RFC 3261. Declaration public SIPMethodsEnum CSeqMethod Field Value Type Description SIPMethodsEnum | Edit this page View Source CallId Call-ID header field. See Section 20.8 of RFC 3261. Declaration public string? CallId Field Value Type Description string | Edit this page View Source CallInfo Call-Info header field. See Section 20.9 of RFC 3261. An empty list indicates that there are no Call-Info header fields. Declaration public List<SIPCallInfoHeader> CallInfo Field Value Type Description List<SIPCallInfoHeader> | Edit this page View Source Contact Contact header field. See Section 20.10 of RFC 3261. An empty list indicates that there are no Contact header fiels. Declaration public List<SIPContactHeader>? Contact Field Value Type Description List<SIPContactHeader> | Edit this page View Source ContentDisposition Content-Disposition header field. See Section 20.11 of RFC 3261. Declaration public string? ContentDisposition Field Value Type Description string | Edit this page View Source ContentEncoding Content-Encoding header field. See Section 20.12 of RFC 3261. Declaration public string? ContentEncoding Field Value Type Description string | Edit this page View Source ContentLanguage Content-Language header field. See Section 20.13 of RFC 3261. Declaration public string? ContentLanguage Field Value Type Description string | Edit this page View Source ContentLength Content-Length header field. See Section 20.14 of RFC 3261. Declaration public int ContentLength Field Value Type Description int | Edit this page View Source ContentType Content-Type header field. See Section 20.15 of RFC 3261. Declaration public string? ContentType Field Value Type Description string | Edit this page View Source Date Date header field. See Section 20.17 of RFC 3261. Declaration public string? Date Field Value Type Description string | Edit this page View Source ErrorInfo Error-Info header field. See Section 20.18 of RFC 3261. Declaration public string? ErrorInfo Field Value Type Description string | Edit this page View Source Event Event header field. See RFC 3265 and RFC 6665. Declaration public string? Event Field Value Type Description string | Edit this page View Source Expires Expires header field. See Section 20.19 of RFC 3261. Declaration public int Expires Field Value Type Description int | Edit this page View Source From From header field. See Section 20.20 of RFC 3261. Declaration public SIPFromHeader? From Field Value Type Description SIPFromHeader | Edit this page View Source Geolocation Contains the header field values of 1 or more Geolocation headers as defined in RFC 6442. An empty list indicates that no Geolocation headers are present. Declaration public List<SIPGeolocationHeader> Geolocation Field Value Type Description List<SIPGeolocationHeader> | Edit this page View Source GeolocationError Contains the header value of a Geolocation-Error header as defined in RFC 6442. The value is numeric code between 1 and 3 digits long. Declaration public string? GeolocationError Field Value Type Description string | Edit this page View Source GeolocationRouting Contains the header value of a Geolocation-Routing header as defined in RFC 6442. The header value may be either yes or no. Declaration public string? GeolocationRouting Field Value Type Description string | Edit this page View Source InReplyTo In-Reply-To header field. See Section 20.21 of RFC 3261. Declaration public string? InReplyTo Field Value Type Description string | Edit this page View Source MIMEVersion MIME-Version header field. See Section 20.24 of RFC 3261. Declaration public string? MIMEVersion Field Value Type Description string | Edit this page View Source MaxForwards Max-Forwards header field. See Section 20.22 of RFC 3261. Declaration public int MaxForwards Field Value Type Description int | Edit this page View Source MinExpires Min-Expires header field. See Section 20.23 of RFC 3261. Declaration public int MinExpires Field Value Type Description int | Edit this page View Source Organization Organization header field. See Section 20.25 of RFC 3261. Declaration public string? Organization Field Value Type Description string | Edit this page View Source PAssertedIdentity P-Asserted-Identity header field. See RFC 3325. Declaration public SIPPaiHeader? PAssertedIdentity Field Value Type Description SIPPaiHeader | Edit this page View Source PPreferredIdentity P-Preferred-Identity header field. See RFC 3325. Declaration public SIPPpiHeader? PPreferredIdentity Field Value Type Description SIPPpiHeader | Edit this page View Source Priority Priority header field. See Section 20.26 of RFC 3261. Declaration public string? Priority Field Value Type Description string | Edit this page View Source ProxyRequire Proxy-Require header field. See Section 20.29 of RFC 3261. Declaration public string? ProxyRequire Field Value Type Description string | Edit this page View Source Reason Reason header field. See RFC 3326. Declaration public string? Reason Field Value Type Description string | Edit this page View Source RecordRoutes Record-Route header field. See Section 20.30 of RFC 3261. Declaration public SIPRouteSet RecordRoutes Field Value Type Description SIPRouteSet | Edit this page View Source ReferSub Refer-Sub header field. See RFC 4488. If set to false indicates the implict REFER subscription should not be created. Declaration public string? ReferSub Field Value Type Description string | Edit this page View Source ReferTo Refer-To header field. See RFC 3515. Declaration public string? ReferTo Field Value Type Description string | Edit this page View Source ReferredBy The Referred-By header field. See RFC 3515. Declaration public string? ReferredBy Field Value Type Description string | Edit this page View Source ReplyTo Reply-To header field. See Section 20.31 of RFC 3261. Declaration public string? ReplyTo Field Value Type Description string | Edit this page View Source Require Require header field. See Section 20.32 of RFC 3261. Declaration public string? Require Field Value Type Description string | Edit this page View Source ResourcePriority Resource-Priority header field. See RFC 4412. Declaration public string? ResourcePriority Field Value Type Description string | Edit this page View Source RetryAfter Retry-After header field. See Section 20.33 of RFC 3261. Declaration public string? RetryAfter Field Value Type Description string | Edit this page View Source Routes Route header field. See Section 20.34 of RFC 3261. Declaration public SIPRouteSet Routes Field Value Type Description SIPRouteSet | Edit this page View Source Server Server header field. See Section 20.35 of RFC 3261. Declaration public string? Server Field Value Type Description string | Edit this page View Source Subject Subject header field. See Section 20.36 of RFC 3261. Declaration public string? Subject Field Value Type Description string | Edit this page View Source SubscriptionState Subscription-State header field. See RFC 3265 and RFC 6665. Declaration public string? SubscriptionState Field Value Type Description string | Edit this page View Source Supported Supported header field. See Section 20.37 of RFC 3261. Declaration public string? Supported Field Value Type Description string | Edit this page View Source Timestamp Timestamp header field. See Section 20.38 of RFC 3261. Declaration public string? Timestamp Field Value Type Description string | Edit this page View Source To To header field. See Section 20.39 of RFC 3261. Declaration public SIPToHeader? To Field Value Type Description SIPToHeader | Edit this page View Source UnknownHeaders Holds any unrecognized headers. Each item in the list is the original header line. Declaration public List<string> UnknownHeaders Field Value Type Description List<string> | Edit this page View Source Unsupported Unsupported header field. See Section 20.40 of RFC 3261. Declaration public string? Unsupported Field Value Type Description string | Edit this page View Source UserAgent User-Agent header field. See Section 20.41 of RFC 3261. Declaration public string? UserAgent Field Value Type Description string | Edit this page View Source Vias Via header field. See Section 20.42 of RFC 3261. Declaration public SIPViaSet Vias Field Value Type Description SIPViaSet | Edit this page View Source Warning Warning header field. See Section 20.43 of RFC 3261. Declaration public string? Warning Field Value Type Description string Methods | Edit this page View Source Copy() Creates a deep copy of this SIPHeader object. Declaration public SIPHeader Copy() Returns Type Description SIPHeader | Edit this page View Source GetUnknownHeaderValue(string) Unknown SIP headers are put into the UnknownHeaders member of this object by the ParseSIPHeaders() function. Each string is this string array contains the whole header line (for example: UnknownHeader: value). This function retrieves the entire header line given the input header name. Declaration public string? GetUnknownHeaderValue(string unknownHeaderName) Parameters Type Name Description string unknownHeaderName Name of the unknown SIP Header Returns Type Description string Returns null if the header is not found or the complete header line if it exists. Remarks This function assumes that there will be only a single header line for a given header name. | Edit this page View Source ParseSIPHeaders(string[]) Parses an array of header lines and creates a new SIPHeader object. Declaration public static SIPHeader ParseSIPHeaders(string[] headersCollection) Parameters Type Name Description string[] headersCollection Each line contains a single SIP header. Returns Type Description SIPHeader Returns a new SIPHeader object Exceptions Type Condition SIPValidationException Thrown if unable to parse the header fields due to invalid SIP formatting or illegal values. Exception Thrown if an unknown error occurs. | Edit this page View Source SetDateHeader() Sets the Date header field to the current time. Declaration public void SetDateHeader() | Edit this page View Source SplitHeaders(string) Splits a string containing the header portion of a SIP message into an array of strings. Handles header field folding. Declaration public static string[] SplitHeaders(string message) Parameters Type Name Description string message Returns Type Description string[] Each string contains a header line | Edit this page View Source ToString() Puts the SIP headers together into a string ready for transmission. Declaration public string ToString() Returns Type Description string String representing the SIP headers."
  },
  "api/SipLib.Core.SIPHeaderAncillary.html": {
    "href": "api/SipLib.Core.SIPHeaderAncillary.html",
    "title": "Class SIPHeaderAncillary",
    "keywords": "Class SIPHeaderAncillary Definitions for various SIP header parameter names Inheritance object SIPHeaderAncillary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPHeaderAncillary Fields | Edit this page View Source SIP_HEADERANC_BRANCH Declaration public const string SIP_HEADERANC_BRANCH = \"branch\" Field Value Type Description string | Edit this page View Source SIP_HEADERANC_MADDR Declaration public const string SIP_HEADERANC_MADDR = \"maddr\" Field Value Type Description string | Edit this page View Source SIP_HEADERANC_RECEIVED Declaration public const string SIP_HEADERANC_RECEIVED = \"received\" Field Value Type Description string | Edit this page View Source SIP_HEADERANC_RPORT Declaration public const string SIP_HEADERANC_RPORT = \"rport\" Field Value Type Description string | Edit this page View Source SIP_HEADERANC_TAG Declaration public const string SIP_HEADERANC_TAG = \"tag\" Field Value Type Description string | Edit this page View Source SIP_HEADERANC_TRANSPORT Declaration public const string SIP_HEADERANC_TRANSPORT = \"transport\" Field Value Type Description string | Edit this page View Source SIP_REFER_REPLACES Declaration public const string SIP_REFER_REPLACES = \"Replaces\" Field Value Type Description string"
  },
  "api/SipLib.Core.SIPHeaders.html": {
    "href": "api/SipLib.Core.SIPHeaders.html",
    "title": "Class SIPHeaders",
    "keywords": "Class SIPHeaders Definitions for SIP Header fields. Inheritance object SIPHeaders Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPHeaders Fields | Edit this page View Source SIP_COMPACTHEADER_ALLOWEVENTS RC3265 (SIP Events). Declaration public const string SIP_COMPACTHEADER_ALLOWEVENTS = \"u\" Field Value Type Description string | Edit this page View Source SIP_COMPACTHEADER_CALLID Declaration public const string SIP_COMPACTHEADER_CALLID = \"i\" Field Value Type Description string | Edit this page View Source SIP_COMPACTHEADER_CONTACT Declaration public const string SIP_COMPACTHEADER_CONTACT = \"m\" Field Value Type Description string | Edit this page View Source SIP_COMPACTHEADER_CONTENTLENGTH Declaration public const string SIP_COMPACTHEADER_CONTENTLENGTH = \"l\" Field Value Type Description string | Edit this page View Source SIP_COMPACTHEADER_CONTENTTYPE Declaration public const string SIP_COMPACTHEADER_CONTENTTYPE = \"c\" Field Value Type Description string | Edit this page View Source SIP_COMPACTHEADER_EVENT RC3265 (SIP Events). Declaration public const string SIP_COMPACTHEADER_EVENT = \"o\" Field Value Type Description string | Edit this page View Source SIP_COMPACTHEADER_FROM Declaration public const string SIP_COMPACTHEADER_FROM = \"f\" Field Value Type Description string | Edit this page View Source SIP_COMPACTHEADER_REFERTO RFC 3515 \"The Session Initiation Protocol (SIP) Refer Method\". Declaration public const string SIP_COMPACTHEADER_REFERTO = \"r\" Field Value Type Description string | Edit this page View Source SIP_COMPACTHEADER_SUBJECT Declaration public const string SIP_COMPACTHEADER_SUBJECT = \"s\" Field Value Type Description string | Edit this page View Source SIP_COMPACTHEADER_SUPPORTED Declaration public const string SIP_COMPACTHEADER_SUPPORTED = \"k\" Field Value Type Description string | Edit this page View Source SIP_COMPACTHEADER_TO Declaration public const string SIP_COMPACTHEADER_TO = \"t\" Field Value Type Description string | Edit this page View Source SIP_COMPACTHEADER_VIA Declaration public const string SIP_COMPACTHEADER_VIA = \"v\" Field Value Type Description string | Edit this page View Source SIP_HEADER_ACCEPT Declaration public const string SIP_HEADER_ACCEPT = \"Accept\" Field Value Type Description string | Edit this page View Source SIP_HEADER_ACCEPTENCODING Declaration public const string SIP_HEADER_ACCEPTENCODING = \"Accept-Encoding\" Field Value Type Description string | Edit this page View Source SIP_HEADER_ACCEPTLANGUAGE Declaration public const string SIP_HEADER_ACCEPTLANGUAGE = \"Accept-Language\" Field Value Type Description string | Edit this page View Source SIP_HEADER_ALERTINFO Declaration public const string SIP_HEADER_ALERTINFO = \"Alert-Info\" Field Value Type Description string | Edit this page View Source SIP_HEADER_ALLOW Declaration public const string SIP_HEADER_ALLOW = \"Allow\" Field Value Type Description string | Edit this page View Source SIP_HEADER_ALLOW_EVENTS RC3265 (SIP Events). Declaration public const string SIP_HEADER_ALLOW_EVENTS = \"Allow-Events\" Field Value Type Description string | Edit this page View Source SIP_HEADER_AUTHENTICATIONINFO Declaration public const string SIP_HEADER_AUTHENTICATIONINFO = \"Authentication-Info\" Field Value Type Description string | Edit this page View Source SIP_HEADER_AUTHORIZATION Declaration public const string SIP_HEADER_AUTHORIZATION = \"Authorization\" Field Value Type Description string | Edit this page View Source SIP_HEADER_CALLID Declaration public const string SIP_HEADER_CALLID = \"Call-ID\" Field Value Type Description string | Edit this page View Source SIP_HEADER_CALLINFO Declaration public const string SIP_HEADER_CALLINFO = \"Call-Info\" Field Value Type Description string | Edit this page View Source SIP_HEADER_CONTACT Declaration public const string SIP_HEADER_CONTACT = \"Contact\" Field Value Type Description string | Edit this page View Source SIP_HEADER_CONTENTLENGTH Declaration public const string SIP_HEADER_CONTENTLENGTH = \"Content-Length\" Field Value Type Description string | Edit this page View Source SIP_HEADER_CONTENTTYPE Declaration public const string SIP_HEADER_CONTENTTYPE = \"Content-Type\" Field Value Type Description string | Edit this page View Source SIP_HEADER_CONTENT_DISPOSITION Declaration public const string SIP_HEADER_CONTENT_DISPOSITION = \"Content-Disposition\" Field Value Type Description string | Edit this page View Source SIP_HEADER_CONTENT_ENCODING Declaration public const string SIP_HEADER_CONTENT_ENCODING = \"Content-Encoding\" Field Value Type Description string | Edit this page View Source SIP_HEADER_CONTENT_LANGUAGE Declaration public const string SIP_HEADER_CONTENT_LANGUAGE = \"Content-Language\" Field Value Type Description string | Edit this page View Source SIP_HEADER_CSEQ Declaration public const string SIP_HEADER_CSEQ = \"CSeq\" Field Value Type Description string | Edit this page View Source SIP_HEADER_DATE Declaration public const string SIP_HEADER_DATE = \"Date\" Field Value Type Description string | Edit this page View Source SIP_HEADER_ERROR_INFO Declaration public const string SIP_HEADER_ERROR_INFO = \"Error-Info\" Field Value Type Description string | Edit this page View Source SIP_HEADER_ETAG RFC3903 Declaration public const string SIP_HEADER_ETAG = \"SIP-ETag\" Field Value Type Description string | Edit this page View Source SIP_HEADER_EVENT RC3265 (SIP Events). Declaration public const string SIP_HEADER_EVENT = \"Event\" Field Value Type Description string | Edit this page View Source SIP_HEADER_EXPIRES Declaration public const string SIP_HEADER_EXPIRES = \"Expires\" Field Value Type Description string | Edit this page View Source SIP_HEADER_FROM Declaration public const string SIP_HEADER_FROM = \"From\" Field Value Type Description string | Edit this page View Source SIP_HEADER_GEOLOCATION Declaration public const string SIP_HEADER_GEOLOCATION = \"Geolocation\" Field Value Type Description string | Edit this page View Source SIP_HEADER_GEOLOCATION_ERROR Declaration public const string SIP_HEADER_GEOLOCATION_ERROR = \"Geolocation-Error\" Field Value Type Description string | Edit this page View Source SIP_HEADER_GEOLOCATION_ROUTING Declaration public const string SIP_HEADER_GEOLOCATION_ROUTING = \"Geolocation-Routing\" Field Value Type Description string | Edit this page View Source SIP_HEADER_IN_REPLY_TO Declaration public const string SIP_HEADER_IN_REPLY_TO = \"In-Reply-To\" Field Value Type Description string | Edit this page View Source SIP_HEADER_MAXFORWARDS Declaration public const string SIP_HEADER_MAXFORWARDS = \"Max-Forwards\" Field Value Type Description string | Edit this page View Source SIP_HEADER_MIME_VERSION Declaration public const string SIP_HEADER_MIME_VERSION = \"MIME-Version\" Field Value Type Description string | Edit this page View Source SIP_HEADER_MINEXPIRES Declaration public const string SIP_HEADER_MINEXPIRES = \"Min-Expires\" Field Value Type Description string | Edit this page View Source SIP_HEADER_ORGANIZATION Declaration public const string SIP_HEADER_ORGANIZATION = \"Organization\" Field Value Type Description string | Edit this page View Source SIP_HEADER_PAI Declaration public const string SIP_HEADER_PAI = \"P-Asserted-Identity\" Field Value Type Description string | Edit this page View Source SIP_HEADER_PPI Declaration public const string SIP_HEADER_PPI = \"P-Preferred-Identity\" Field Value Type Description string | Edit this page View Source SIP_HEADER_PRIORITY Declaration public const string SIP_HEADER_PRIORITY = \"Priority\" Field Value Type Description string | Edit this page View Source SIP_HEADER_PROXYAUTHENTICATION Declaration public const string SIP_HEADER_PROXYAUTHENTICATION = \"Proxy-Authenticate\" Field Value Type Description string | Edit this page View Source SIP_HEADER_PROXYAUTHORIZATION Declaration public const string SIP_HEADER_PROXYAUTHORIZATION = \"Proxy-Authorization\" Field Value Type Description string | Edit this page View Source SIP_HEADER_PROXY_REQUIRE Declaration public const string SIP_HEADER_PROXY_REQUIRE = \"Proxy-Require\" Field Value Type Description string | Edit this page View Source SIP_HEADER_REASON Declaration public const string SIP_HEADER_REASON = \"Reason\" Field Value Type Description string | Edit this page View Source SIP_HEADER_RECORDROUTE Declaration public const string SIP_HEADER_RECORDROUTE = \"Record-Route\" Field Value Type Description string | Edit this page View Source SIP_HEADER_REFERREDBY RFC 3515 \"The Session Initiation Protocol (SIP) Refer Method\". Declaration public const string SIP_HEADER_REFERREDBY = \"Referred-By\" Field Value Type Description string | Edit this page View Source SIP_HEADER_REFERSUB RFC 4488 Used to stop the implicit SIP event subscription on a REFER request. Declaration public const string SIP_HEADER_REFERSUB = \"Refer-Sub\" Field Value Type Description string | Edit this page View Source SIP_HEADER_REFERTO RFC 3515 \"The Session Initiation Protocol (SIP) Refer Method\". Declaration public const string SIP_HEADER_REFERTO = \"Refer-To\" Field Value Type Description string | Edit this page View Source SIP_HEADER_REPLY_TO Declaration public const string SIP_HEADER_REPLY_TO = \"Reply-To\" Field Value Type Description string | Edit this page View Source SIP_HEADER_REQUIRE Declaration public const string SIP_HEADER_REQUIRE = \"Require\" Field Value Type Description string | Edit this page View Source SIP_HEADER_RESOURCE_PRIORITY Declaration public const string SIP_HEADER_RESOURCE_PRIORITY = \"Resource-Priority\" Field Value Type Description string | Edit this page View Source SIP_HEADER_RETRY_AFTER Declaration public const string SIP_HEADER_RETRY_AFTER = \"Retry-After\" Field Value Type Description string | Edit this page View Source SIP_HEADER_ROUTE Declaration public const string SIP_HEADER_ROUTE = \"Route\" Field Value Type Description string | Edit this page View Source SIP_HEADER_SERVER Declaration public const string SIP_HEADER_SERVER = \"Server\" Field Value Type Description string | Edit this page View Source SIP_HEADER_SUBJECT Declaration public const string SIP_HEADER_SUBJECT = \"Subject\" Field Value Type Description string | Edit this page View Source SIP_HEADER_SUBSCRIPTION_STATE RC3265 (SIP Events). Declaration public const string SIP_HEADER_SUBSCRIPTION_STATE = \"Subscription-State\" Field Value Type Description string | Edit this page View Source SIP_HEADER_SUPPORTED Declaration public const string SIP_HEADER_SUPPORTED = \"Supported\" Field Value Type Description string | Edit this page View Source SIP_HEADER_TIMESTAMP Declaration public const string SIP_HEADER_TIMESTAMP = \"Timestamp\" Field Value Type Description string | Edit this page View Source SIP_HEADER_TO Declaration public const string SIP_HEADER_TO = \"To\" Field Value Type Description string | Edit this page View Source SIP_HEADER_UNSUPPORTED Declaration public const string SIP_HEADER_UNSUPPORTED = \"Unsupported\" Field Value Type Description string | Edit this page View Source SIP_HEADER_USERAGENT Declaration public const string SIP_HEADER_USERAGENT = \"User-Agent\" Field Value Type Description string | Edit this page View Source SIP_HEADER_VIA Declaration public const string SIP_HEADER_VIA = \"Via\" Field Value Type Description string | Edit this page View Source SIP_HEADER_WARNING Declaration public const string SIP_HEADER_WARNING = \"Warning\" Field Value Type Description string | Edit this page View Source SIP_HEADER_WWWAUTHENTICATE Declaration public const string SIP_HEADER_WWWAUTHENTICATE = \"WWW-Authenticate\" Field Value Type Description string"
  },
  "api/SipLib.Core.SIPMessage.html": {
    "href": "api/SipLib.Core.SIPMessage.html",
    "title": "Class SIPMessage",
    "keywords": "Class SIPMessage Represents an entire SIP message. This is the base class for the SIPRequest and the SIPResponse classes. Inheritance object SIPMessage SIPRequest SIPResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPMessage Fields | Edit this page View Source Body Contains the entire SIP message body as a string. Set to null if the message does not have a body. Declaration public string? Body Field Value Type Description string | Edit this page View Source Header Contains all headers in the request Declaration public SIPHeader Header Field Value Type Description SIPHeader | Edit this page View Source LocalSIPEndPoint The local SIP socket the message was received on or sent from. Declaration public SIPEndPoint? LocalSIPEndPoint Field Value Type Description SIPEndPoint | Edit this page View Source RemoteSIPEndPoint The remote IP socket the message was received from or sent to. Declaration public SIPEndPoint? RemoteSIPEndPoint Field Value Type Description SIPEndPoint | Edit this page View Source SIPMessageType Identifies the type of SIP message -- i.e. a request or a response. Declaration public SIPMessageTypesEnum SIPMessageType Field Value Type Description SIPMessageTypesEnum Properties | Edit this page View Source HasBody Returns true if this message has a body. Declaration public bool HasBody { get; } Property Value Type Description bool Methods | Edit this page View Source GetBodyContents() Gets a list of all of the contents of the body for this SIPMessage. Declaration public List<MessageContentsContainer> GetBodyContents() Returns Type Description List<MessageContentsContainer> Returns a list of contents. If the list is empty then there are not body contents. | Edit this page View Source GetContentsContainer(string) Gets the MessageContentsContainer containing the body contents for a specified content type. Declaration public MessageContentsContainer? GetContentsContainer(string contentType) Parameters Type Name Description string contentType Specifies the MIME type of the content block to get. For example: \"application/sdp\". Use the values defined in the ContentTypes class to ensure consistancy. This parameter may be a value taken from a message's Content-Type header but it must not include any header parameters. Returns Type Description MessageContentsContainer Returns a MessageContentsContainer object containing the specified body contents block. Returns null if the specified content type is not found. | Edit this page View Source GetContentsOfType(string) Gets a string containing the body contents for a specified content type. This method only returns non-binary content types. Declaration public string? GetContentsOfType(string contentType) Parameters Type Name Description string contentType Specifies the MIME type of the content block to get. For example: \"application/sdp\". Use the values defined in the ContentTypes class to ensure consistancy. This parameter may be a value taken from a message's Content-Type header but it must not include any header parameters. Returns Type Description string Returns a string that contains the body content block. Returns null if the specified content type is not found. | Edit this page View Source ParseSIPMessage(byte[], SIPEndPoint, SIPEndPoint) Parses a byte array containing a SIP message and returns a SIPMessage object. Declaration public static SIPMessage? ParseSIPMessage(byte[] buffer, SIPEndPoint localSIPEndPoint, SIPEndPoint remoteSIPEndPoint) Parameters Type Name Description byte[] buffer Byte array containing the SIP message that was received from the transport layer. SIPEndPoint localSIPEndPoint The local SIP socket the message was received on or sent from. SIPEndPoint remoteSIPEndPoint The remote IP socket the message was received from or sent to. Returns Type Description SIPMessage Returns a SIPMessage object if successful. Returns null if the message is not valid. Exceptions Type Condition ArgumentException Thrown if the SIP message exceeds the maximum allowable length defined in: SIPConstants.SIP_MAXIMUM_RECEIVE_LENGTH. Exception Thrown if an unexpected error occurs. | Edit this page View Source ParseSIPMessage(string, SIPEndPoint?, SIPEndPoint?) Parses a string containing a SIP message and returns a SIPMessage Declaration public static SIPMessage? ParseSIPMessage(string message, SIPEndPoint? localSIPEndPoint, SIPEndPoint? remoteSIPEndPoint) Parameters Type Name Description string message Input string that contains the entire SIP message. SIPEndPoint localSIPEndPoint The local SIP socket the message was received on or sent from. SIPEndPoint remoteSIPEndPoint The remote IP socket the message was received from or sent to. Returns Type Description SIPMessage Returns a SIPMessage object if successful. Returns null if the message is not valid."
  },
  "api/SipLib.Core.SIPMessageTypesEnum.html": {
    "href": "api/SipLib.Core.SIPMessageTypesEnum.html",
    "title": "Enum SIPMessageTypesEnum",
    "keywords": "Enum SIPMessageTypesEnum Message types for SIP Namespace: SipLib.Core Assembly: SipLib.dll Syntax public enum SIPMessageTypesEnum Fields Name Description Request SIP Request message Response SIP Response message Unknown Unknown SIP message type"
  },
  "api/SipLib.Core.SIPMethods.html": {
    "href": "api/SipLib.Core.SIPMethods.html",
    "title": "Class SIPMethods",
    "keywords": "Class SIPMethods Class for mapping SIP method string to SIPMethodsEnum values Inheritance object SIPMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPMethods Methods | Edit this page View Source GetMethod(string) Converts a SIP method string to a SIPMethodsEnum value Declaration public static SIPMethodsEnum GetMethod(string method) Parameters Type Name Description string method Returns Type Description SIPMethodsEnum"
  },
  "api/SipLib.Core.SIPMethodsEnum.html": {
    "href": "api/SipLib.Core.SIPMethodsEnum.html",
    "title": "Enum SIPMethodsEnum",
    "keywords": "Enum SIPMethodsEnum Enumeration of all of the methods for a SIP request. Namespace: SipLib.Core Assembly: SipLib.dll Syntax public enum SIPMethodsEnum Fields Name Description ACK BYE CANCEL INFO INVITE MESSAGE NONE NOTIFY OPTIONS PING PRACK PUBLISH REFER REGISTER SUBSCRIBE UNKNOWN UPDATE"
  },
  "api/SipLib.Core.SIPPaiHeader.html": {
    "href": "api/SipLib.Core.SIPPaiHeader.html",
    "title": "Class SIPPaiHeader",
    "keywords": "Class SIPPaiHeader Class for the SIP P-Asserted-Identity header. Inheritance object SIPPaiHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPPaiHeader Constructors | Edit this page View Source SIPPaiHeader(string, SIPURI) Constructor Declaration public SIPPaiHeader(string PaiName, SIPURI PaiURI) Parameters Type Name Description string PaiName Name field of the header. Optional. SIPURI PaiURI SIPURI to build the SIPPaiHeader from Properties | Edit this page View Source Name Gets or sets the name field. Declaration public string? Name { get; set; } Property Value Type Description string | Edit this page View Source URI Gets or sets the SIPURI field Declaration public SIPURI? URI { get; set; } Property Value Type Description SIPURI | Edit this page View Source UserField Gets or sets the SIPUserField Declaration public SIPUserField UserField { get; set; } Property Value Type Description SIPUserField Methods | Edit this page View Source ParseFromHeader(string) Parses a string into a SIPPaiHeader object. Declaration public static SIPPaiHeader ParseFromHeader(string PaiHeaderStr) Parameters Type Name Description string PaiHeaderStr Input string Returns Type Description SIPPaiHeader Returns a new SIPPaiHeader object Exceptions Type Condition SIPValidationException | Edit this page View Source ToString() Converts this object into a P-Asserted-Identity header value Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/SipLib.Core.SIPParameters.html": {
    "href": "api/SipLib.Core.SIPParameters.html",
    "title": "Class SIPParameters",
    "keywords": "Class SIPParameters Represents a series of name value pairs that are optionally included in SIP URIs and also as an additional optional setting on some SIP Headers (Contact, To, From, Via). This class also treats the header value of a SIP URI as a special case of a SIP parameter. The difference between a parameter and a SIP URI header is the start and delimiter characters used. Inheritance object SIPParameters Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPParameters Constructors | Edit this page View Source SIPParameters(string?, char) Parses the name value pairs from a SIP parameter or header string. Declaration public SIPParameters(string? sipString, char delimiter) Parameters Type Name Description string sipString Input string containing the parameters char delimiter Delimeter to use for parsing Properties | Edit this page View Source Count Gets the number of parameters Declaration public int Count { get; } Property Value Type Description int Methods | Edit this page View Source AreEqual(SIPParameters, SIPParameters) Determines if SIPParameters objects are equal. Two SIPParameters objects are considered equal if they have the same keys and values. The order of the keys does not affect the equality comparison. Declaration public static bool AreEqual(SIPParameters params1, SIPParameters params2) Parameters Type Name Description SIPParameters params1 First SIPParameters object SIPParameters params2 Second SIPParameters object. Returns Type Description bool Returns true if they are equal or false if they are not | Edit this page View Source CopyOf() Creates a deep copy of this SIPParameters object Declaration public SIPParameters CopyOf() Returns Type Description SIPParameters | Edit this page View Source Equals(object?) Determines if a SIPParameters object is equal to this one. Two SIPParameters objects are considered equal if they have the same keys and values. The order of the keys does not affect the equality comparison. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Input SIPParameters object Returns Type Description bool Returns true if the input SIPParameters object is equal to this one or false if it is not. Overrides object.Equals(object) | Edit this page View Source Get(string) Gets the value of a specified parameter Declaration public string? Get(string name) Parameters Type Name Description string name Name of the parameter Returns Type Description string Returns the value of the parameter. Returns null if the dictionary is empty or if the parameter is not in the dictionary. | Edit this page View Source GetHashCode() Calculates the has value for this object. Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() | Edit this page View Source GetKeyValuePairsFromQuoted(string, char) Gets the key value pairs from a quoted string into a string array Declaration public static string[]? GetKeyValuePairsFromQuoted(string quotedString, char delimiter) Parameters Type Name Description string quotedString Input quoted string char delimiter Delimeter to use. For example ',' Returns Type Description string[] Returns a string array containing the name value pairs | Edit this page View Source GetKeys() Gets an array of all parameter names (keys) Declaration public string[]? GetKeys() Returns Type Description string[] Returns an array of all parameter names or null if the dictionary is empty | Edit this page View Source Has(string) Determines if a parameter exists in the dictionary Declaration public bool Has(string name) Parameters Type Name Description string name Name of the parameter Returns Type Description bool Returns true if the parameter exists or false if it does not. | Edit this page View Source Remove(string) Removes a named parameter if it exists. Declaration public void Remove(string name) Parameters Type Name Description string name Name of the parameter to remove | Edit this page View Source RemoveAll() Clears the dictionary. Declaration public void RemoveAll() | Edit this page View Source Set(string, string?) Sets a key name to a specified value. If the dictionary does not contain the key then a new key value pair is added. Declaration public void Set(string name, string? value) Parameters Type Name Description string name Name of the parameter (key) string value Value of the parameter | Edit this page View Source ToString() Converts the name value pairs to a string. Declaration public string ToString() Returns Type Description string Operators | Edit this page View Source operator ==(SIPParameters, SIPParameters) Two SIPParameters objects are considered equal if they have the same keys and values. The order of the keys does not affect the equality comparison. Declaration public static bool operator ==(SIPParameters x, SIPParameters y) Parameters Type Name Description SIPParameters x Left-hand SIPParameters object SIPParameters y Right-hand SIPParameters object Returns Type Description bool True if the two SIPParameters objects are equal or false if they are not. | Edit this page View Source operator !=(SIPParameters, SIPParameters) Not equals operator Declaration public static bool operator !=(SIPParameters x, SIPParameters y) Parameters Type Name Description SIPParameters x Left-hand SIPParameters object SIPParameters y Right-hand SIPParameters object Returns Type Description bool Returns true if the two objects are not equal or false if they are equal"
  },
  "api/SipLib.Core.SIPPpiHeader.html": {
    "href": "api/SipLib.Core.SIPPpiHeader.html",
    "title": "Class SIPPpiHeader",
    "keywords": "Class SIPPpiHeader Class for the SIP P-Preferred-Identity header. Inheritance object SIPPpiHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPPpiHeader Constructors | Edit this page View Source SIPPpiHeader(string, SIPURI) Constructor Declaration public SIPPpiHeader(string PpiName, SIPURI PpiURI) Parameters Type Name Description string PpiName Name field of the PPI header. Optional SIPURI PpiURI SIPURI object to build the PPI header from Properties | Edit this page View Source Name Gets or sets the name field Declaration public string? Name { get; set; } Property Value Type Description string | Edit this page View Source URI Gets or sets the SIPURI field Declaration public SIPURI? URI { get; set; } Property Value Type Description SIPURI | Edit this page View Source UserField Gets or sets the SIPUserField Declaration public SIPUserField UserField { get; set; } Property Value Type Description SIPUserField Methods | Edit this page View Source ParseFromHeader(string) Parses a string into a SIPPpiHeader object. Declaration public static SIPPpiHeader ParseFromHeader(string PpiHeaderStr) Parameters Type Name Description string PpiHeaderStr Input string Returns Type Description SIPPpiHeader Returns a new SIPPpiHeader object | Edit this page View Source ToString() Converts this SIPPpiHeader object into a string header value Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/SipLib.Core.SIPProtocolsEnum.html": {
    "href": "api/SipLib.Core.SIPProtocolsEnum.html",
    "title": "Enum SIPProtocolsEnum",
    "keywords": "Enum SIPProtocolsEnum Enumeration that defines the transport protocols used for SIP Namespace: SipLib.Core Assembly: SipLib.dll Syntax public enum SIPProtocolsEnum Fields Name Description tcp Transport Control Protocol tls Transport Layer Security udp User Datagram Protocol ws Web Socket. wss Web Socket over TLS."
  },
  "api/SipLib.Core.SIPProtocolsType.html": {
    "href": "api/SipLib.Core.SIPProtocolsType.html",
    "title": "Class SIPProtocolsType",
    "keywords": "Class SIPProtocolsType Helper functions for dealing with tranport protocols Inheritance object SIPProtocolsType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPProtocolsType Methods | Edit this page View Source GetProtocolType(string) Returns a protocol enum value given a string containing the transport protocol type. Only call this function if IsAllowedProtocol() returns true. Declaration public static SIPProtocolsEnum GetProtocolType(string protocolType) Parameters Type Name Description string protocolType Input string value Returns Type Description SIPProtocolsEnum Returns the enum equivalent | Edit this page View Source IsAllowedProtocol(string) Determines if a transport protocol is allowed. Declaration public static bool IsAllowedProtocol(string protocol) Parameters Type Name Description string protocol Input string value Returns Type Description bool Return true if the transport protocol is allowed, else return false"
  },
  "api/SipLib.Core.SIPReplacesParameter.html": {
    "href": "api/SipLib.Core.SIPReplacesParameter.html",
    "title": "Class SIPReplacesParameter",
    "keywords": "Class SIPReplacesParameter Class for the Replaces parameter of a Refer-To header field. The Replaces parameter is used to identify involved in a transfer operation. Inheritance object SIPReplacesParameter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPReplacesParameter Fields | Edit this page View Source CallID SIP Call-ID of the call Declaration public string? CallID Field Value Type Description string | Edit this page View Source FromTag Tag from the From header Declaration public string? FromTag Field Value Type Description string | Edit this page View Source ToTag Tag from the To header Declaration public string? ToTag Field Value Type Description string Methods | Edit this page View Source Parse(string) Parses a string into a SIPReplacesParameter Declaration public static SIPReplacesParameter? Parse(string replaces) Parameters Type Name Description string replaces Input string Returns Type Description SIPReplacesParameter Returns a new SIPReplacesParameter or null if an error occurred"
  },
  "api/SipLib.Core.SIPRequest.html": {
    "href": "api/SipLib.Core.SIPRequest.html",
    "title": "Class SIPRequest",
    "keywords": "Class SIPRequest Class for a SIP request message. Inheritance object SIPMessage SIPRequest Inherited Members SIPMessage.SIPMessageType SIPMessage.Body SIPMessage.RemoteSIPEndPoint SIPMessage.LocalSIPEndPoint SIPMessage.Header SIPMessage.ParseSIPMessage(byte[], SIPEndPoint, SIPEndPoint) SIPMessage.ParseSIPMessage(string, SIPEndPoint, SIPEndPoint) SIPMessage.HasBody SIPMessage.GetContentsOfType(string) SIPMessage.GetContentsContainer(string) SIPMessage.GetBodyContents() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPRequest : SIPMessage Constructors | Edit this page View Source SIPRequest(SIPMethodsEnum, SIPURI) Constructs a SIPRequest object. Use this constructor when creating a new request. Declaration public SIPRequest(SIPMethodsEnum method, SIPURI uri) Parameters Type Name Description SIPMethodsEnum method The SIP method for the request. SIPURI uri The URI to use in the request line. Must be a valid SIPURI. | Edit this page View Source SIPRequest(SIPMethodsEnum, string) Constructs a SIPRequest object. Use this constructor when creating a new request. Declaration public SIPRequest(SIPMethodsEnum method, string uri) Parameters Type Name Description SIPMethodsEnum method The SIP method for the request. string uri The URI to use in the request line. Must be a valid SIP URI. Exceptions Type Condition SIPValidationException Thrown if the input uri string is not a valid SIP URI Fields | Edit this page View Source Method Request method Declaration public SIPMethodsEnum Method Field Value Type Description SIPMethodsEnum | Edit this page View Source URI Request URI Declaration public SIPURI? URI Field Value Type Description SIPURI Methods | Edit this page View Source Copy() Creates an identical copy of the SIP Request for the caller. This is a deep copy. Declaration public SIPRequest Copy() Returns Type Description SIPRequest New copy of the SIPRequest. | Edit this page View Source CreateBasicRequest(SIPMethodsEnum, SIPURI, SIPURI, string?, SIPURI, string?) Creates a new SIPRequest containing all the basic headers: From, To, Via, Contact, Call-ID, Max-Forwards, Content-Length and CSeq. Declaration public static SIPRequest CreateBasicRequest(SIPMethodsEnum Method, SIPURI reqUri, SIPURI ToSipUri, string? ToDisplayName, SIPURI FromSipUri, string? FromDisplayName) Parameters Type Name Description SIPMethodsEnum Method SIP method of the request. SIPURI reqUri Request URI. May be the same as the ToSipUri or it may be different. SIPURI ToSipUri To URI. string ToDisplayName Display name for the To header. Optional, may be null. SIPURI FromSipUri From URI. A From-Tag is automatically created string FromDisplayName Display name for the From header. Optional, may be null. Returns Type Description SIPRequest Returns a new SIPRequest object. | Edit this page View Source GetQueueUri() Gets the URI of the queue (destination) that the request is addressed to. This is the URI of the topmost Route header if a route set is available, or the request URI (RURI) if there are no Route headers. Declaration public string GetQueueUri() Returns Type Description string Returns the URI of the destination queue. | Edit this page View Source IsValid(out SIPValidationFieldsEnum, out string?) Determines if this SIPRequest object is vallid Declaration public bool IsValid(out SIPValidationFieldsEnum errorField, out string? errorMessage) Parameters Type Name Description SIPValidationFieldsEnum errorField Identifies the header field that is not valid string errorMessage Explanation of the error. Returns Type Description bool Returns true if the SIPMessage is valid. | Edit this page View Source ParseSIPRequest(SIPMessage) Parses a received SIPMessage object that contains a SIP request message and creates a new SIPRequest object. Declaration public static SIPRequest ParseSIPRequest(SIPMessage sipMessage) Parameters Type Name Description SIPMessage sipMessage SIPMessage object to build the SIPRequest from /// Returns Type Description SIPRequest Returns a new SIPRequest object. Exceptions Type Condition SIPValidationException Thrown if the SIP message is not a valid SIP Request | Edit this page View Source ParseSIPRequest(string) Parses a string containing a SIPMessage into a SIPRequest object. Declaration public static SIPRequest ParseSIPRequest(string sipMessageStr) Parameters Type Name Description string sipMessageStr String containing a SIPMessage object Returns Type Description SIPRequest Returns a new SIPRequest object. Exceptions Type Condition SIPValidationException Thrown if the SIPMessage is not a valid SIP request. | Edit this page View Source ToByteArray() Converts this message to a byte array using UTF8 encoding. Declaration public byte[] ToByteArray() Returns Type Description byte[] Returns a UTF-8 encoded byte array | Edit this page View Source ToString() Converts this SIP request to a string. Declaration public string ToString() Returns Type Description string Returns the string represention of this SIPRequest object Exceptions Type Condition Exception Thrown if an unexpected error occured"
  },
  "api/SipLib.Core.SIPResponse.html": {
    "href": "api/SipLib.Core.SIPResponse.html",
    "title": "Class SIPResponse",
    "keywords": "Class SIPResponse Class for a SIP Response message Inheritance object SIPMessage SIPResponse Inherited Members SIPMessage.SIPMessageType SIPMessage.Body SIPMessage.RemoteSIPEndPoint SIPMessage.LocalSIPEndPoint SIPMessage.Header SIPMessage.ParseSIPMessage(byte[], SIPEndPoint, SIPEndPoint) SIPMessage.ParseSIPMessage(string, SIPEndPoint, SIPEndPoint) SIPMessage.HasBody SIPMessage.GetContentsOfType(string) SIPMessage.GetContentsContainer(string) SIPMessage.GetBodyContents() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPResponse : SIPMessage Constructors | Edit this page View Source SIPResponse(SIPResponseStatusCodesEnum, string?, SIPEndPoint) Constructor to use when building a new SIP response message. Declaration public SIPResponse(SIPResponseStatusCodesEnum responseType, string? reasonPhrase, SIPEndPoint localSIPEndPoint) Parameters Type Name Description SIPResponseStatusCodesEnum responseType Status code. string reasonPhrase Reason phrase. SIPEndPoint localSIPEndPoint Local endpoint that is sending or receiving the SIP response message. Fields | Edit this page View Source ReasonPhrase Response reason phrase Declaration public string? ReasonPhrase Field Value Type Description string | Edit this page View Source SIPVersion SIP version number Declaration public string? SIPVersion Field Value Type Description string | Edit this page View Source Status Response status enumeration Declaration public SIPResponseStatusCodesEnum Status Field Value Type Description SIPResponseStatusCodesEnum | Edit this page View Source StatusCode SIP response status code integer Declaration public int StatusCode Field Value Type Description int Methods | Edit this page View Source Copy() Creates an identical copy of the SIP Response for the caller. This is a deep copy. Declaration public SIPResponse Copy() Returns Type Description SIPResponse New copy of the SIPResponse. | Edit this page View Source ParseSIPResponse(SIPMessage) Parses a SIPMessage object into a SIPResponse object Declaration public static SIPResponse ParseSIPResponse(SIPMessage sipMessage) Parameters Type Name Description SIPMessage sipMessage Must contain a valid SIPMessage object Returns Type Description SIPResponse Returns a new SIPResponse object | Edit this page View Source ParseSIPResponse(string) Parses a string containing a SIPMessage object into a SIPResponse object Declaration public static SIPResponse ParseSIPResponse(string sipMessageStr) Parameters Type Name Description string sipMessageStr Returns Type Description SIPResponse Returns a new SIPResponse message | Edit this page View Source ToByteArray() Converts this SIP response message to a byte array. Declaration public byte[] ToByteArray() Returns Type Description byte[] | Edit this page View Source ToString() Converts this SIPResponse message to a string. Declaration public string ToString() Returns Type Description string Returns the string version of this object."
  },
  "api/SipLib.Core.SIPResponseStatusCodes.html": {
    "href": "api/SipLib.Core.SIPResponseStatusCodes.html",
    "title": "Class SIPResponseStatusCodes",
    "keywords": "Class SIPResponseStatusCodes SIP response status codes functions Inheritance object SIPResponseStatusCodes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPResponseStatusCodes Methods | Edit this page View Source GetStatusTypeForCode(int) Converts an integer into a SIPResponseStatusCodesEnum Declaration public static SIPResponseStatusCodesEnum GetStatusTypeForCode(int statusCode) Parameters Type Name Description int statusCode Returns Type Description SIPResponseStatusCodesEnum"
  },
  "api/SipLib.Core.SIPResponseStatusCodesEnum.html": {
    "href": "api/SipLib.Core.SIPResponseStatusCodesEnum.html",
    "title": "Enum SIPResponseStatusCodesEnum",
    "keywords": "Enum SIPResponseStatusCodesEnum Enumeration of SIP response status codes Namespace: SipLib.Core Assembly: SipLib.dll Syntax public enum SIPResponseStatusCodesEnum Fields Name Description Accepted AddressIncomplete AlternativeService Ambiguous AnonymityDisallowed BadEvent BadExtension BadGateway BadIdentityInfo BadRequest BusyEverywhere BusyHere CallIsBeingForwarded CallLegTransactionDoesNotExist ConditionalRequestFailed ConsentNeeded Decline DoesNotExistAnywhere ExtensionRequired FirstHopLacksOutboundSupport FlowFailed Forbidden Gone InternalServerError IntervalTooBrief InvalidIdentityHeader LoopDetected MaxBreadthExceeded MessageTooLarge MethodNotAllowed MovedPermanently MovedTemporarily MultipleChoices NoNotification None NotAcceptable NotAcceptableAnywhere NotAcceptableHere NotFound NotImplemented Ok PaymentRequired PreconditionFailure ProvideReferrerIdentity ProxyAuthenticationRequired Queued RequestEntityTooLarge RequestPending RequestTerminated RequestTimeout RequestURITooLong Ringing SIPVersionNotSupported SecurityAgreementRequired ServerTimeout ServiceUnavailable SessionIntervalTooSmall SessionProgress TemporarilyUnavailable TooManyHops Trying Unauthorised Undecipherable UnknownResourcePriority UnsupportedCertificate UnsupportedMediaType UnsupportedURIScheme UseIdentityHeader UseProxy"
  },
  "api/SipLib.Core.SIPRoute.html": {
    "href": "api/SipLib.Core.SIPRoute.html",
    "title": "Class SIPRoute",
    "keywords": "Class SIPRoute The SIPRoute class is used to represent both Route and Record-Route headers. Inheritance object SIPRoute Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPRoute Remarks The Route and Record-Route headers only have parameters, no headers. Parameters of from ...;name=value;name2=value2. There are no specific parameters. Constructors | Edit this page View Source SIPRoute(SIPURI) Constructor Declaration public SIPRoute(SIPURI uri) Parameters Type Name Description SIPURI uri SIPURI to build the Route header from | Edit this page View Source SIPRoute(SIPURI, bool) Constructor Declaration public SIPRoute(SIPURI uri, bool looseRouter) Parameters Type Name Description SIPURI uri SIPURI to build the Route header from bool looseRouter Should always be true | Edit this page View Source SIPRoute(string) Constructor Declaration public SIPRoute(string host) Parameters Type Name Description string host Name of th host | Edit this page View Source SIPRoute(string, bool) Constructor Declaration public SIPRoute(string host, bool looseRouter) Parameters Type Name Description string host bool looseRouter Properties | Edit this page View Source Host Gets or set the host portion of the URI Declaration public string? Host { get; set; } Property Value Type Description string | Edit this page View Source IsStrictRouter Returns true if using strict routing or false if using loose routing. Declaration public bool IsStrictRouter { get; set; } Property Value Type Description bool | Edit this page View Source URI Gets the SIPURI from the Route header Declaration public SIPURI? URI { get; } Property Value Type Description SIPURI Methods | Edit this page View Source ParseSIPRoute(string) Parses a string into a SIPRoute header object. Declaration public static SIPRoute ParseSIPRoute(string route) Parameters Type Name Description string route Input string to parse Returns Type Description SIPRoute Returns a new SIPRoute object | Edit this page View Source ToSIPEndPoint() Gets the SIPEndPoint of this object Declaration public SIPEndPoint ToSIPEndPoint() Returns Type Description SIPEndPoint | Edit this page View Source ToString() Converts this object into a Route header string value Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/SipLib.Core.SIPRouteSet.html": {
    "href": "api/SipLib.Core.SIPRouteSet.html",
    "title": "Class SIPRouteSet",
    "keywords": "Class SIPRouteSet Class for managing a SIP Route set Inheritance object SIPRouteSet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPRouteSet Properties | Edit this page View Source BottomRoute Gets the bottom route Declaration public SIPRoute? BottomRoute { get; } Property Value Type Description SIPRoute | Edit this page View Source Length Gets or sets the number of routes in the set Declaration public int Length { get; } Property Value Type Description int | Edit this page View Source TopRoute Gets the top route Declaration public SIPRoute? TopRoute { get; } Property Value Type Description SIPRoute Methods | Edit this page View Source AddBottomRoute(SIPRoute) Adds a route to the end of the route set Declaration public void AddBottomRoute(SIPRoute route) Parameters Type Name Description SIPRoute route | Edit this page View Source GetAt(int) Gets the SIPRoute at a specified index Declaration public SIPRoute GetAt(int index) Parameters Type Name Description int index Index of the route set Returns Type Description SIPRoute | Edit this page View Source ParseSIPRouteSet(string) Parses a SIPRouteSet from a string Declaration public static SIPRouteSet ParseSIPRouteSet(string routeSet) Parameters Type Name Description string routeSet Input string. Route sets are separated by commas Returns Type Description SIPRouteSet | Edit this page View Source PopRoute() Removes the top route and returns it Declaration public SIPRoute? PopRoute() Returns Type Description SIPRoute Returns the top route or null if the route set is empty | Edit this page View Source PushRoute(SIPRoute) Adds a route to a the top of the route set Declaration public void PushRoute(SIPRoute route) Parameters Type Name Description SIPRoute route | Edit this page View Source PushRoute(IPEndPoint, SIPSchemesEnum, SIPProtocolsEnum) Pushes a new route onto the set given the IPEndpoint, scheme and protocol Declaration public void PushRoute(IPEndPoint socket, SIPSchemesEnum scheme, SIPProtocolsEnum protcol) Parameters Type Name Description IPEndPoint socket SIPSchemesEnum scheme SIPProtocolsEnum protcol | Edit this page View Source PushRoute(string) Pushes a route give the host of the route Declaration public void PushRoute(string host) Parameters Type Name Description string host | Edit this page View Source RemoveBottomRoute() Removes the bottom most route Declaration public void RemoveBottomRoute() | Edit this page View Source ReplaceRoute(string, string) If a route set is travelling from the public side of a proxy to the private side it can be required that the Record-Route set is modified. Declaration public void ReplaceRoute(string origSocket, string replacementSocket) Parameters Type Name Description string origSocket The socket string in the original route set that needs to be replace. string replacementSocket The socket string the original route is being replaced with. | Edit this page View Source Reversed() Reverses the order of the route set Declaration public SIPRouteSet? Reversed() Returns Type Description SIPRouteSet Returns a new SIPRouteSet | Edit this page View Source SetAt(int, SIPRoute) Sets the route at a specific index position Declaration public void SetAt(int index, SIPRoute sipRoute) Parameters Type Name Description int index Index SIPRoute sipRoute New route set | Edit this page View Source ToString() Converts the route set header to a string Declaration public string ToString() Returns Type Description string"
  },
  "api/SipLib.Core.SIPSchemesEnum.html": {
    "href": "api/SipLib.Core.SIPSchemesEnum.html",
    "title": "Enum SIPSchemesEnum",
    "keywords": "Enum SIPSchemesEnum Enumeration of the different URI schemes that the SIPURI and other classes must handle. Namespace: SipLib.Core Assembly: SipLib.dll Syntax public enum SIPSchemesEnum Fields Name Description cid Content ID URI http HTTP URI https HTTP over TLS URI im Instant message, for possible use with CPIM. See RFC 3862 msrp Message Session Relay Protocol (MSRP). See RFC 4975. msrps MSRP over TLS. sip Basic SIP URI sips SIP over TLS tel Tel URI urn URN type URI. For example: urn:service:sos for NG9-1-1 calls ws Web Sockets transport wss Web Sockets transport over TLS"
  },
  "api/SipLib.Core.SIPSchemesType.html": {
    "href": "api/SipLib.Core.SIPSchemesType.html",
    "title": "Class SIPSchemesType",
    "keywords": "Class SIPSchemesType Helper functions for dealing with SIP schemes Inheritance object SIPSchemesType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPSchemesType Methods | Edit this page View Source GetSchemeType(string) Maps a string version of the SIP scheme to the enum equivalent. Only call this function if IsAllowedScheme() returns true. Declaration public static SIPSchemesEnum GetSchemeType(string schemeType) Parameters Type Name Description string schemeType Input string Returns Type Description SIPSchemesEnum Returns the enum equivalent | Edit this page View Source IsAllowedScheme(string) Determines if a URI scheme is supported Declaration public static bool IsAllowedScheme(string schemeType) Parameters Type Name Description string schemeType String containing the URI scheme Returns Type Description bool Return true if the scheme is supported or false if it is not."
  },
  "api/SipLib.Core.SIPToHeader.html": {
    "href": "api/SipLib.Core.SIPToHeader.html",
    "title": "Class SIPToHeader",
    "keywords": "Class SIPToHeader Class for handling a SIP To header Inheritance object SIPToHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPToHeader Remarks The To header only has parameters, no headers. Parameters of from ...;name=value;name2=value2. Specific parameters: tag. Constructors | Edit this page View Source SIPToHeader(string?, SIPURI, string?) Constructor Declaration public SIPToHeader(string? toName, SIPURI toURI, string? toTag) Parameters Type Name Description string toName Name field for the To header. Optional SIPURI toURI SIPURI to build the To header from string toTag To header tag. Optional initially. Properties | Edit this page View Source ToName Gets or sets the name field of the To header Declaration public string? ToName { get; set; } Property Value Type Description string | Edit this page View Source ToParameters Gets or sets the To header parameters Declaration public SIPParameters ToParameters { get; set; } Property Value Type Description SIPParameters | Edit this page View Source ToTag Gets or sets the To header tag value Declaration public string? ToTag { get; set; } Property Value Type Description string | Edit this page View Source ToURI Gets or sets the URI of the To header Declaration public SIPURI? ToURI { get; set; } Property Value Type Description SIPURI | Edit this page View Source ToUserField Gets or sets the SIPUserField for the To header Declaration public SIPUserField? ToUserField { get; set; } Property Value Type Description SIPUserField Methods | Edit this page View Source ParseToHeader(string) Parses a string into a SIPToHeader object. Declaration public static SIPToHeader ParseToHeader(string toHeaderStr) Parameters Type Name Description string toHeaderStr Input string Returns Type Description SIPToHeader Returns a new SIPToHeader | Edit this page View Source ToString() Converts this SIPToHeader object into a header value string Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/SipLib.Core.SIPURI.html": {
    "href": "api/SipLib.Core.SIPURI.html",
    "title": "Class SIPURI",
    "keywords": "Class SIPURI Implements the SIP URI concept from the SIP RFC3261. This class also handles URIs for http, https, ws, wss, msrp, msrps and im schemes. Inheritance object SIPURI Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPURI Constructors | Edit this page View Source SIPURI(SIPSchemesEnum, SIPEndPoint) Constructs a new SIPURI from the scheme and a SIPEndPoint Unspecified parameters are set to their default values Declaration public SIPURI(SIPSchemesEnum scheme, SIPEndPoint sipEndPoint) Parameters Type Name Description SIPSchemesEnum scheme Scheme SIPEndPoint sipEndPoint SIPEndPoint to build the SIPURI from | Edit this page View Source SIPURI(SIPSchemesEnum, IPAddress, int) Constructs a new SIPURI from a scheme, an IPAddress and a port number Unspecified parameters are set to their default values Declaration public SIPURI(SIPSchemesEnum scheme, IPAddress address, int port) Parameters Type Name Description SIPSchemesEnum scheme Scheme IPAddress address IPAddress -- may be IPv4 or IPv6 int port Port number | Edit this page View Source SIPURI(string, string, string) Constructs a new SIPURI from the user, host and parameters and headers strings. Unspecified parameters are set to their default values Declaration public SIPURI(string user, string host, string paramsAndHeaders) Parameters Type Name Description string user User part of the URI. Optional string host Host portion of the URI. Required string paramsAndHeaders URI parameters and headers. Optional | Edit this page View Source SIPURI(string, string, string, SIPSchemesEnum) Constructs a new SIPURI from the user, host, parameters and headers and scheme. Unspecified parameters are set to their default values Declaration public SIPURI(string user, string host, string paramsAndHeaders, SIPSchemesEnum scheme) Parameters Type Name Description string user User part of the URI. Optional string host Host portion of the URI. Required string paramsAndHeaders URI parameters and headers. Optional SIPSchemesEnum scheme URI scheme. | Edit this page View Source SIPURI(string, string, string, SIPSchemesEnum, SIPProtocolsEnum) Constructor Declaration public SIPURI(string user, string host, string paramsAndHeaders, SIPSchemesEnum scheme, SIPProtocolsEnum protocol) Parameters Type Name Description string user User part of the URI. Optional string host Host portion of the URI. Required string paramsAndHeaders URI parameters and headers. Optional SIPSchemesEnum scheme URI scheme. SIPProtocolsEnum protocol Transport protocol Fields | Edit this page View Source Headers Embedded URI headers Declaration public SIPParameters Headers Field Value Type Description SIPParameters | Edit this page View Source Host Host portion of the URI. Declaration public string? Host Field Value Type Description string | Edit this page View Source Parameters URI parameters Declaration public SIPParameters Parameters Field Value Type Description SIPParameters | Edit this page View Source Scheme SIP scheme (sip, sips, etc.) Declaration public SIPSchemesEnum Scheme Field Value Type Description SIPSchemesEnum | Edit this page View Source User User portion of the URI Declaration public string? User Field Value Type Description string Properties | Edit this page View Source CanonicalAddress Gets a string that can be used to compare SIP URI addresses. Declaration public string CanonicalAddress { get; } Property Value Type Description string | Edit this page View Source HostAddress Gets the host address portion of the URI. If the address is an IPv6 address, then it will include the [ and ] delimiters. Declaration public string HostAddress { get; } Property Value Type Description string | Edit this page View Source HostPort Gets the port portion of the host address or null if it is not present Declaration public string? HostPort { get; } Property Value Type Description string | Edit this page View Source MAddr Gets the maddr parameter or null if it is not present Declaration public string? MAddr { get; } Property Value Type Description string | Edit this page View Source MAddrOrHostAddress Gets the maddr parameter or the host address if the maddr parameter is not present Declaration public string MAddrOrHostAddress { get; } Property Value Type Description string | Edit this page View Source Protocol The protocol for a SIP URI is dictated by the scheme of the URI and then by the transport parameter and finally by the use of a default protocol. If the URI is a sips one then the protocol must be TLS. After that if there is a transport parameter specified for the URI it dictates the protocol for the URI. Finally if there is no transport parameter for a sip URI then the default UDP transport is used. Declaration public SIPProtocolsEnum Protocol { get; set; } Property Value Type Description SIPProtocolsEnum | Edit this page View Source UnescapedUser Gets the un-escapted user part of the URI or null if there is no user part. Declaration public string? UnescapedUser { get; } Property Value Type Description string Methods | Edit this page View Source AreEqual(SIPURI, SIPURI) Returns true if two SIPURI objects represent the same resource Declaration public static bool AreEqual(SIPURI uri1, SIPURI uri2) Parameters Type Name Description SIPURI uri1 First SIPURI object SIPURI uri2 Second SIPURI object Returns Type Description bool Returns true if the two SIPURI objects are equal | Edit this page View Source CopyOf() Creates a deep copy if this SIPURI object Declaration public SIPURI CopyOf() Returns Type Description SIPURI | Edit this page View Source Equals(object?) Returns true if the input SIPURI represents the same resource as this one Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj SIPURI object to test Returns Type Description bool Returns true if the input SIPURI is equal to this one Overrides object.Equals(object) | Edit this page View Source GetHashCode() Override of GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() | Edit this page View Source IsDefaultPort() Indicates whether the SIP URI is using the default port for its protocol. Default ports are 5060 for UDP and TCP, 5061 for TLS, 80 for WS and 443 for WSS. Declaration public bool IsDefaultPort() Returns Type Description bool True if the default port is being used, false if not. | Edit this page View Source Mangle(SIPURI, IPEndPoint) Checks whether the specified SIP URI Host field contains a private IPv4 address and if so and the received on IP address is different then \"mangles\" the host to contain the received on IP end point. The purpose of the mangling is to assist in dealing with IPv4 NAT's. If the SIP URI host is IPv6 or a host name no mangling will be done. Declaration public static SIPURI? Mangle(SIPURI uri, IPEndPoint receivedOn) Parameters Type Name Description SIPURI uri The SIP URI to mangle. IPEndPoint receivedOn The IP end point that the SIP message was received from. Returns Type Description SIPURI A new SIP URI if mangling took place. Null if no mangling occurred. | Edit this page View Source ParseSIPURI(string) Parses a string into a SIPURI object. Declaration public static SIPURI ParseSIPURI(string uri) Parameters Type Name Description string uri Input string Returns Type Description SIPURI Returns a new SIPURI object Exceptions Type Condition SIPValidationException Thrown if the input string is not a valid SIPURI | Edit this page View Source ToAOR() Returns an address of record for the SIP URI which is a string in the format user@host. Declaration public string ToAOR() Returns Type Description string A string representing the address of record for the URI. | Edit this page View Source ToParameterlessString() Returns a string representation of the URI with any parameter and headers omitted except for the transport parameter. The string returned by this function is used amongst other things to match Route headers set by this SIP agent. Declaration public string ToParameterlessString() Returns Type Description string A string representation of the URI with headers and parameters omitted except for the transport parameter if it is required. | Edit this page View Source ToSIPEndPoint() Converts this SIPURI object into a SIPEndPoint object. Declaration public SIPEndPoint? ToSIPEndPoint() Returns Type Description SIPEndPoint Returns a SIPEndPoint object if the SIPURI represents an endpoint or null if it does not (for example: urn:service:sos) | Edit this page View Source ToString() Converts this SIPURI object into a string Declaration public override string ToString() Returns Type Description string Overrides object.ToString() | Edit this page View Source TryParse(string, out SIPURI?) Tests to see if a string can be parsed into a SIPURI object. Declaration public static bool TryParse(string uriStr, out SIPURI? uri) Parameters Type Name Description string uriStr Input string SIPURI uri Output SIPURI object. Set to a valid SIPURI object if successful Returns Type Description bool Returns true if successful or false if an error occurred. Operators | Edit this page View Source operator ==(SIPURI, SIPURI) Returns true if two SIPURI objects represent the same resource Declaration public static bool operator ==(SIPURI uri1, SIPURI uri2) Parameters Type Name Description SIPURI uri1 Right-hand SIPURI object SIPURI uri2 Left-hand SIPURI object Returns Type Description bool Returns true if they are equal or false if they are not | Edit this page View Source operator !=(SIPURI, SIPURI) Override of the != operator Declaration public static bool operator !=(SIPURI x, SIPURI y) Parameters Type Name Description SIPURI x Left-hand SIPURI object SIPURI y Right-hand SIPURI object Returns Type Description bool Returns true if the SIPURI objects are not equal or false if they are equal"
  },
  "api/SipLib.Core.SIPUserField.html": {
    "href": "api/SipLib.Core.SIPUserField.html",
    "title": "Class SIPUserField",
    "keywords": "Class SIPUserField Class for parsing and building the user field of a SIP URI. Inheritance object SIPUserField Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPUserField Constructors | Edit this page View Source SIPUserField() Default constructor Declaration public SIPUserField() | Edit this page View Source SIPUserField(string?, SIPURI, string?) Constructs a new SIPUserField from the user name, a SIPURI and the parameters and headers. Declaration public SIPUserField(string? name, SIPURI uri, string? paramsAndHeaders) Parameters Type Name Description string name The User name. Optional. SIPURI uri A valid SIPURI. string paramsAndHeaders A string containing the parameters and embedded headers. Optional. Fields | Edit this page View Source Name Name portion of the user field for a header Declaration public string? Name Field Value Type Description string | Edit this page View Source Parameters Header parameters Declaration public SIPParameters Parameters Field Value Type Description SIPParameters | Edit this page View Source URI SIPURI portion of the header user field Declaration public SIPURI? URI Field Value Type Description SIPURI Methods | Edit this page View Source CopyOf() Creates a deep copy of this object. Declaration public SIPUserField CopyOf() Returns Type Description SIPUserField | Edit this page View Source ParseSIPUserField(string) Parses a string into a SIPUriField. Throws exceptions if parsing errors are detected. Declaration public static SIPUserField ParseSIPUserField(string userFieldStr) Parameters Type Name Description string userFieldStr Input string to parse. Returns Type Description SIPUserField Returns a valid SIPUserField. | Edit this page View Source ToCpimFormatString() Formats the string for use in the header value of a CPIM message. The difference is that if the name portion is present, it is not quoted. Declaration public string ToCpimFormatString() Returns Type Description string Returns the string formatted for usin in a CPIM message. Exceptions Type Condition NullReferenceException | Edit this page View Source ToParameterlessString() Converts this object into a string containing a SIPURI that contains no parameters. Declaration public string ToParameterlessString() Returns Type Description string The SIPURI portion only with no parameters. | Edit this page View Source ToString() Converts this object into a string. Declaration public override string ToString() Returns Type Description string The string version of this object. Overrides object.ToString() | Edit this page View Source TryParseSIPUserField(string) Tests a string to determine if it contains a valid SIPUserField. Declaration public static SIPUserField? TryParseSIPUserField(string userFieldStr) Parameters Type Name Description string userFieldStr Input string Returns Type Description SIPUserField Returns a new SIPUserField object if successful or null if a parsing error occurred."
  },
  "api/SipLib.Core.SIPValidationException.html": {
    "href": "api/SipLib.Core.SIPValidationException.html",
    "title": "Class SIPValidationException",
    "keywords": "Class SIPValidationException Exception class for SIP validation errors Inheritance object Exception SIPValidationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPValidationException : Exception, ISerializable Constructors | Edit this page View Source SIPValidationException(SIPValidationFieldsEnum, SIPResponseStatusCodesEnum, string) Constructor Declaration public SIPValidationException(SIPValidationFieldsEnum sipErrorField, SIPResponseStatusCodesEnum responseErrorCode, string message) Parameters Type Name Description SIPValidationFieldsEnum sipErrorField SIPResponseStatusCodesEnum responseErrorCode string message | Edit this page View Source SIPValidationException(SIPValidationFieldsEnum, string) Constructor Declaration public SIPValidationException(SIPValidationFieldsEnum sipErrorField, string message) Parameters Type Name Description SIPValidationFieldsEnum sipErrorField string message Fields | Edit this page View Source SIPErrorField Specifies the field that is in error Declaration public SIPValidationFieldsEnum SIPErrorField Field Value Type Description SIPValidationFieldsEnum | Edit this page View Source SIPResponseErrorCode Specifies the status code Declaration public SIPResponseStatusCodesEnum SIPResponseErrorCode Field Value Type Description SIPResponseStatusCodesEnum Implements ISerializable"
  },
  "api/SipLib.Core.SIPValidationFieldsEnum.html": {
    "href": "api/SipLib.Core.SIPValidationFieldsEnum.html",
    "title": "Enum SIPValidationFieldsEnum",
    "keywords": "Enum SIPValidationFieldsEnum Enumeration of SIP validation fields Namespace: SipLib.Core Assembly: SipLib.dll Syntax public enum SIPValidationFieldsEnum Fields Name Description CSeq The validation error occurred in the SIP CSeq header CallID The validation error occurred in the SIP Call-ID header ContactHeader The validation error occurred in the SIP Contact header ContentLength The validation error occurred in the SIP Content-Length header ContentType The validation error occurred in the SIP Content-Type header Expires The validation error occurred in the SIP Expires header FromHeader The validation error occurred in the SIP From header Headers The validation error occurred in the SIP headers MaxForwards The validation error occurred in the SIP Max-Forwards header PAssertedIdentityHeader The validation error occurred in the SIP P-Asserted-Identity header PPreferredIdentityHeader The validation error occurred in the SIP P-Preferred-Identity header ReferToHeader The validation error occurred in the SIP Refer-To header Request The validation error occurred in a SIP request message Response The validation error occurred in a SIP response message RouteHeader The validation error occurred in the SIP Route header SipVersion The validation error occurred in the SIP version in the first line of a SIP message. ToHeader The validation error occurred in the SIP To header URI The validation error occurred in a URI field Unknown The validation error occurred in an unknown header, field or parameter ViaHeader The validation error occurred in the SIP Via header"
  },
  "api/SipLib.Core.SIPViaHeader.html": {
    "href": "api/SipLib.Core.SIPViaHeader.html",
    "title": "Class SIPViaHeader",
    "keywords": "Class SIPViaHeader The Via header only has parameters, no headers. Parameters of from ...;name= value;name2=value2 Specific parameters: ttl, maddr, received, branch. From page 179 of RFC3261: \"Even though this specification mandates that the branch parameter be present in all requests, the BNF for the header field indicates that it is optional.\" The branch parameter on a Via therefore appears to be optionally mandatory?! Any SIP application element that uses transactions depends on the branch parameter for transaction matching. Only the top Via header branch is used for transactions though so if the request has made it to this stack with missing branches then in theory it should be safe to proceed. It will be left up to the SIPTransaction class to reject any SIP requests that are missing the necessary branch. Inheritance object SIPViaHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPViaHeader Constructors | Edit this page View Source SIPViaHeader() Constructor Declaration public SIPViaHeader() | Edit this page View Source SIPViaHeader(SIPEndPoint, string) Constructs a SIPViaHeader object from the local SIPEndPoint and a branch parameter Declaration public SIPViaHeader(SIPEndPoint localEndPoint, string branch) Parameters Type Name Description SIPEndPoint localEndPoint Local SIPEndPoint string branch Branch parameter | Edit this page View Source SIPViaHeader(IPEndPoint, string, SIPProtocolsEnum) Constructs a new SIPViaHeader object from an IPEndPoint, a branch parameter and a protocol Declaration public SIPViaHeader(IPEndPoint contactEndPoint, string branch, SIPProtocolsEnum protocol) Parameters Type Name Description IPEndPoint contactEndPoint Contact IPEndPoint string branch Branch parameter SIPProtocolsEnum protocol Transport protocol | Edit this page View Source SIPViaHeader(string, int, string) Constructor Declaration public SIPViaHeader(string contactIPAddress, int contactPort, string branch) Parameters Type Name Description string contactIPAddress Contact IP address as a string int contactPort Contact port number string branch Via branch parameter | Edit this page View Source SIPViaHeader(string, int, string, SIPProtocolsEnum) Constructor Declaration public SIPViaHeader(string contactIPAddress, int contactPort, string branch, SIPProtocolsEnum protocol) Parameters Type Name Description string contactIPAddress Contract address for the Via header int contactPort Contact port number string branch Via header branch parameter SIPProtocolsEnum protocol Transport protocol Fields | Edit this page View Source Host Host portion of the URI Declaration public string? Host Field Value Type Description string | Edit this page View Source Port Port number Declaration public int Port Field Value Type Description int | Edit this page View Source Transport Transport protocol Declaration public SIPProtocolsEnum Transport Field Value Type Description SIPProtocolsEnum | Edit this page View Source Version Version parameter Declaration public string? Version Field Value Type Description string | Edit this page View Source ViaParameters Contains the Via header parameters Declaration public SIPParameters? ViaParameters Field Value Type Description SIPParameters Properties | Edit this page View Source Branch Gets or sets the branch parameter Declaration public string? Branch { get; set; } Property Value Type Description string | Edit this page View Source ContactAddress This the address placed into the Via header by the User Agent. Declaration public string ContactAddress { get; } Property Value Type Description string | Edit this page View Source ReceivedFromAddress This is the socket the request was received on and is a combination of the Host and Received fields. Declaration public string? ReceivedFromAddress { get; } Property Value Type Description string | Edit this page View Source ReceivedFromIPAddress IP Address contained in the recevied parameter. Declaration public string? ReceivedFromIPAddress { get; set; } Property Value Type Description string | Edit this page View Source ReceivedFromPort Port contained in the rport parameter. Declaration public int ReceivedFromPort { get; set; } Property Value Type Description int Methods | Edit this page View Source ParseSIPViaHeader(string) Parses a SIP Via header Declaration public static SIPViaHeader[] ParseSIPViaHeader(string viaHeaderStr) Parameters Type Name Description string viaHeaderStr Input string Returns Type Description SIPViaHeader[] Returns a new SIPViaHeader | Edit this page View Source ToString() Convers this SIPViaHeader object to a string Declaration public string ToString() Returns Type Description string"
  },
  "api/SipLib.Core.SIPViaSet.html": {
    "href": "api/SipLib.Core.SIPViaSet.html",
    "title": "Class SIPViaSet",
    "keywords": "Class SIPViaSet Class for managing a list of SIPViaHeader objects Inheritance object SIPViaSet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Core Assembly: SipLib.dll Syntax public class SIPViaSet Properties | Edit this page View Source BottomViaHeader Gets the SIPViaHeader at the bottom of the Via set Declaration public SIPViaHeader? BottomViaHeader { get; } Property Value Type Description SIPViaHeader | Edit this page View Source Length Gets the number of Via headers in the Via set Declaration public int Length { get; } Property Value Type Description int | Edit this page View Source TopViaHeader Gets the top-most SIPViaHeader Declaration public SIPViaHeader? TopViaHeader { get; } Property Value Type Description SIPViaHeader | Edit this page View Source Via Gets or sets the list of Via headers Declaration public List<SIPViaHeader> Via { get; set; } Property Value Type Description List<SIPViaHeader> Methods | Edit this page View Source AddBottomViaHeader(SIPViaHeader) Adds a SIPViaHeader to the bottom of the Via set Declaration public void AddBottomViaHeader(SIPViaHeader viaHeader) Parameters Type Name Description SIPViaHeader viaHeader | Edit this page View Source PopTopViaHeader() Pops top Via header off the array. Declaration public SIPViaHeader PopTopViaHeader() Returns Type Description SIPViaHeader The top Via header | Edit this page View Source PushViaHeader(SIPViaHeader) Pushes a new Via header onto the top of the array. Declaration public void PushViaHeader(SIPViaHeader viaHeader) Parameters Type Name Description SIPViaHeader viaHeader The Via header to push onto the top of the Via set. | Edit this page View Source ToString() Converts this SIPViaSet object to a string Declaration public string ToString() Returns Type Description string | Edit this page View Source UpateTopViaHeader(IPEndPoint) Updates the topmost Via header by setting the received and rport parameters to the IP address and port the request came from. Declaration public void UpateTopViaHeader(IPEndPoint msgRcvdEndPoint) Parameters Type Name Description IPEndPoint msgRcvdEndPoint The remote endpoint the request was received from. Remarks The setting of the received parameter is documented in RFC3261 section 18.2.1 and in RFC3581 section 4. RFC3581 states that the received parameter value must be set even if it's the same as the address in the sent from field. The setting of the rport parameter is documented in RFC3581 section 4. An attempt was made to comply with the RFC3581 standard and only set the rport parameter if it was included by the client user agent however in the wild there are too many user agents that are behind symmetric NATs not setting an empty rport and if it's not added then they will not be able to communicate."
  },
  "api/SipLib.Core.SipUtils.html": {
    "href": "api/SipLib.Core.SipUtils.html",
    "title": "Class SipUtils",
    "keywords": "Class SipUtils Static class containing various SIP related utility functions. Inheritance object SipUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public static class SipUtils Methods | Edit this page View Source AddEmergencyIdUrnCallInfoHeader(SIPRequest, string, string) Adds a Call-Info header to a SIP request containing a purpose parameter of emergency-IncidentId or emergency-CallId. See Sectionss 2.1.6 and 2.1.7 of NENA-STA-010.3. Declaration public static void AddEmergencyIdUrnCallInfoHeader(SIPRequest Req, string strIdUrn, string PurposeParam) Parameters Type Name Description SIPRequest Req SIPRequest to add the Call-Info header to. string strIdUrn String containing the Emergency ID URN built using the BuildEmergencyIdUrn() function. Must be a valid URN. string PurposeParam Purpose parameter to add to the Call-Info header. Must be either \"emergency-CallId\" or \"emergency-IncidentId\". | Edit this page View Source BuildAckRequest(SIPResponse, SIPChannel) Builds an ACK SIP Request message to send in response to a SIP response message. This method can be used to build an ACK request to send in response to a 200 OK response or a 4XX response message that requires an ACK request. Declaration public static SIPRequest BuildAckRequest(SIPResponse Res, SIPChannel SipChan) Parameters Type Name Description SIPResponse Res SIP response message to build the ACK request for. SIPChannel SipChan SIPChannel on which the SIP response was received. Returns Type Description SIPRequest Returns an ACK SIPRequest object. | Edit this page View Source BuildByeRequest(SIPRequest, SIPChannel, IPEndPoint, bool, int, SIPResponse) Builds a BYE SIPRequest for in incoming or an outgoing call. Declaration public static SIPRequest BuildByeRequest(SIPRequest InvReq, SIPChannel SipChan, IPEndPoint RemIpe, bool IncomingCall, int LastCSeqNumber, SIPResponse InviteOkResponse) Parameters Type Name Description SIPRequest InvReq Original INVITE message for the call. SIPChannel SipChan SIPChannel used to communicate with the remote endpoint. IPEndPoint RemIpe IPEndPoint to send the request to. bool IncomingCall If true then the call was an incoming call, i.e. the INVITE request was received. Else, the call was an outgoing call, i.e. the INVITE request was sent. int LastCSeqNumber Last CSeq number for the call dialog. SIPResponse InviteOkResponse OK message that was received in response to the INVITE request. This parameter is required if the call was an outgoing one and is currently on-line. Returns Type Description SIPRequest Returns a SIPRequest object containing the BYE or the CANCEL request. | Edit this page View Source BuildCancelRequest(SIPRequest, SIPChannel, IPEndPoint, int) Builds a BYE or a CANCEL for in incoming or an outgoing call. Declaration public static SIPRequest BuildCancelRequest(SIPRequest InvReq, SIPChannel SipChan, IPEndPoint RemIpe, int LastCSeqNumber) Parameters Type Name Description SIPRequest InvReq Original INVITE message for the call. SIPChannel SipChan SIPChannel used to communicate with the remote endpoint. IPEndPoint RemIpe IPEndPoint to send the request to. int LastCSeqNumber Last CSeq number for the call dialog. Returns Type Description SIPRequest Returns a SIPRequest object containing the BYE or the CANCEL request. | Edit this page View Source BuildEmergencyIdUrn(string, string) Builds a emergency URN identifier string used for a Call Identifier or a Incident Identifier. See Sectionss 2.1.6 and 2.1.7 of NENA-STA-010.3. Declaration public static string BuildEmergencyIdUrn(string IdType, string strElemId) Parameters Type Name Description string IdType Must be either \"callid\" or \"incidentid\" string strElemId Element Identifier of the element that is inserting the Call-Info header. For example: \"bcf.state.pa.us\". Returns Type Description string Returns a formatted Emergency Incident or Call ID URN. | Edit this page View Source BuildFingerprintAttr(X509Certificate2) Builds a fingerprint SDP attribute for a X.509 certificate. See RFC 4572. Declaration public static SdpAttribute BuildFingerprintAttr(X509Certificate2 Cert) Parameters Type Name Description X509Certificate2 Cert The X.509 certificate to build the attribute for. Returns Type Description SdpAttribute Returns the SdpAttribute object that can be added to the SDP. | Edit this page View Source BuildInDialogRequest(SIPMethodsEnum, SIPChannel, bool, SIPRequest, string, string, SIPResponse, ref int) Builds an in-dialog SIP request. Declaration public static SIPRequest BuildInDialogRequest(SIPMethodsEnum Method, SIPChannel SipChan, bool IncomingCall, SIPRequest InvReq, string LocalTag, string RemoteTag, SIPResponse InviteOkResponse, ref int LastCSeqNumber) Parameters Type Name Description SIPMethodsEnum Method Request method for the new in-dialog request SIPChannel SipChan SIPChannel that the call is on bool IncomingCall True if the original call was incoming or false if it was an outgoing call SIPRequest InvReq The original INVITE request string LocalTag The local tag for the SIP dialog string RemoteTag The remote tag for the SIP dialog SIPResponse InviteOkResponse The original OK response to the INVITE request int LastCSeqNumber The last CSeq number. This value is updated by this function. Returns Type Description SIPRequest Returns a new SIPRequest object. | Edit this page View Source BuildOkToByeOrCancel(SIPRequest, SIPEndPoint) Builds an OK response to a BYE or a CANCEL request. Declaration public static SIPResponse BuildOkToByeOrCancel(SIPRequest Req, SIPEndPoint RemIp) Parameters Type Name Description SIPRequest Req Request message to send the OK response to. SIPEndPoint RemIp Verified end point of the request originator. Returns Type Description SIPResponse Returns a 200 OK SIPResponse object. | Edit this page View Source BuildOkToInvite(SIPRequest, SIPChannel, string, string) Builds a 200 OK SIPResponse message for an INVITE request. Declaration public static SIPResponse BuildOkToInvite(SIPRequest InvReq, SIPChannel SipChan, string strBody, string strContentType) Parameters Type Name Description SIPRequest InvReq INVITE request message to build the response for. SIPChannel SipChan SIPChannel on which the INVITE message was received on and the 200 OK response will be sent on. string strBody Body of the 200 OK. string strContentType Value of the Content-Type header that describes the format of the message body. For example: \"application/sdp\" or \"multipart/mixed; boundary=boundary1\" Returns Type Description SIPResponse Returns a SIPResponse object containing the 200 OK response message. | Edit this page View Source BuildResponse(SIPRequest, SIPResponseStatusCodesEnum, string, SIPChannel, string?) Builds a SIP response message. A simple response is something like 100 Trying, 180 Ringing, or 404 Not Found that does not have a message body. Declaration public static SIPResponse BuildResponse(SIPRequest Sr, SIPResponseStatusCodesEnum StatCode, string ReasonPhrase, SIPChannel sipChannel, string? SipUserName) Parameters Type Name Description SIPRequest Sr The SIP request to respond to. SIPResponseStatusCodesEnum StatCode Status code to use for the response. string ReasonPhrase The response reason text. Required. Must not be empty or null. SIPChannel sipChannel Contains transport information. Must be the SIPChannel on which the request message was received. string SipUserName SIP user name to use for the User part of the SIPURI. Optional, may be null. Returns Type Description SIPResponse Returns a SIPResponse that can be sent. | Edit this page View Source GetCallInfoHeaderForPurpose(SIPHeader, string) Gets the SIPCallInfoHeader for the Call-Info header that has a specified purpose parameter. Declaration public static SIPCallInfoHeader? GetCallInfoHeaderForPurpose(SIPHeader Sh, string strPurpose) Parameters Type Name Description SIPHeader Sh SIPHeader object containing the SIP headers for the request or response to search in. string strPurpose Purpose parameter to search for. Returns Type Description SIPCallInfoHeader Returns a SIPCallInfoHeader object if the specified Call-Info header was found or null if it was not. | Edit this page View Source GetCallInfoValueForPurpose(SIPHeader, string) Returns the header value of a Call-Info header that has a specified \"purpose=\" header parameter. Declaration public static string? GetCallInfoValueForPurpose(SIPHeader Sh, string strPurpose) Parameters Type Name Description SIPHeader Sh SIPHeader object containing the SIP headers for the request or response to search in. string strPurpose Purpose parameter to search for. Returns Type Description string Returns the header value of the matching Call-Info header. Returns null if there is no Call-Info header with the specified purpose parameter. | Edit this page View Source GetPaiOrFromUri(SIPHeader) Gets the SIP URI from the P-Asserted-Identity header if present or from the From header if the the PAI header is not present. Declaration public static SIPURI GetPaiOrFromUri(SIPHeader Sh) Parameters Type Name Description SIPHeader Sh Input request headers Returns Type Description SIPURI Returns a copy of the SIPURI | Edit this page View Source GetRemoteSipUri(SIPHeader) Gets the URI of the remote party for an incoming call. Declaration public static SIPURI? GetRemoteSipUri(SIPHeader Hdr) Parameters Type Name Description SIPHeader Hdr The headers from the INVITE request of the incoming call. Returns Type Description SIPURI Returns the URI to send a request to for the call, such as a BYE or CANCEL request. Remarks This method returns the URI specified in the top Record-Route header if it has a \"lr\" parameter or the URI in Contact header. If there is no Contact header then this method returns the URI from the From header. | Edit this page View Source GetRemoteUri(SIPRequest) Gets the URI of the remote party for an incoming call. Only call this method for incoming calls. Declaration public static SIPURI? GetRemoteUri(SIPRequest InvReq) Parameters Type Name Description SIPRequest InvReq INVITE request of the incoming call. Returns Type Description SIPURI Returns the URI to send a request to for the call, such as a BYE or CANCEL request. Remarks This method returns the URI specified in the top Record-Route header if it has a \"lr\" parameter or the URI in Contact header. If there is no Contact header then this method returns the URI from the From header. | Edit this page View Source GetResponseReason(SIPResponseStatusCodesEnum) Returns a reason text statement given a SIPResponseStatusCodesEnum value Declaration public static string GetResponseReason(SIPResponseStatusCodesEnum Code) Parameters Type Name Description SIPResponseStatusCodesEnum Code Code to return a statement for. Returns Type Description string Returns a text string. Return \"Unknown\" if the input code not found. | Edit this page View Source GetSipFragResponseCode(string) Parses a SipFrag, checks for errors and returns the status code from the the SIP message fragment. Declaration public static int GetSipFragResponseCode(string SipFrag) Parameters Type Name Description string SipFrag String containing the sipfrag, for example: \"SIP/2.0 200 OK\" Returns Type Description int Returns the status code. Returns 0 if the sipfrag is not valid. | Edit this page View Source GetTopContactSipUri(SIPHeader) Gets the SIPURI of the top-most Contact header from a SIP request or a SIP response. Declaration public static SIPURI? GetTopContactSipUri(SIPHeader Hdr) Parameters Type Name Description SIPHeader Hdr SIPHeader containing the Contact header list. Returns Type Description SIPURI Returns the SIPURI of the top-most Contact header if there is one or null if there are no Contact header. | Edit this page View Source IsInDialog(SIPRequest) Determines of a request is in dialog or not. Declaration public static bool IsInDialog(SIPRequest Req) Parameters Type Name Description SIPRequest Req Input SIP INVITE request Returns Type Description bool Returns true if the request is in-dialog or false if it is not. | Edit this page View Source VerifyUdpEndPoint(SIPRequest, SIPEndPoint, SIPChannel) Checks for the case where a message is received on the UDP transport protocol and the top most Via header does not have an rport parameter but does have a port number that is different than the source port that the message was received on. Declaration public static SIPEndPoint VerifyUdpEndPoint(SIPRequest SipMsg, SIPEndPoint RemIp, SIPChannel SipChannel) Parameters Type Name Description SIPRequest SipMsg Received message. SIPEndPoint RemIp SIPEndPoint that the message was received from./// SIPChannel SipChannel SIPChannel that received the request message. Returns Type Description SIPEndPoint Returns the original end point if the transport protocol is not UDP or if it is UDP but the top most Via contains an rport parameter. Else returns a new endpoint constructed from the Sent By part of the Via header provided it has a port number specified. If not port number is specified, then the original end point is returned."
  },
  "api/SipLib.Core.TypeExtensions.html": {
    "href": "api/SipLib.Core.TypeExtensions.html",
    "title": "Class TypeExtensions",
    "keywords": "Class TypeExtensions Type extensions used in this class library Inheritance object TypeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Core Assembly: SipLib.dll Syntax public static class TypeExtensions Fields | Edit this page View Source WhiteSpaceChars The Trim method only trims 0x0009, 0x000a, 0x000b, 0x000c, 0x000d, 0x0085, 0x2028, and 0x2029. This array adds in control characters. Declaration public static readonly char[] WhiteSpaceChars Field Value Type Description char[] Methods | Edit this page View Source HexStr(byte[], int, char?) Converts a byte array to a hexadecimal formatted string Declaration public static string HexStr(this byte[] buffer, int length, char? separator = null) Parameters Type Name Description byte[] buffer Input byte array to convert int length Number of bytes to process in the input array char? separator Separator character. May be null. Returns Type Description string Returns the formatted hexadecimal string | Edit this page View Source HexStr(byte[], char?) Converts a byte array to a hexadecimal formatted string Declaration public static string HexStr(this byte[] buffer, char? separator = null) Parameters Type Name Description byte[] buffer Input byte array to convert char? separator Separator character. May be null. Returns Type Description string Returns the formatted hexadecimal string | Edit this page View Source IsNullOrBlank(string) Gets a value that indicates whether or not the collection is empty. Declaration public static bool IsNullOrBlank(this string s) Parameters Type Name Description string s Returns Type Description bool | Edit this page View Source IsPrivate(IPAddress) Returns true if the IPAddress is a private address Declaration public static bool IsPrivate(this IPAddress address) Parameters Type Name Description IPAddress address Returns Type Description bool | Edit this page View Source NotNullOrBlank(string) Returns true if the string is not null or blank Declaration public static bool NotNullOrBlank(this string s) Parameters Type Name Description string s Input string Returns Type Description bool | Edit this page View Source ParseHexStr(string) Parses an unformatted (no separators) hexadecimal string into a byte array Declaration public static byte[] ParseHexStr(string hexStr) Parameters Type Name Description string hexStr Input hexadecimal string Returns Type Description byte[] Returns a byte array | Edit this page View Source Slice(string, char, char) Returns a slice from a string that is delimited by the first instance of a start and end character. The delimiting characters are not included. \"sip:127.0.0.1:5060;connid=1234\".slice(':', ';') => \"127.0.0.1:5060\" Declaration public static string? Slice(this string s, char startDelimiter, char endDelimeter) Parameters Type Name Description string s The input string to extract the slice from. char startDelimiter The character to start the slice from. The first instance of the character found is used. char endDelimeter The character to end the slice on. The first instance of the character found is used. Returns Type Description string A slice of the input string or null if the slice is not possible."
  },
  "api/SipLib.Core.html": {
    "href": "api/SipLib.Core.html",
    "title": "Namespace SipLib.Core",
    "keywords": "Namespace SipLib.Core Core classes for building and parsing SIP messages. The main classes in the SipLib.Core namespace are: SIPMessage SIPRequest SIPResponse SIPHeader Classes for each type of SIP header (SIPFrom, SIPTo, etc.) The SIPMessage class is the base class for the SIPRequest (representing a SIP request message) and the SIPResponse (representing a SIP response message) classes. The SIPMessage class contains SIP headers and optionally a SIP message body. The Header field of a SIPMessage is a SIPHeader object that contains fields for the SIP headers. Each type of SIP header is represented by a unique class. For example, the SIPFromHeader class is used to manage a SIP From header. The SIPMessage class contains methods and properties for accessing the contents of the body of a SIP message if one is present. When building applications that receive and process SIP message, it is generally not necessary to programmatically parse raw messages received via the network because message parsing is handled by classes contained in the SipLib.Channels and SipLib.Transactions namespaces. The SipUtils class in the SipLib.Core namespace is a static class that provides various helper methods for building SIP messages and for extracting various information from SIP messages. Classes ByteBufferInfo Class for parsing a buffer of bytes CallProperties Class that provides various static utility functions relating to call properties Crypto Class containing various cryptography utilities HTTPDigest Class for processing an HTTP digest IPSocket Class containing various utility functions for sockets. SIPAuthenticationHeader Class for the SIP WWW-Authenticate and Authorization headers SIPAuthorisationDigest Class for the SIP authorization digest SIPCallInfoHeader Class for a SIP Call-Info header. See Sections 20.9 and 25.1 of RFC 3261. SIPConstants Defines various constants used for SIP SIPContactHeader Class for building or parsing a SIP Contact header. See Section 20.10 and page 228 of RFC 3261. SIPEndPoint This class is a more specific version of the SIPURI class BUT is only concerned with the network and transport properties. It contains all the information needed to determine the remote end point to deliver a SIP request or response to. This class must remain immutable otherwise the SIP stack can develop problems. SIP end points can get passed amongst different servers for logging and forwarding SIP messages and a modification of the end point by one server can result in a problem for a different server. Instead a new SIP end point should be created wherever a modification is required. SIPEscape Static class that contains various methods for escaping and unescaping reserved characters in various parts of SIPURIs, SIP headers, SIP parameters, etc. SIPFromHeader The From header only has parameters, no headers. Parameters of from ...;name=value;name2=value2. Specific parameters: tag. SIPGeolocationHeader Class for a SIP Geolocation header as defined in RFC 6442. SIPHeader Class for handling the SIP headers portion of a SIP request or a SIP response message. SIPHeaders Definitions for SIP Header fields. SIPMessage Represents an entire SIP message. This is the base class for the SIPRequest and the SIPResponse classes. SIPMethods Class for mapping SIP method string to SIPMethodsEnum values SIPPaiHeader Class for the SIP P-Asserted-Identity header. SIPParameters Represents a series of name value pairs that are optionally included in SIP URIs and also as an additional optional setting on some SIP Headers (Contact, To, From, Via). This class also treats the header value of a SIP URI as a special case of a SIP parameter. The difference between a parameter and a SIP URI header is the start and delimiter characters used. SIPPpiHeader Class for the SIP P-Preferred-Identity header. SIPProtocolsType Helper functions for dealing with tranport protocols SIPReplacesParameter Class for the Replaces parameter of a Refer-To header field. The Replaces parameter is used to identify involved in a transfer operation. SIPRequest Class for a SIP request message. SIPResponse Class for a SIP Response message SIPResponseStatusCodes SIP response status codes functions SIPRoute The SIPRoute class is used to represent both Route and Record-Route headers. SIPRouteSet Class for managing a SIP Route set SIPSchemesType Helper functions for dealing with SIP schemes SIPToHeader Class for handling a SIP To header SIPURI Implements the SIP URI concept from the SIP RFC3261. This class also handles URIs for http, https, ws, wss, msrp, msrps and im schemes. SIPUserField Class for parsing and building the user field of a SIP URI. SIPValidationException Exception class for SIP validation errors SIPViaHeader The Via header only has parameters, no headers. Parameters of from ...;name= value;name2=value2 Specific parameters: ttl, maddr, received, branch. From page 179 of RFC3261: \"Even though this specification mandates that the branch parameter be present in all requests, the BNF for the header field indicates that it is optional.\" The branch parameter on a Via therefore appears to be optionally mandatory?! Any SIP application element that uses transactions depends on the branch parameter for transaction matching. Only the top Via header branch is used for transactions though so if the request has made it to this stack with missing branches then in theory it should be safe to proceed. It will be left up to the SIPTransaction class to reject any SIP requests that are missing the necessary branch. SIPViaSet Class for managing a list of SIPViaHeader objects SipUtils Static class containing various SIP related utility functions. TypeExtensions Type extensions used in this class library Enums SIPAuthorisationHeadersEnum Enumeration of SIP authorization/authentication header types SIPMessageTypesEnum Message types for SIP SIPMethodsEnum Enumeration of all of the methods for a SIP request. SIPProtocolsEnum Enumeration that defines the transport protocols used for SIP SIPResponseStatusCodesEnum Enumeration of SIP response status codes SIPSchemesEnum Enumeration of the different URI schemes that the SIPURI and other classes must handle. SIPValidationFieldsEnum Enumeration of SIP validation fields"
  },
  "api/SipLib.Dtls.AlertLevelsEnum.html": {
    "href": "api/SipLib.Dtls.AlertLevelsEnum.html",
    "title": "Enum AlertLevelsEnum",
    "keywords": "Enum AlertLevelsEnum Enumeration of the protocol alert levels Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public enum AlertLevelsEnum : byte Fields Name Description Fatal Fatal alert level, the handshake failed Warning Only a warning"
  },
  "api/SipLib.Dtls.AlertTypesEnum.html": {
    "href": "api/SipLib.Dtls.AlertTypesEnum.html",
    "title": "Enum AlertTypesEnum",
    "keywords": "Enum AlertTypesEnum Enumeration of the protocol Alert types Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public enum AlertTypesEnum : byte Fields Name Description access_denied bad_certificate bad_certificate_hash_value bad_certificate_status_response bad_record_mac certificate_expired certificate_revoked certificate_unknown certificate_unobtainable close_notify decode_error decompression_failure decrypt_error decryption_failed export_restriction handshake_failure illegal_parameter inappropriate_fallback insufficient_security internal_error no_certificate no_renegotiation protocol_version record_overflow unexpected_message unknown unknown_ca unknown_psk_identity unrecognized_name unsupported_certificate unsupported_extension user_canceled"
  },
  "api/SipLib.Dtls.DtlsClientUdpTransport.html": {
    "href": "api/SipLib.Dtls.DtlsClientUdpTransport.html",
    "title": "Class DtlsClientUdpTransport",
    "keywords": "Class DtlsClientUdpTransport Class for performing the client side of the DTLS handshake for DTLS-SRTP. This class uses a .NET UdpClient to communicate with the DTLS-SRTP server. This class should be used to perform the DTLS-SRTP handshake only. At the end of the DTLS-SRTP handshake both the client and the server will have exchanged the SRTP keying material. Call the Close() method when the handshake is completed. The Close() method closes the UdpClient object so it is necessary to create a new UdpClient object to communicate with the server for transporting SRTP media packets. After calling the constructor, call the DoHandshake() method of the DtlsSrtpTransport object to start the DTLS-SRTP handshake process. Inheritance object DtlsClientUdpTransport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class DtlsClientUdpTransport Constructors | Edit this page View Source DtlsClientUdpTransport(UdpClient, IPEndPoint, DtlsSrtpTransport) Constructor. Starts a thread that listens for DTLS-SRTP handshake data packets from the server. Declaration public DtlsClientUdpTransport(UdpClient udpClient, IPEndPoint remIpEndPoint, DtlsSrtpTransport dtlsClientTransport) Parameters Type Name Description UdpClient udpClient UdpClient object to use for sending data to and receiving data from the DTLS-SRTP server. IPEndPoint remIpEndPoint Remote endpoint of the DTLS-SRTP server DtlsSrtpTransport dtlsClientTransport Transport to use for managing the DTLS-SRTP client handshake Methods | Edit this page View Source Close() Closes the UdpClient which forces the receive thread to terminate. Declaration public void Close()"
  },
  "api/SipLib.Dtls.DtlsServerUdpTransport.html": {
    "href": "api/SipLib.Dtls.DtlsServerUdpTransport.html",
    "title": "Class DtlsServerUdpTransport",
    "keywords": "Class DtlsServerUdpTransport Class for performing the server side of the DTLS handshake for DTLS-SRTP. This class uses a .NET UdpClient to communicate with the DTLS-SRTP client. This class should be used to perform the DTLS-SRTP handshake only. At the end of the DTLS-SRTP handshake both the client and the server will have exchanged the SRTP keying material. Call the Close() method when the handshake is completed. The Close() method closes the UdpClient object so it is necessary to create a new UdpClient object to communicate with the client for transporting SRTP media packets. After calling the constructor, call the DoHandshake() method of the DtlsSrtpTransport object to start the DTLS-SRTP handshake process. Inheritance object DtlsServerUdpTransport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class DtlsServerUdpTransport Constructors | Edit this page View Source DtlsServerUdpTransport(UdpClient, IPEndPoint, DtlsSrtpTransport) Constructor Declaration public DtlsServerUdpTransport(UdpClient udpClient, IPEndPoint remIpEndPoint, DtlsSrtpTransport dtlsSrtpServerTransport) Parameters Type Name Description UdpClient udpClient UdpClient object to use for sending data to and receiving data from the DTLS-SRTP client IPEndPoint remIpEndPoint Remote endpoint of the DTLS-SRTP client DtlsSrtpTransport dtlsSrtpServerTransport Transport to use for managing the DTLS-SRTP server handshake Methods | Edit this page View Source Close() Closes the UdpClient which forces the receive thread to terminate. Declaration public void Close()"
  },
  "api/SipLib.Dtls.DtlsSrtpClient.html": {
    "href": "api/SipLib.Dtls.DtlsSrtpClient.html",
    "title": "Class DtlsSrtpClient",
    "keywords": "Class DtlsSrtpClient Class for a DTLS-SRTP handshake client. Inheritance object AbstractTlsPeer AbstractTlsClient DefaultTlsClient DtlsSrtpClient Implements TlsClient TlsPeer IDtlsSrtpPeer Inherited Members DefaultTlsClient.mDHVerifier DefaultTlsClient.GetCipherSuites() DefaultTlsClient.GetKeyExchange() DefaultTlsClient.CreateDHKeyExchange(int) DefaultTlsClient.CreateDheKeyExchange(int) DefaultTlsClient.CreateECDHKeyExchange(int) DefaultTlsClient.CreateECDheKeyExchange(int) DefaultTlsClient.CreateRsaKeyExchange() AbstractTlsClient.mCipherFactory AbstractTlsClient.mContext AbstractTlsClient.mSupportedSignatureAlgorithms AbstractTlsClient.mNamedCurves AbstractTlsClient.mClientECPointFormats AbstractTlsClient.mServerECPointFormats AbstractTlsClient.mSelectedCipherSuite AbstractTlsClient.mSelectedCompressionMethod AbstractTlsClient.AllowUnexpectedServerExtension(int, byte[]) AbstractTlsClient.CheckForUnexpectedServerExtension(IDictionary, int) AbstractTlsClient.Init(TlsClientContext) AbstractTlsClient.GetCompressionMethods() AbstractTlsClient.NotifySessionID(byte[]) AbstractTlsClient.NotifySelectedCipherSuite(int) AbstractTlsClient.NotifySelectedCompressionMethod(byte) AbstractTlsClient.ProcessServerSupplementalData(IList) AbstractTlsClient.GetClientSupplementalData() AbstractTlsClient.GetCompression() AbstractTlsClient.GetCipher() AbstractTlsClient.NotifyNewSessionTicket(NewSessionTicket) AbstractTlsClient.ClientHelloRecordLayerVersion AbstractTlsClient.IsFallback AbstractTlsPeer.Cancel() AbstractTlsPeer.NotifyCloseHandle(TlsCloseable) AbstractTlsPeer.GetHandshakeTimeoutMillis() AbstractTlsPeer.ShouldUseGmtUnixTime() AbstractTlsPeer.NotifySecureRenegotiation(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class DtlsSrtpClient : DefaultTlsClient, TlsClient, TlsPeer, IDtlsSrtpPeer Constructors | Edit this page View Source DtlsSrtpClient() Constructor. Creates a self-signed certificate. Declaration public DtlsSrtpClient() | Edit this page View Source DtlsSrtpClient(Certificate, AsymmetricKeyParameter) Constructor Declaration public DtlsSrtpClient(Certificate certificateChain, AsymmetricKeyParameter privateKey) Parameters Type Name Description Certificate certificateChain AsymmetricKeyParameter privateKey | Edit this page View Source DtlsSrtpClient(Certificate, AsymmetricKeyParameter, UseSrtpData) Constructor Declaration public DtlsSrtpClient(Certificate certificateChain, AsymmetricKeyParameter privateKey, UseSrtpData clientSrtpData) Parameters Type Name Description Certificate certificateChain Contains at least one X.509 certificate. If null, then a self-signed certificate will be automatically created. AsymmetricKeyParameter privateKey Private key for the certificate UseSrtpData clientSrtpData BouncyCastle UseSrtpData object to use. May be null. If null the a UseSrtpData object will be created. The UseSrtpData class contains the SRTP protection profiles and the Master Key Index that will be negotiated during the DTLS handshake process. | Edit this page View Source DtlsSrtpClient(UseSrtpData) Constructor Declaration public DtlsSrtpClient(UseSrtpData clientSrtpData) Parameters Type Name Description UseSrtpData clientSrtpData | Edit this page View Source DtlsSrtpClient(X509Certificate2) Constructor. Creates a self-signed certificate from a .NET X509Certificate2 Declaration public DtlsSrtpClient(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate Input certificate | Edit this page View Source DtlsSrtpClient(string, string) Constructor. Declaration public DtlsSrtpClient(string certificatePath, string keyPath) Parameters Type Name Description string certificatePath File path to the certificate file string keyPath File path to the private key file | Edit this page View Source DtlsSrtpClient(string[], string) Constructor Declaration public DtlsSrtpClient(string[] certificatesPath, string keyPath) Parameters Type Name Description string[] certificatesPath string keyPath Fields | Edit this page View Source mSession Contains the Org.BouncyCastle.Crypto.Tls.TlsSession Declaration protected TlsSession? mSession Field Value Type Description TlsSession Properties | Edit this page View Source ClientVersion Gets the protcol version for this client Declaration public override ProtocolVersion ClientVersion { get; } Property Value Type Description ProtocolVersion Overrides Org.BouncyCastle.Crypto.Tls.AbstractTlsClient.ClientVersion | Edit this page View Source Fingerprint Gets the fingerprint of the X.509 certificate used by this client Declaration public RTCDtlsFingerprint? Fingerprint { get; } Property Value Type Description RTCDtlsFingerprint | Edit this page View Source ForceUseExtendedMasterSecret Gets or sets a flag to indicate whether or not to force the use of the extended MasterSecret. Defaults to true. Declaration public bool ForceUseExtendedMasterSecret { get; set; } Property Value Type Description bool | Edit this page View Source MinimumVersion Gets the minimum version support by this client Declaration public override ProtocolVersion MinimumVersion { get; } Property Value Type Description ProtocolVersion Overrides Org.BouncyCastle.Crypto.Tls.AbstractTlsClient.MinimumVersion | Edit this page View Source ServerCertificate Gets the Certificate received from the server. Declaration public Certificate ServerCertificate { get; } Property Value Type Description Certificate Methods | Edit this page View Source GetAuthentication() Gets the authentication information Declaration public override TlsAuthentication GetAuthentication() Returns Type Description TlsAuthentication Overrides Org.BouncyCastle.Crypto.Tls.AbstractTlsClient.GetAuthentication() | Edit this page View Source GetClientExtensions() Gets the DTLS extensions for this DTLS-SRTP client. Declaration public override IDictionary GetClientExtensions() Returns Type Description IDictionary Returns a dictionary containing the client DTLS extensions Overrides Org.BouncyCastle.Crypto.Tls.AbstractTlsClient.GetClientExtensions() | Edit this page View Source GetKeyingMaterial(int) Gets the keying material (master keys and master salts) Declaration protected byte[] GetKeyingMaterial(int length) Parameters Type Name Description int length Returns Type Description byte[] | Edit this page View Source GetKeyingMaterial(string, byte[], int) Gets the keying material (master keys and master salts) Declaration protected virtual byte[] GetKeyingMaterial(string asciiLabel, byte[] context_value, int length) Parameters Type Name Description string asciiLabel byte[] context_value int length Returns Type Description byte[] | Edit this page View Source GetRemoteCertificate() Gets the Certificate of the server Declaration public Certificate GetRemoteCertificate() Returns Type Description Certificate | Edit this page View Source GetSessionToResume() Gets the DTLS-SRTP session to resume Declaration public override TlsSession GetSessionToResume() Returns Type Description TlsSession Overrides Org.BouncyCastle.Crypto.Tls.AbstractTlsClient.GetSessionToResume() | Edit this page View Source GetSrtcpPolicy() Gets the SRTCP encryption and authenticaion policy information for the DTLS-SRTP session Declaration public virtual SrtpPolicy GetSrtcpPolicy() Returns Type Description SrtpPolicy | Edit this page View Source GetSrtpMasterClientKey() Gets the client's master key Declaration public virtual byte[] GetSrtpMasterClientKey() Returns Type Description byte[] | Edit this page View Source GetSrtpMasterClientSalt() Gets the client's master salt Declaration public virtual byte[] GetSrtpMasterClientSalt() Returns Type Description byte[] | Edit this page View Source GetSrtpMasterServerKey() Gets the server's master key for SRTP Declaration public virtual byte[] GetSrtpMasterServerKey() Returns Type Description byte[] | Edit this page View Source GetSrtpMasterServerSalt() Gets the server's master salt Declaration public virtual byte[] GetSrtpMasterServerSalt() Returns Type Description byte[] | Edit this page View Source GetSrtpPolicy() Gets the SRTP encryption and authentication policy information for the DTLS-SRTP session Declaration public virtual SrtpPolicy GetSrtpPolicy() Returns Type Description SrtpPolicy | Edit this page View Source IsClient() Always returns true because this object is the DTLS client Declaration public bool IsClient() Returns Type Description bool | Edit this page View Source NotifyAlertRaised(byte, byte, string, Exception) Called by the transport if a DTLS-SRTP protocol alert has been raised. Declaration public override void NotifyAlertRaised(byte alertLevel, byte alertDescription, string message, Exception cause) Parameters Type Name Description byte alertLevel byte alertDescription string message Exception cause Overrides AbstractTlsPeer.NotifyAlertRaised(byte, byte, string, Exception) | Edit this page View Source NotifyAlertReceived(byte, byte) Called if a protocol Alert was received Declaration public override void NotifyAlertReceived(byte alertLevel, byte alertDescription) Parameters Type Name Description byte alertLevel byte alertDescription Overrides AbstractTlsPeer.NotifyAlertReceived(byte, byte) | Edit this page View Source NotifyHandshakeComplete() Called when the DTLS handshake is completed Declaration public override void NotifyHandshakeComplete() Overrides Org.BouncyCastle.Crypto.Tls.AbstractTlsPeer.NotifyHandshakeComplete() | Edit this page View Source NotifyServerVersion(ProtocolVersion) Called during the protocol handshake to set the protocol version of the server Declaration public override void NotifyServerVersion(ProtocolVersion serverVersion) Parameters Type Name Description ProtocolVersion serverVersion Overrides Org.BouncyCastle.Crypto.Tls.AbstractTlsClient.NotifyServerVersion(Org.BouncyCastle.Crypto.Tls.ProtocolVersion) | Edit this page View Source PrepareSrtpSharedSecret() Prepares the SRTP-DTLS shared secret for the DTLS-SRTP handshake Declaration protected virtual void PrepareSrtpSharedSecret() | Edit this page View Source ProcessServerExtensions(IDictionary) Processes the DTLS handshake extensions received from the DTLS server Declaration public override void ProcessServerExtensions(IDictionary clientExtensions) Parameters Type Name Description IDictionary clientExtensions Overrides AbstractTlsClient.ProcessServerExtensions(IDictionary) | Edit this page View Source RequiresExtendedMasterSecret() Returns true if an extended master secret is required. Declaration public override bool RequiresExtendedMasterSecret() Returns Type Description bool Overrides Org.BouncyCastle.Crypto.Tls.AbstractTlsPeer.RequiresExtendedMasterSecret() Events | Edit this page View Source OnAlert Event that is fired when an Alert is received from the server during the DTLS handshake Declaration public event Action<AlertLevelsEnum, AlertTypesEnum, string>? OnAlert Event Type Type Description Action<AlertLevelsEnum, AlertTypesEnum, string> Implements Org.BouncyCastle.Crypto.Tls.TlsClient Org.BouncyCastle.Crypto.Tls.TlsPeer IDtlsSrtpPeer"
  },
  "api/SipLib.Dtls.DtlsSrtpServer.html": {
    "href": "api/SipLib.Dtls.DtlsSrtpServer.html",
    "title": "Class DtlsSrtpServer",
    "keywords": "Class DtlsSrtpServer Class for a DTLS-SRTP handshake server Inheritance object AbstractTlsPeer AbstractTlsServer DefaultTlsServer DtlsSrtpServer Implements TlsServer TlsPeer IDtlsSrtpPeer Inherited Members DefaultTlsServer.GetDsaSignerCredentials() DefaultTlsServer.GetDHParameters() DefaultTlsServer.GetCredentials() DefaultTlsServer.GetKeyExchange() DefaultTlsServer.CreateDHKeyExchange(int) DefaultTlsServer.CreateDheKeyExchange(int) DefaultTlsServer.CreateECDHKeyExchange(int) DefaultTlsServer.CreateECDheKeyExchange(int) DefaultTlsServer.CreateRsaKeyExchange() AbstractTlsServer.mCipherFactory AbstractTlsServer.mContext AbstractTlsServer.mClientVersion AbstractTlsServer.mOfferedCipherSuites AbstractTlsServer.mOfferedCompressionMethods AbstractTlsServer.mClientExtensions AbstractTlsServer.mEncryptThenMacOffered AbstractTlsServer.mMaxFragmentLengthOffered AbstractTlsServer.mTruncatedHMacOffered AbstractTlsServer.mSupportedSignatureAlgorithms AbstractTlsServer.mEccCipherSuitesOffered AbstractTlsServer.mNamedCurves AbstractTlsServer.mClientECPointFormats AbstractTlsServer.mServerECPointFormats AbstractTlsServer.mServerVersion AbstractTlsServer.mSelectedCipherSuite AbstractTlsServer.mSelectedCompressionMethod AbstractTlsServer.mServerExtensions AbstractTlsServer.CheckServerExtensions() AbstractTlsServer.GetCompressionMethods() AbstractTlsServer.SupportsClientEccCapabilities(int[], byte[]) AbstractTlsServer.Init(TlsServerContext) AbstractTlsServer.NotifyClientVersion(ProtocolVersion) AbstractTlsServer.NotifyFallback(bool) AbstractTlsServer.NotifyOfferedCipherSuites(int[]) AbstractTlsServer.NotifyOfferedCompressionMethods(byte[]) AbstractTlsServer.GetServerVersion() AbstractTlsServer.GetSelectedCompressionMethod() AbstractTlsServer.GetServerSupplementalData() AbstractTlsServer.GetCertificateStatus() AbstractTlsServer.ProcessClientSupplementalData(IList) AbstractTlsServer.GetCompression() AbstractTlsServer.GetCipher() AbstractTlsServer.GetNewSessionTicket() AbstractTlsServer.AllowEncryptThenMac AbstractTlsServer.AllowTruncatedHMac AbstractTlsPeer.Cancel() AbstractTlsPeer.NotifyCloseHandle(TlsCloseable) AbstractTlsPeer.GetHandshakeTimeoutMillis() AbstractTlsPeer.ShouldUseGmtUnixTime() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class DtlsSrtpServer : DefaultTlsServer, TlsServer, TlsPeer, IDtlsSrtpPeer Constructors | Edit this page View Source DtlsSrtpServer() Constructor. Creates a self-signed certificate. Declaration public DtlsSrtpServer() | Edit this page View Source DtlsSrtpServer(Certificate, AsymmetricKeyParameter) Constructor Declaration public DtlsSrtpServer(Certificate certificateChain, AsymmetricKeyParameter privateKey) Parameters Type Name Description Certificate certificateChain Contains at least one X.509 certificate. If null, then a self-signed certificate will be automatically created. AsymmetricKeyParameter privateKey Private key for the certificate | Edit this page View Source DtlsSrtpServer(X509Certificate2) Constructor Declaration public DtlsSrtpServer(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate The .NET X509Certificate2 to use | Edit this page View Source DtlsSrtpServer(string, string) Constructor Declaration public DtlsSrtpServer(string certificatePath, string keyPath) Parameters Type Name Description string certificatePath The file path to the certificate string keyPath The file path to the private key | Edit this page View Source DtlsSrtpServer(string[], string) Constructor Declaration public DtlsSrtpServer(string[] certificatesPath, string keyPath) Parameters Type Name Description string[] certificatesPath File paths to the certificates string keyPath File path to the private key Properties | Edit this page View Source CertificateChain Gets the certificate change containing the certificate Declaration public Certificate? CertificateChain { get; } Property Value Type Description Certificate | Edit this page View Source ClientCertificate Gets the client's X.509 certificate Declaration public Certificate? ClientCertificate { get; } Property Value Type Description Certificate | Edit this page View Source Fingerprint Gets the fingerprint for the certificate. Declaration public RTCDtlsFingerprint? Fingerprint { get; } Property Value Type Description RTCDtlsFingerprint | Edit this page View Source ForceUseExtendedMasterSecret Gets or sets a flag to indicate whether or not to force the use of the extended MasterSecret. Defaults to true. Declaration public bool ForceUseExtendedMasterSecret { get; set; } Property Value Type Description bool | Edit this page View Source MaximumVersion Gets the maximum supported DTLS protocol version Declaration protected override ProtocolVersion MaximumVersion { get; } Property Value Type Description ProtocolVersion Overrides Org.BouncyCastle.Crypto.Tls.AbstractTlsServer.MaximumVersion | Edit this page View Source MinimumVersion Gets the minimum supported DTLS version Declaration protected override ProtocolVersion MinimumVersion { get; } Property Value Type Description ProtocolVersion Overrides Org.BouncyCastle.Crypto.Tls.AbstractTlsServer.MinimumVersion | Edit this page View Source PrivateKey Gets the private key for the certificate. Declaration public AsymmetricKeyParameter? PrivateKey { get; } Property Value Type Description AsymmetricKeyParameter Methods | Edit this page View Source GetCertificateRequest() Gets the certificate request Declaration public override CertificateRequest GetCertificateRequest() Returns Type Description CertificateRequest Overrides Org.BouncyCastle.Crypto.Tls.AbstractTlsServer.GetCertificateRequest() | Edit this page View Source GetCipherSuites() Gets the cipher suites supported by the server Declaration protected override int[] GetCipherSuites() Returns Type Description int[] Overrides Org.BouncyCastle.Crypto.Tls.DefaultTlsServer.GetCipherSuites() | Edit this page View Source GetECDsaSignerCredentials() Gets the ECDSA certificate signer's credentials Declaration protected override TlsSignerCredentials GetECDsaSignerCredentials() Returns Type Description TlsSignerCredentials Overrides Org.BouncyCastle.Crypto.Tls.DefaultTlsServer.GetECDsaSignerCredentials() | Edit this page View Source GetKeyingMaterial(int) Gets the keying material (master keys and master salts) Declaration protected byte[] GetKeyingMaterial(int length) Parameters Type Name Description int length Returns Type Description byte[] | Edit this page View Source GetKeyingMaterial(string, byte[], int) Gets the keying material (master keys and master salts) Declaration protected virtual byte[] GetKeyingMaterial(string asciiLabel, byte[] context_value, int length) Parameters Type Name Description string asciiLabel byte[] context_value int length Returns Type Description byte[] Exceptions Type Condition ArgumentException InvalidOperationException | Edit this page View Source GetRemoteCertificate() Gets the client's Certificate Declaration public Certificate GetRemoteCertificate() Returns Type Description Certificate | Edit this page View Source GetRsaEncryptionCredentials() Gets the RSA certificate encryption credentials Declaration protected override TlsEncryptionCredentials GetRsaEncryptionCredentials() Returns Type Description TlsEncryptionCredentials Overrides Org.BouncyCastle.Crypto.Tls.DefaultTlsServer.GetRsaEncryptionCredentials() | Edit this page View Source GetRsaSignerCredentials() Gets the RSA certificate signer's credentials Declaration protected override TlsSignerCredentials GetRsaSignerCredentials() Returns Type Description TlsSignerCredentials Overrides Org.BouncyCastle.Crypto.Tls.DefaultTlsServer.GetRsaSignerCredentials() | Edit this page View Source GetSelectedCipherSuite() Gets the cipher suite ID that was selected. Declaration public override int GetSelectedCipherSuite() Returns Type Description int Overrides Org.BouncyCastle.Crypto.Tls.AbstractTlsServer.GetSelectedCipherSuite() | Edit this page View Source GetServerExtensions() Gets the server's DTLS extensions Declaration public override IDictionary GetServerExtensions() Returns Type Description IDictionary Overrides Org.BouncyCastle.Crypto.Tls.AbstractTlsServer.GetServerExtensions() | Edit this page View Source GetSrtcpPolicy() Gets the SRTCP encryption and authenticaion policy information for the DTLS-SRTP session Declaration public SrtpPolicy GetSrtcpPolicy() Returns Type Description SrtpPolicy | Edit this page View Source GetSrtpMasterClientKey() Gets the client's master SRTP key Declaration public byte[] GetSrtpMasterClientKey() Returns Type Description byte[] | Edit this page View Source GetSrtpMasterClientSalt() Gets the client's master salt Declaration public byte[] GetSrtpMasterClientSalt() Returns Type Description byte[] | Edit this page View Source GetSrtpMasterServerKey() Gets the server's master key for SRTP Declaration public byte[] GetSrtpMasterServerKey() Returns Type Description byte[] | Edit this page View Source GetSrtpMasterServerSalt() Gets the server's master salt for SRTP Declaration public byte[] GetSrtpMasterServerSalt() Returns Type Description byte[] | Edit this page View Source GetSrtpPolicy() Gets the SRTP encryption and authentication policy information for the DTLS-SRTP session Declaration public SrtpPolicy GetSrtpPolicy() Returns Type Description SrtpPolicy | Edit this page View Source IsClient() Always returns false because this object is the DTLS server Declaration public bool IsClient() Returns Type Description bool | Edit this page View Source NotifyAlertRaised(byte, byte, string, Exception) Called by the transport if a DTLS-SRTP protocol alert has been raised. Declaration public override void NotifyAlertRaised(byte alertLevel, byte alertDescription, string message, Exception cause) Parameters Type Name Description byte alertLevel byte alertDescription string message Exception cause Overrides AbstractTlsPeer.NotifyAlertRaised(byte, byte, string, Exception) | Edit this page View Source NotifyAlertReceived(byte, byte) Called if a protocol Alert was received Declaration public override void NotifyAlertReceived(byte alertLevel, byte alertDescription) Parameters Type Name Description byte alertLevel byte alertDescription Overrides AbstractTlsPeer.NotifyAlertReceived(byte, byte) | Edit this page View Source NotifyClientCertificate(Certificate) Called when the client certificate has been received during the handshake Declaration public override void NotifyClientCertificate(Certificate clientCertificate) Parameters Type Name Description Certificate clientCertificate Overrides Org.BouncyCastle.Crypto.Tls.AbstractTlsServer.NotifyClientCertificate(Org.BouncyCastle.Crypto.Tls.Certificate) | Edit this page View Source NotifyHandshakeComplete() Called when the DTLS handshake is completed Declaration public override void NotifyHandshakeComplete() Overrides Org.BouncyCastle.Crypto.Tls.AbstractTlsPeer.NotifyHandshakeComplete() | Edit this page View Source NotifySecureRenegotiation(bool) This override prevents a TLS fault from being generated if a \"Client Hello\" is received that does not support TLS renegotiation (https://tools.ietf.org/html/rfc5746). This override is required to be able to complete a DTLS handshake with the Pion WebRTC library, see https://github.com/pion/dtls/issues/274. Declaration public override void NotifySecureRenegotiation(bool secureRenegotiation) Parameters Type Name Description bool secureRenegotiation Overrides AbstractTlsPeer.NotifySecureRenegotiation(bool) | Edit this page View Source PrepareSrtpSharedSecret() Prepares the SRTP-DTLS shared secret for the DTLS-SRTP handshake Declaration protected virtual void PrepareSrtpSharedSecret() | Edit this page View Source ProcessClientExtensions(IDictionary) Called to process the client's DTLS protocol externsions when they are received. Declaration public override void ProcessClientExtensions(IDictionary clientExtensions) Parameters Type Name Description IDictionary clientExtensions The client's extensions Overrides AbstractTlsServer.ProcessClientExtensions(IDictionary) | Edit this page View Source RequiresExtendedMasterSecret() Returns true if an extended master secret is required. Declaration public override bool RequiresExtendedMasterSecret() Returns Type Description bool Overrides Org.BouncyCastle.Crypto.Tls.AbstractTlsPeer.RequiresExtendedMasterSecret() Events | Edit this page View Source OnAlert This event is fired if an Alert message was received during the DTLS protocol handshake Declaration public event Action<AlertLevelsEnum, AlertTypesEnum, string>? OnAlert Event Type Type Description Action<AlertLevelsEnum, AlertTypesEnum, string> Implements Org.BouncyCastle.Crypto.Tls.TlsServer Org.BouncyCastle.Crypto.Tls.TlsPeer IDtlsSrtpPeer"
  },
  "api/SipLib.Dtls.DtlsSrtpTransport.html": {
    "href": "api/SipLib.Dtls.DtlsSrtpTransport.html",
    "title": "Class DtlsSrtpTransport",
    "keywords": "Class DtlsSrtpTransport Class for managing the transport logic for a DTLS SRTP client or a server. Inheritance object DtlsSrtpTransport Implements DatagramTransport TlsCloseable IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class DtlsSrtpTransport : DatagramTransport, TlsCloseable, IDisposable Constructors | Edit this page View Source DtlsSrtpTransport(IDtlsSrtpPeer, int) Constructor Declaration public DtlsSrtpTransport(IDtlsSrtpPeer connection, int mtu = 1500) Parameters Type Name Description IDtlsSrtpPeer connection A DtlsSrtpClient object or a DtlsSrtpServer object that this transport object will manage int mtu Maximum transfer unit for the network. Defaults to 1500. Fields | Edit this page View Source OnDataReady Event that is fired when there is data that needs to be sent via UDP Declaration public Action<byte[]>? OnDataReady Field Value Type Description Action<byte[]> | Edit this page View Source RetransmissionMilliseconds Sets the period in milliseconds that receive will wait before try retransmission Declaration public int RetransmissionMilliseconds Field Value Type Description int | Edit this page View Source TimeoutMilliseconds Sets the period in milliseconds that the handshake attempt will timeout after. Declaration public int TimeoutMilliseconds Field Value Type Description int Properties | Edit this page View Source IsClient Returns true if this transport object is for a DTLS client or false if its for a DTLS server. Declaration public bool IsClient { get; } Property Value Type Description bool | Edit this page View Source SrtcpDecoder Gets the SRTCP decoder Declaration public IPacketTransformer SrtcpDecoder { get; } Property Value Type Description IPacketTransformer | Edit this page View Source SrtcpEncoder Gets the SRTCP decoder Declaration public IPacketTransformer SrtcpEncoder { get; } Property Value Type Description IPacketTransformer | Edit this page View Source SrtpDecoder Gets the SRTP decoder Declaration public IPacketTransformer SrtpDecoder { get; } Property Value Type Description IPacketTransformer | Edit this page View Source SrtpEncoder Gets the SRTP encoder Declaration public IPacketTransformer SrtpEncoder { get; } Property Value Type Description IPacketTransformer | Edit this page View Source Transport Gets or sets the DTLS transport object Declaration public DtlsTransport? Transport { get; } Property Value Type Description DtlsTransport Methods | Edit this page View Source BackOff(int) Handle retransmission time based in DTLS 1.3 Declaration protected virtual int BackOff(int currentWaitMillis) Parameters Type Name Description int currentWaitMillis Returns Type Description int | Edit this page View Source Close() Closes this transport object. Declaration public virtual void Close() | Edit this page View Source Dispose() Close the transport if the instance is out of scope. Declaration public void Dispose() | Edit this page View Source Dispose(bool) Close the transport if the instance is out of scope. Declaration protected void Dispose(bool disposing) Parameters Type Name Description bool disposing | Edit this page View Source DoHandshake(out string?) Starts the DTLS handshake as a client or as a server. This method blocks until the handshake is complete. Declaration public bool DoHandshake(out string? handshakeError) Parameters Type Name Description string handshakeError Set to a string that describes the handshake error. Set to null if no errors occurred. Will be non-null if this method returns false. Returns Type Description bool Returns true if successful or false if a handshake error occurred. | Edit this page View Source GenerateRtcpDecoder() Generates an IPacketTransformer interface to use to decode RTCP packets Declaration protected IPacketTransformer GenerateRtcpDecoder() Returns Type Description IPacketTransformer | Edit this page View Source GenerateRtcpEncoder() Generates an IPacketTransformer interface to use to encode RTCP packets Declaration protected IPacketTransformer GenerateRtcpEncoder() Returns Type Description IPacketTransformer | Edit this page View Source GenerateRtpDecoder() Generates an IPacketTransformer interface to use to decode RTP packets Declaration protected IPacketTransformer GenerateRtpDecoder() Returns Type Description IPacketTransformer | Edit this page View Source GenerateRtpEncoder() Generates an IPacketTransformer interface to use to encode RTP packets Declaration protected IPacketTransformer GenerateRtpEncoder() Returns Type Description IPacketTransformer | Edit this page View Source GenerateTransformer(bool, bool) Generates an IPacketTransformer for a DTLS client or server for RTP or RTCP packets Declaration protected IPacketTransformer GenerateTransformer(bool isClient, bool isRtp) Parameters Type Name Description bool isClient Set to true to generate the transformer for the client or false to generate the transformer for the server. bool isRtp Set to true to generate the transformer for RTP packets or to false to generate the transformer for RTCP packets Returns Type Description IPacketTransformer | Edit this page View Source GetMasterClientKey() Gets the client's master key Declaration protected byte[] GetMasterClientKey() Returns Type Description byte[] | Edit this page View Source GetMasterClientSalt() Gets the client's master salt Declaration protected byte[] GetMasterClientSalt() Returns Type Description byte[] | Edit this page View Source GetMasterServerKey() Gets the server's master key Declaration protected byte[] GetMasterServerKey() Returns Type Description byte[] | Edit this page View Source GetMasterServerSalt() Gets the server's master salt Declaration protected byte[] GetMasterServerSalt() Returns Type Description byte[] | Edit this page View Source GetReceiveLimit() Returns the maximum number of bytes that can be received Declaration public int GetReceiveLimit() Returns Type Description int | Edit this page View Source GetRemoteCertificate() Gets the X.509 certificate of the remote peer Declaration public Certificate GetRemoteCertificate() Returns Type Description Certificate | Edit this page View Source GetSendLimit() Returns the maximum number of bytes that can be sent Declaration public int GetSendLimit() Returns Type Description int | Edit this page View Source GetSrtcpPolicy() Gets the SRTCP encryption and authenticaion policy information for the DTLS-SRTP session Declaration protected SrtpPolicy GetSrtcpPolicy() Returns Type Description SrtpPolicy | Edit this page View Source GetSrtpPolicy() Gets the SRTCP encryption and authenticaion policy information for the DTLS-SRTP session Declaration protected SrtpPolicy GetSrtpPolicy() Returns Type Description SrtpPolicy | Edit this page View Source IsHandshakeComplete() Returns true if the DTLS handshake is complete or false if it is not Declaration public bool IsHandshakeComplete() Returns Type Description bool | Edit this page View Source IsHandshakeFailed() Returns true if the DTLS hanshake failed or false if it did not Declaration public bool IsHandshakeFailed() Returns Type Description bool | Edit this page View Source IsHandshaking() Returns true if the DTLS handshake is in progress Declaration public bool IsHandshaking() Returns Type Description bool | Edit this page View Source ProtectRTCP(byte[], int, int) Protects (encrypts) a compete RTCP packet Declaration public byte[] ProtectRTCP(byte[] packet, int offset, int length) Parameters Type Name Description byte[] packet The complete RTCP packet to protect int offset Offset to the RTCP packet int length Number of bytes in the RTCP packet Returns Type Description byte[] Returns the encrypted RTCP packet | Edit this page View Source ProtectRTP(byte[], int, int) Protects (encrypts) a complete RTP packet. Declaration public byte[] ProtectRTP(byte[] packet, int offset, int length) Parameters Type Name Description byte[] packet Complete RTP packet to encrypt int offset Offset to the RTP packet int length Number of bytes in the RTP packet Returns Type Description byte[] Returns the encrypted RTP packet | Edit this page View Source Receive(byte[], int, int, int) Implementation of the ReciveMethod of the BouncyCastle DatagramTransport interface. Users of the DtlsSrtpTransport class must not call this method. Declaration public int Receive(byte[] buf, int off, int len, int waitMillis) Parameters Type Name Description byte[] buf int off int len int waitMillis Returns Type Description int | Edit this page View Source Send(byte[], int, int) Implementation of the Send() method of the BouncyCastle DatagramTransport interface. Users of the DtlsSrtpTransport class must not call this method. Declaration public void Send(byte[] buf, int off, int len) Parameters Type Name Description byte[] buf int off int len | Edit this page View Source UnprotectRTCP(byte[], int, int) Unprotects (decrypts) a complete RTCP packet Declaration public byte[] UnprotectRTCP(byte[] packet, int offset, int length) Parameters Type Name Description byte[] packet Complete RTCP packet to decrypt int offset Offset to the RTCP packet int length Number of bytes in the RTCP packet Returns Type Description byte[] Returns the decrypted RTCP packet | Edit this page View Source UnprotectRTP(byte[], int, int) Unprotects (decrypts) an RTP packet received from the remote endpoint. Only call this method if IsHandshake() complete returns true and IsHandshakeFailed() returns false Declaration public byte[] UnprotectRTP(byte[] packet, int offset, int length) Parameters Type Name Description byte[] packet Complete RTP packet that was receivedincluding the RTP header int offset Offset into the input of the RTP packet int length Number of bytes in the RTP packet Returns Type Description byte[] | Edit this page View Source WriteToRecvStream(byte[]) Call this method to send a UDP packet that has been received from the network to the receive stream of the DTLS handshake logic. Only call this method if the DTLS handshake has not been completed. Declaration public void WriteToRecvStream(byte[] buf) Parameters Type Name Description byte[] buf The UDP packet that was received from the network. Events | Edit this page View Source OnAlert Event that is fired if a DTlS protocol Alert occurs Declaration public event Action<AlertLevelsEnum, AlertTypesEnum, string>? OnAlert Event Type Type Description Action<AlertLevelsEnum, AlertTypesEnum, string> Implements Org.BouncyCastle.Crypto.Tls.DatagramTransport Org.BouncyCastle.Crypto.Tls.TlsCloseable IDisposable"
  },
  "api/SipLib.Dtls.DtlsUtils.html": {
    "href": "api/SipLib.Dtls.DtlsUtils.html",
    "title": "Class DtlsUtils",
    "keywords": "Class DtlsUtils This class provides various utility functions for the Datagram Transport Layer Security (DTLS) protocol. Inheritance object DtlsUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class DtlsUtils Fields | Edit this page View Source DEFAULT_ECDSA_KEY_SIZE The key size in bits when generating random keys for ECDSA self signed certificates. This is the maximum maximum key size for ECDSA keys. Declaration public const int DEFAULT_ECDSA_KEY_SIZE = 384 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE The key size in bits when generating random keys for RSA self signed certificates. Declaration public const int DEFAULT_KEY_SIZE = 2048 Field Value Type Description int Methods | Edit this page View Source ConvertBouncyCert(X509Certificate, AsymmetricCipherKeyPair) Declaration public static X509Certificate2 ConvertBouncyCert(X509Certificate bouncyCert, AsymmetricCipherKeyPair keyPair) Parameters Type Name Description X509Certificate bouncyCert AsymmetricCipherKeyPair keyPair Returns Type Description X509Certificate2 A .NET X509Certificate2 object Remarks Plagiarised from https://github.com/CryptLink/CertBuilder/blob/master/CertBuilder.cs. NOTE: netstandard2.1+ and netcoreapp3.1+ have x509.CopyWithPrivateKey which will avoid the need to use the serialize/deserialize from pfx to get from bouncy castle to .NET Core X509 certificates. | Edit this page View Source CreateCertificateFromPfxFile(string, string) Creates a BouncyCastle Certificate object and its private key from a PFX file containing a .NET X509Certificate2 object Declaration public static (Certificate, AsymmetricKeyParameter) CreateCertificateFromPfxFile(string CertFileName, string CertPassword) Parameters Type Name Description string CertFileName File name of the *.PFX file containing a private key. string CertPassword Password of the X.509 certificate Returns Type Description (Certificate, AsymmetricKeyParameter) Returns a BouncyCastle Certificate object and its private key. | Edit this page View Source CreateEcdsaPrivateKeyResource(string) Creates a private key for ECDSA certificates Declaration public static AsymmetricKeyParameter CreateEcdsaPrivateKeyResource(string subjectName = \"CN=root\") Parameters Type Name Description string subjectName Subject Name for the private key. Defaults to \"CN=root\" Returns Type Description AsymmetricKeyParameter Returns a new private key. | Edit this page View Source CreatePrivateKeyResource(string) Creates a private key Declaration public static AsymmetricKeyParameter CreatePrivateKeyResource(string subjectName = \"CN=root\") Parameters Type Name Description string subjectName Subject Name for the private key. Defaults to \"CN=root\" Returns Type Description AsymmetricKeyParameter Returns a new private key. | Edit this page View Source CreateSelfSignedBouncyCastleCert() Creates a self-signed BouncyCastle X509Certificate and its private key. Declaration public static (X509Certificate certificate, AsymmetricKeyParameter privateKey) CreateSelfSignedBouncyCastleCert() Returns Type Description (X509Certificate certificate, AsymmetricKeyParameter privateKey) Returns a self-signed BouncyCastle X509Certificate and its private key | Edit this page View Source CreateSelfSignedCert(AsymmetricKeyParameter?) Creates an X.509 self-signed certificate for use with DTLS using RSA and SHA-256. Declaration public static X509Certificate2 CreateSelfSignedCert(AsymmetricKeyParameter? privateKey = null) Parameters Type Name Description AsymmetricKeyParameter privateKey Private key to use. May be null Returns Type Description X509Certificate2 Returns a new self-signed certificate | Edit this page View Source CreateSelfSignedCert(string, string, AsymmetricKeyParameter) Creates an X.509 self-signed certificate for use with DTLS using RSA and SHA-256. Declaration public static X509Certificate2 CreateSelfSignedCert(string subjectName, string issuerName, AsymmetricKeyParameter privateKey) Parameters Type Name Description string subjectName Subject name for the certificate. For example: \"CN=localhost\" string issuerName Issuer name for the certificate. For example: \"CN=root\" AsymmetricKeyParameter privateKey Private key to use. May be null. Returns Type Description X509Certificate2 Returns a new self-signed certificate | Edit this page View Source CreateSelfSignedEcdsaTlsCert(string, string, AsymmetricKeyParameter) Creates a self-signed ECDSA BouncyCastle TLS certificate and its private key. Declaration public static (Certificate certificate, AsymmetricKeyParameter privateKey) CreateSelfSignedEcdsaTlsCert(string subjectName, string issuerName, AsymmetricKeyParameter issuerPrivateKey) Parameters Type Name Description string subjectName Subject Name for the certificate. For example: \"CN=localhost\" string issuerName Issuer Name for the certificate. For example: \"CN=root\" AsymmetricKeyParameter issuerPrivateKey The private key of the certificate issuer to use. May be null Returns Type Description (Certificate, AsymmetricKeyParameter) | Edit this page View Source CreateSelfSignedTlsCert() Creates a self-signed BouncyCastle TLS certificate and its private key. Declaration public static (Certificate certificate, AsymmetricKeyParameter privateKey) CreateSelfSignedTlsCert() Returns Type Description (Certificate, AsymmetricKeyParameter) Returns a self-signed (Org.BouncyCastle.Crypto.Tls.Certificate certificate and its private key. | Edit this page View Source CreateSelfSignedTlsCert(string, string, AsymmetricKeyParameter) Creates a self-signed BouncyCastle TLS certificate and its private key. Declaration public static (Certificate certificate, AsymmetricKeyParameter privateKey) CreateSelfSignedTlsCert(string subjectName, string issuerName, AsymmetricKeyParameter issuerPrivateKey) Parameters Type Name Description string subjectName Subject Name for the certificate. For example: \"CN=localhost\" string issuerName Issuer Name for the certificate. For example: \"CN=root\" AsymmetricKeyParameter issuerPrivateKey Returns Type Description (Certificate, AsymmetricKeyParameter) | Edit this page View Source DigestOf(IDigest, byte[]) Calculates the digest of a byte array Declaration public static byte[] DigestOf(IDigest dAlg, byte[] input) Parameters Type Name Description IDigest dAlg Specifies the hash algorithm to use byte[] input Input byte array to calculate the hash of Returns Type Description byte[] Returns a byte array containing the calculated hash value | Edit this page View Source Fingerprint(X509CertificateStructure) Gets the fingerprint of a BouncyCastle X509CertificateStructure using the SHA-256 hash algorithm Declaration public static RTCDtlsFingerprint Fingerprint(X509CertificateStructure c) Parameters Type Name Description X509CertificateStructure c Input certificate structure Returns Type Description RTCDtlsFingerprint Returns a RTCDtlsFingerprint object that represents the fingerprint of the X.509 certificate | Edit this page View Source Fingerprint(Certificate) Gets the fingerprint of the first BouncyCastle X.509 certificate in a BouncyCastle certificate chain Declaration public static RTCDtlsFingerprint Fingerprint(Certificate certificateChain) Parameters Type Name Description Certificate certificateChain The certificate chain the contains at least one certificate Returns Type Description RTCDtlsFingerprint Returns a RTCDtlsFingerprint object that represents the fingerprint of the X.509 certificate | Edit this page View Source Fingerprint(X509Certificate) Gets the fingerprint of a BouncyCastle X.509 certificate Declaration public static RTCDtlsFingerprint Fingerprint(X509Certificate certificate) Parameters Type Name Description X509Certificate certificate Input BouncyCastle X.509 certificate Returns Type Description RTCDtlsFingerprint Returns a RTCDtlsFingerprint object that represents the fingerprint of the X.509 certificate | Edit this page View Source Fingerprint(X509Certificate2) Gets the fingerprint of a .NET X.509 certificate Declaration public static RTCDtlsFingerprint Fingerprint(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate Input .NET X.509 certificate Returns Type Description RTCDtlsFingerprint Returns a RTCDtlsFingerprint object that represents the fingerprint of the X.509 certificate | Edit this page View Source Fingerprint(string, X509CertificateStructure) Gets the fingerprint of a BouncyCastle X.509 certificate Declaration public static RTCDtlsFingerprint Fingerprint(string hashAlgorithm, X509CertificateStructure c) Parameters Type Name Description string hashAlgorithm Specifies the hash algorithm. For example sha-256. X509CertificateStructure c BouncyCastle X.509 certificate object Returns Type Description RTCDtlsFingerprint Returns a RTCDtlsFingerprint object that represents the fingerprint of the X.509 certificate | Edit this page View Source Fingerprint(string, X509Certificate2) Gets the fingerprint of an .NET X.509 certificate. Declaration public static RTCDtlsFingerprint Fingerprint(string hashAlgorithm, X509Certificate2 certificate) Parameters Type Name Description string hashAlgorithm Specifies the hash algorithm. For example sha-256. X509Certificate2 certificate X509Certificate2 certificate to get the fingerprint attribute. Returns Type Description RTCDtlsFingerprint Returns a RTCDtlsFingerprint object that represents the fingerprint of the X.509 certificate | Edit this page View Source IsHashSupported(string) Verifies the hash algorithm is supported by the utility functions in this class. Declaration public static bool IsHashSupported(string hashAlgorithm) Parameters Type Name Description string hashAlgorithm The hash algorithm to check. Returns Type Description bool True if the hash algorithm is supported. | Edit this page View Source LoadAgreementCredentials(TlsContext, Certificate, AsymmetricKeyParameter) Declaration public static TlsAgreementCredentials LoadAgreementCredentials(TlsContext context, Certificate certificate, AsymmetricKeyParameter privateKey) Parameters Type Name Description TlsContext context Certificate certificate AsymmetricKeyParameter privateKey Returns Type Description TlsAgreementCredentials | Edit this page View Source LoadAgreementCredentials(TlsContext, string[], string) Declaration public static TlsAgreementCredentials LoadAgreementCredentials(TlsContext context, string[] certResources, string keyResource) Parameters Type Name Description TlsContext context string[] certResources string keyResource Returns Type Description TlsAgreementCredentials | Edit this page View Source LoadCertificateChain(X509Certificate2) Declaration public static Certificate LoadCertificateChain(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate Returns Type Description Certificate | Edit this page View Source LoadCertificateChain(X509Certificate2[]) Declaration public static Certificate LoadCertificateChain(X509Certificate2[] certificates) Parameters Type Name Description X509Certificate2[] certificates Returns Type Description Certificate | Edit this page View Source LoadCertificateChain(string[]) Declaration public static Certificate LoadCertificateChain(string[] resources) Parameters Type Name Description string[] resources Returns Type Description Certificate | Edit this page View Source LoadCertificateResource(X509Certificate2) Declaration public static X509CertificateStructure LoadCertificateResource(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate Returns Type Description X509CertificateStructure | Edit this page View Source LoadCertificateResource(string) Declaration public static X509CertificateStructure LoadCertificateResource(string resource) Parameters Type Name Description string resource Returns Type Description X509CertificateStructure | Edit this page View Source LoadEncryptionCredentials(TlsContext, Certificate, AsymmetricKeyParameter) Declaration public static TlsEncryptionCredentials LoadEncryptionCredentials(TlsContext context, Certificate certificate, AsymmetricKeyParameter privateKey) Parameters Type Name Description TlsContext context Certificate certificate AsymmetricKeyParameter privateKey Returns Type Description TlsEncryptionCredentials | Edit this page View Source LoadEncryptionCredentials(TlsContext, string[], string) Declaration public static TlsEncryptionCredentials LoadEncryptionCredentials(TlsContext context, string[] certResources, string keyResource) Parameters Type Name Description TlsContext context string[] certResources string keyResource Returns Type Description TlsEncryptionCredentials | Edit this page View Source LoadPemResource(string) Declaration public static PemObject LoadPemResource(string path) Parameters Type Name Description string path Returns Type Description PemObject | Edit this page View Source LoadPrivateKeyResource(X509Certificate2) Gets the private key of a .NET X509Certificate2 object Declaration public static AsymmetricKeyParameter LoadPrivateKeyResource(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate Input certificate that contains a private key Returns Type Description AsymmetricKeyParameter Returns the private key contained in the certificate | Edit this page View Source LoadPrivateKeyResource(string) Declaration public static AsymmetricKeyParameter LoadPrivateKeyResource(string resource) Parameters Type Name Description string resource Returns Type Description AsymmetricKeyParameter | Edit this page View Source LoadSignerCredentials(TlsContext, Certificate, AsymmetricKeyParameter) Declaration public static TlsSignerCredentials LoadSignerCredentials(TlsContext context, Certificate certificate, AsymmetricKeyParameter privateKey) Parameters Type Name Description TlsContext context Certificate certificate AsymmetricKeyParameter privateKey Returns Type Description TlsSignerCredentials | Edit this page View Source LoadSignerCredentials(TlsContext, Certificate, AsymmetricKeyParameter, SignatureAndHashAlgorithm) Declaration public static TlsSignerCredentials LoadSignerCredentials(TlsContext context, Certificate certificate, AsymmetricKeyParameter privateKey, SignatureAndHashAlgorithm signatureAndHashAlgorithm) Parameters Type Name Description TlsContext context Certificate certificate AsymmetricKeyParameter privateKey SignatureAndHashAlgorithm signatureAndHashAlgorithm Returns Type Description TlsSignerCredentials | Edit this page View Source LoadSignerCredentials(TlsContext, IList, byte, Certificate, AsymmetricKeyParameter) Declaration public static TlsSignerCredentials? LoadSignerCredentials(TlsContext context, IList supportedSignatureAlgorithms, byte signatureAlgorithm, Certificate certificate, AsymmetricKeyParameter privateKey) Parameters Type Name Description TlsContext context IList supportedSignatureAlgorithms byte signatureAlgorithm Certificate certificate AsymmetricKeyParameter privateKey Returns Type Description TlsSignerCredentials | Edit this page View Source LoadSignerCredentials(TlsContext, IList, byte, string, string) Declaration public static TlsSignerCredentials? LoadSignerCredentials(TlsContext context, IList supportedSignatureAlgorithms, byte signatureAlgorithm, string certResource, string keyResource) Parameters Type Name Description TlsContext context IList supportedSignatureAlgorithms byte signatureAlgorithm string certResource string keyResource Returns Type Description TlsSignerCredentials | Edit this page View Source LoadSignerCredentials(TlsContext, string[], string) Declaration public static TlsSignerCredentials LoadSignerCredentials(TlsContext context, string[] certResources, string keyResource) Parameters Type Name Description TlsContext context string[] certResources string keyResource Returns Type Description TlsSignerCredentials | Edit this page View Source LoadSignerCredentials(TlsContext, string[], string, SignatureAndHashAlgorithm) Declaration public static TlsSignerCredentials LoadSignerCredentials(TlsContext context, string[] certResources, string keyResource, SignatureAndHashAlgorithm signatureAndHashAlgorithm) Parameters Type Name Description TlsContext context string[] certResources string keyResource SignatureAndHashAlgorithm signatureAndHashAlgorithm Returns Type Description TlsSignerCredentials | Edit this page View Source ToRSA(RsaPrivateCrtKeyParameters) This method and the related ones have been copied from the BouncyCode DotNetUtilities class due to https://github.com/bcgit/bc-csharp/issues/160 which prevents the original version from working on non-Windows platforms. Declaration public static RSA ToRSA(RsaPrivateCrtKeyParameters privKey) Parameters Type Name Description RsaPrivateCrtKeyParameters privKey Returns Type Description RSA | Edit this page View Source ToRSAParameters(RsaPrivateCrtKeyParameters) Converts a BouncyCastle RsaPrivateCrtKeyParameters to a .NET RSAParameters object. Declaration public static RSAParameters ToRSAParameters(RsaPrivateCrtKeyParameters privKey) Parameters Type Name Description RsaPrivateCrtKeyParameters privKey Input RSA private key parameters Returns Type Description RSAParameters Returns a new .NET RSAParameters object."
  },
  "api/SipLib.Dtls.IDtlsSrtpPeer.html": {
    "href": "api/SipLib.Dtls.IDtlsSrtpPeer.html",
    "title": "Interface IDtlsSrtpPeer",
    "keywords": "Interface IDtlsSrtpPeer Definition of the interface that must be implement by the DtlsSrtpClient and the DtlsSrtpServer Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public interface IDtlsSrtpPeer Properties | Edit this page View Source ForceUseExtendedMasterSecret Returns true if use of the extended master secret is to be forced Declaration bool ForceUseExtendedMasterSecret { get; set; } Property Value Type Description bool Methods | Edit this page View Source GetRemoteCertificate() Gets the remote endpoint's X.509 certificate Declaration Certificate GetRemoteCertificate() Returns Type Description Certificate | Edit this page View Source GetSrtcpPolicy() Gets the DTLS-SRTCP encryption and authentication policy information Declaration SrtpPolicy GetSrtcpPolicy() Returns Type Description SrtpPolicy | Edit this page View Source GetSrtpMasterClientKey() Gets the client's master key Declaration byte[] GetSrtpMasterClientKey() Returns Type Description byte[] | Edit this page View Source GetSrtpMasterClientSalt() Gets the client's master salt Declaration byte[] GetSrtpMasterClientSalt() Returns Type Description byte[] | Edit this page View Source GetSrtpMasterServerKey() Gets the server's master key Declaration byte[] GetSrtpMasterServerKey() Returns Type Description byte[] | Edit this page View Source GetSrtpMasterServerSalt() Gets the server's master salt Declaration byte[] GetSrtpMasterServerSalt() Returns Type Description byte[] | Edit this page View Source GetSrtpPolicy() Gets the DTLS-SRTP encryption and authentication policy information Declaration SrtpPolicy GetSrtpPolicy() Returns Type Description SrtpPolicy | Edit this page View Source IsClient() Returns true if the implementation is for a client or false if it is for a server Declaration bool IsClient() Returns Type Description bool Events | Edit this page View Source OnAlert Event that will be fired when a protocol handshake alert is received or raised Declaration event Action<AlertLevelsEnum, AlertTypesEnum, string>? OnAlert Event Type Type Description Action<AlertLevelsEnum, AlertTypesEnum, string>"
  },
  "api/SipLib.Dtls.IPacketTransformer.html": {
    "href": "api/SipLib.Dtls.IPacketTransformer.html",
    "title": "Interface IPacketTransformer",
    "keywords": "Interface IPacketTransformer Interface for transforming a non-secure packet. Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public interface IPacketTransformer Methods | Edit this page View Source Close() Closes the transformer and underlying transform engine. The close functions closes all stored crypto contexts. This deletes key data and forces a cleanup of the crypto contexts. Declaration void Close() | Edit this page View Source ReverseTransform(byte[]) Reverse-transforms a specific packet (i.e. transforms a transformed packet back). Declaration byte[] ReverseTransform(byte[] pkt) Parameters Type Name Description byte[] pkt The transformed packet to be restored Returns Type Description byte[] The restored packet | Edit this page View Source ReverseTransform(byte[], int, int) Reverse-transforms a specific packet (i.e. transforms a transformed packet back). Declaration byte[] ReverseTransform(byte[] pkt, int offset, int length) Parameters Type Name Description byte[] pkt The packet to be restored int offset The offset to the packet data int length The length of data in the packet Returns Type Description byte[] The restored packet | Edit this page View Source Transform(byte[]) Transforms a non-secure packet. Declaration byte[] Transform(byte[] pkt) Parameters Type Name Description byte[] pkt The packet to be transformed Returns Type Description byte[] Returns the transformed packet. Returns null if the packet cannot be transformed. | Edit this page View Source Transform(byte[], int, int) Transforms a specific non-secure packet. Declaration byte[] Transform(byte[] pkt, int offset, int length) Parameters Type Name Description byte[] pkt The packet to be secured int offset The offset of the packet data int length The length of the packet data Returns Type Description byte[] Returns the transformed packet. Returns null if the packet cannot be transformed."
  },
  "api/SipLib.Dtls.ITransformEngine.html": {
    "href": "api/SipLib.Dtls.ITransformEngine.html",
    "title": "Interface ITransformEngine",
    "keywords": "Interface ITransformEngine Interface for the transform engine. Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public interface ITransformEngine Methods | Edit this page View Source GetRTCPTransformer() Gets the IPacketTransformer interface for RTCP packets Declaration IPacketTransformer GetRTCPTransformer() Returns Type Description IPacketTransformer | Edit this page View Source GetRTPTransformer() Gets the IPacketTransformer interface for RTP packets Declaration IPacketTransformer GetRTPTransformer() Returns Type Description IPacketTransformer"
  },
  "api/SipLib.Dtls.NetConvert.html": {
    "href": "api/SipLib.Dtls.NetConvert.html",
    "title": "Class NetConvert",
    "keywords": "Class NetConvert This class provides various static functions for fixing Little-Endian/Big-Endian byte ordering issues. Inheritance object NetConvert Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class NetConvert Methods | Edit this page View Source DoReverseEndian(int) Reverses the byte order of an int (32 bit signed integer) Declaration public static int DoReverseEndian(int x) Parameters Type Name Description int x Input int Returns Type Description int Returns an int with the byte order reversed | Edit this page View Source DoReverseEndian(ushort) Reverses the byte-order of a UInt16 (unsigned 16 bit integer0 Declaration public static ushort DoReverseEndian(ushort x) Parameters Type Name Description ushort x Input UInt16 Returns Type Description ushort Returns a UInt16 with the byte order reversed | Edit this page View Source DoReverseEndian(uint) Reverses the byte-order of a uint (32 bit unsigned integer) Declaration public static uint DoReverseEndian(uint x) Parameters Type Name Description uint x Input uint Returns Type Description uint Returns a uint with the byte order reversed. | Edit this page View Source DoReverseEndian(ulong) Reverses the byte order of a ulong (unsigned 64 bit integer) Declaration public static ulong DoReverseEndian(ulong x) Parameters Type Name Description ulong x Input ulong Returns Type Description ulong Returns a ulong with the byte order reversed | Edit this page View Source EndianFlip(uint) Reverses the endianness of a UInt32. Declaration public static uint EndianFlip(uint val) Parameters Type Name Description uint val The value to flip. Returns Type Description uint The same value but with the endianness flipped. | Edit this page View Source GetBytes(ushort) Get a buffer representing the unsigned 16 bit integer in network byte (big endian) order. Declaration public static byte[] GetBytes(ushort val) Parameters Type Name Description ushort val The value to convert. Returns Type Description byte[] A buffer representing the value in network order | Edit this page View Source GetBytes(uint) Get a buffer representing the 32 bit unsigned integer in network byte (big endian) order. Declaration public static byte[] GetBytes(uint val) Parameters Type Name Description uint val The value to convert. Returns Type Description byte[] A buffer representing the value in network order | Edit this page View Source GetBytes(ulong) Get a buffer representing the 64 bit unsigned integer in network byte (big endian) order. Declaration public static byte[] GetBytes(ulong val) Parameters Type Name Description ulong val The value to convert. Returns Type Description byte[] A buffer representing the value in network order | Edit this page View Source ParseUInt16(byte[], int) Parse a UInt16 from a network buffer using network byte order. Declaration public static ushort ParseUInt16(byte[] buffer, int posn) Parameters Type Name Description byte[] buffer The buffer to parse the value from. int posn The position in the buffer to start the parse from. Returns Type Description ushort A UInt16 value. | Edit this page View Source ParseUInt32(byte[], int) Parse a UInt32 from a network buffer using network byte order. Declaration public static uint ParseUInt32(byte[] buffer, int posn) Parameters Type Name Description byte[] buffer The buffer to parse the value from. int posn The position in the buffer to start the parse from. Returns Type Description uint A UInt32 value. | Edit this page View Source ParseUInt64(byte[], int) Parse a UInt64 from a network buffer using network byte order. Declaration public static ulong ParseUInt64(byte[] buffer, int posn) Parameters Type Name Description byte[] buffer The buffer to parse the value from. int posn The position in the buffer to start the parse from. Returns Type Description ulong A UInt64 value. | Edit this page View Source ToBuffer(ushort, byte[], int) Writes a UInt16 value to a network buffer using network byte order. Declaration public static void ToBuffer(ushort val, byte[] buffer, int posn) Parameters Type Name Description ushort val The value to write to the buffer. byte[] buffer The buffer to write the value to. int posn The start position in the buffer to write the value at. | Edit this page View Source ToBuffer(uint, byte[], int) Writes a UInt32 value to a network buffer using network byte order. Declaration public static void ToBuffer(uint val, byte[] buffer, int posn) Parameters Type Name Description uint val The value to write to the buffer. byte[] buffer The buffer to write the value to. int posn The start position in the buffer to write the value at. | Edit this page View Source ToBuffer(ulong, byte[], int) Writes a UInt64 value to a network buffer using network byte order. Declaration public static void ToBuffer(ulong val, byte[] buffer, int posn) Parameters Type Name Description ulong val The value to write to the buffer. byte[] buffer The buffer to write the value to. int posn The start position in the buffer to write the value at."
  },
  "api/SipLib.Dtls.RTCDtlsFingerprint.html": {
    "href": "api/SipLib.Dtls.RTCDtlsFingerprint.html",
    "title": "Class RTCDtlsFingerprint",
    "keywords": "Class RTCDtlsFingerprint Represents a fingerprint of a certificate used to authenticate WebRTC communications. Inheritance object RTCDtlsFingerprint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class RTCDtlsFingerprint Fields | Edit this page View Source algorithm One of the hash function algorithms defined in the 'Hash function Textual Names' registry. Declaration public string? algorithm Field Value Type Description string | Edit this page View Source value The value of the certificate fingerprint in lower-case hex string as expressed utilising the syntax of 'fingerprint' in [RFC4572] Section 5. Declaration public string? value Field Value Type Description string Methods | Edit this page View Source ToString() Converts this object to a string that can be used for the value of the SDP fingerprint attribute Declaration public override string ToString() Returns Type Description string Overrides object.ToString() | Edit this page View Source TryParse(string, out RTCDtlsFingerprint?) Attempts to parse the fingerprint fields from a string. Declaration public static bool TryParse(string str, out RTCDtlsFingerprint? fingerprint) Parameters Type Name Description string str The string to parse from. RTCDtlsFingerprint fingerprint If successful a fingerprint object. Returns Type Description bool True if a fingerprint was successfully parsed. False if not."
  },
  "api/SipLib.Dtls.RawPacket.html": {
    "href": "api/SipLib.Dtls.RawPacket.html",
    "title": "Class RawPacket",
    "keywords": "Class RawPacket When using a TransformConnector, a RTP/RTCP packet is represented using RawPacket. RawPacket stores the buffer holding the RTP/RTCP packet, as well as the inner offset and length of RTP/RTCP packet data. After transformation, data is also stored in RawPacket objects, either the original RawPacket (in place transformation), or a newly created RawPacket. Inheritance object RawPacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class RawPacket Constructors | Edit this page View Source RawPacket() Initializes a new empty RawPacket instance. Declaration public RawPacket() | Edit this page View Source RawPacket(byte[], int, int) Initializes a new RawPacket instance with a specific byte array buffer. Declaration public RawPacket(byte[] data, int offset, int length) Parameters Type Name Description byte[] data The byte array to be the buffer of the new instance int offset The offset in buffer at which the actual data to be represented by the new instance starts int length The number of bytes in buffer which constitute the actual data to be represented by the new instance Fields | Edit this page View Source EXT_HEADER_SIZE The size of the extension header as defined by RFC 3550. Declaration public const int EXT_HEADER_SIZE = 4 Field Value Type Description int | Edit this page View Source FIXED_HEADER_SIZE The size of the fixed part of the RTP header as defined by RFC 3550. Declaration public const int FIXED_HEADER_SIZE = 12 Field Value Type Description int | Edit this page View Source RTP_PACKET_MAX_SIZE Maximum RTP packet size Declaration public const int RTP_PACKET_MAX_SIZE = 8192 Field Value Type Description int Methods | Edit this page View Source Append(byte[], int) Append a byte array to the end of the packet. This may change the data buffer of this packet. Declaration public void Append(byte[] data, int len) Parameters Type Name Description byte[] data Data byte array to append int len The number of bytes to append | Edit this page View Source GetBuffer() Gets the buffer containing the content of this packet Declaration public MemoryStream GetBuffer() Returns Type Description MemoryStream | Edit this page View Source GetCsrcCount() Returns the number of CSRC identifiers currently included in this packet. Declaration public int GetCsrcCount() Returns Type Description int | Edit this page View Source GetData() Gets the data in the RawPacket Declaration public byte[] GetData() Returns Type Description byte[] Returns a byte array containing the data. | Edit this page View Source GetExtensionBit() Returns true if the extension bit of this packet has been set and false otherwise. Declaration public bool GetExtensionBit() Returns Type Description bool | Edit this page View Source GetExtensionLength() Returns the length of the extensions currently added to this packet. Declaration public int GetExtensionLength() Returns Type Description int | Edit this page View Source GetHeaderLength() Gets RTP header length from a RTP packet Declaration public int GetHeaderLength() Returns Type Description int | Edit this page View Source GetLength() Get the length of this packet's data Declaration public int GetLength() Returns Type Description int | Edit this page View Source GetPaddingSize() Get RTP padding size from a RTP packet Declaration public int GetPaddingSize() Returns Type Description int | Edit this page View Source GetPayload() Gets the RTP payload (bytes) of this RTP packet. Declaration public byte[]? GetPayload() Returns Type Description byte[] | Edit this page View Source GetPayloadLength() Gets the RTP payload length from a RTP packet Declaration public int GetPayloadLength() Returns Type Description int | Edit this page View Source GetPayloadType() Gets the RTP payload type from a RTP packet Declaration public byte GetPayloadType() Returns Type Description byte | Edit this page View Source GetRTCPSSRC() Gets the RTCP SSRC from a RTCP packet Declaration public int GetRTCPSSRC() Returns Type Description int | Edit this page View Source GetSRTCPIndex(int) Gets the SRTCP sequence number from a SRTCP packet Declaration public int GetSRTCPIndex(int authTagLen) Parameters Type Name Description int authTagLen Returns Type Description int | Edit this page View Source GetSSRC() Get RTP SSRC from a RTP packet Declaration public int GetSSRC() Returns Type Description int | Edit this page View Source GetSequenceNumber() Gets the RTP sequence number from a RTP packet Declaration public int GetSequenceNumber() Returns Type Description int | Edit this page View Source GetTimestamp() Returns the timestamp for this RTP RawPacket. Declaration public long GetTimestamp() Returns Type Description long | Edit this page View Source Grow(int) Grow the internal packet buffer. This will change the data buffer of this packet but not the length of the valid data.Use this to grow the internal buffer to avoid buffer re-allocations when appending data. Declaration public void Grow(int delta) Parameters Type Name Description int delta Number of bytes to grow | Edit this page View Source ReadInt(int) Reads an integer from this packet at specified offset Declaration public int ReadInt(int off) Parameters Type Name Description int off Offset to the integer to be read Returns Type Description int | Edit this page View Source ReadRegion(int, int) Reads a byte region from a specified offset with a specified length Declaration public byte[]? ReadRegion(int off, int len) Parameters Type Name Description int off Offset to the region to be read int len Length of the region to be read Returns Type Description byte[] | Edit this page View Source ReadRegionToBuff(int, int, byte[]) Reads a byte region from a specified offset in the RTP packet and with a specified length into a given buffer Declaration public void ReadRegionToBuff(int off, int len, byte[] outBuff) Parameters Type Name Description int off Offset to the RTP packet of the region to be read int len Length of the region to be read byte[] outBuff Output buffer | Edit this page View Source ReadUnsignedIntAsLong(int) Reads an unsigned integer as a long at a specified offset Declaration public long ReadUnsignedIntAsLong(int off) Parameters Type Name Description int off Offset to the unsigned integer Returns Type Description long | Edit this page View Source ReadUnsignedShortAsInt(int) Reads an unsigned short at a specified offset as an int Declaration public int ReadUnsignedShortAsInt(int off) Parameters Type Name Description int off Offset to the unsigned short Returns Type Description int | Edit this page View Source Wrap(byte[], int, int) Wraps the data into raw packet for readable format Declaration public void Wrap(byte[] data, int offset, int length) Parameters Type Name Description byte[] data Data to write into the raw packet int offset Offset into the raw packet int length Number of bytes to write | Edit this page View Source shrink(int) Shrinks the buffer of this packet by specified length Declaration public void shrink(int delta) Parameters Type Name Description int delta Length to shrink"
  },
  "api/SipLib.Dtls.SrtcpCryptoContext.html": {
    "href": "api/SipLib.Dtls.SrtcpCryptoContext.html",
    "title": "Class SrtcpCryptoContext",
    "keywords": "Class SrtcpCryptoContext SRTPCryptoContext class is the core class of SRTP implementation. There can be multiple SRTP sources in one SRTP session. And each SRTP stream has a corresponding SRTPCryptoContext object, identified by SSRC. In this way, different sources can be protected independently. Inheritance object SrtcpCryptoContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class SrtcpCryptoContext Constructors | Edit this page View Source SrtcpCryptoContext(long) Constructs an empty SRTPCryptoContext using the SSRC. The other parameters are set to default null value. Declaration public SrtcpCryptoContext(long ssrcIn) Parameters Type Name Description long ssrcIn SSRC of this SRTPCryptoContext | Edit this page View Source SrtcpCryptoContext(long, byte[], byte[], SrtpPolicy) Construct a normal SRTPCryptoContext based on the given parameters. Declaration public SrtcpCryptoContext(long ssrcIn, byte[] masterK, byte[] masterS, SrtpPolicy policyIn) Parameters Type Name Description long ssrcIn The RTP SSRC that this SRTP cryptographic context protects. byte[] masterK byte array holding the master key for this SRTP cryptographic context. Refer to Section 3.2.1 of the RFC about the role of the master key. byte[] masterS byte array holding the master salt for this SRTP cryptographic context.It is used to computer the initialization vector that in turn is input to compute the session key, session authentication key and the session salt. SrtpPolicy policyIn SRTP policy for this SRTP cryptographic context, defined the encryption algorithm, the authentication algorithm, etc Methods | Edit this page View Source Close() Close the crypto context. The Close function deletes key data and performs a cleanup of the crypto context. Clean up key data, maybe this is the second time.However, sometimes we cannot know if the CryptoContext was used and the application called deriveSrtpKeys(...) that would have cleaned the key data. Declaration public void Close() | Edit this page View Source DeriveContext(long) Derives a new SRTPCryptoContext for use with a new SSRC. This method returns a new SRTPCryptoContext initialized with the data of this SRTPCryptoContext. Replacing the SSRC, Roll-over-Counter, and the key derivation rate the application cab use this SRTPCryptoContext to encrypt / decrypt a new stream(Synchronization source) inside one RTP session. Declaration public SrtcpCryptoContext DeriveContext(long ssrc) Parameters Type Name Description long ssrc The SSRC for this context Returns Type Description SrtcpCryptoContext Returns a new SRTPCryptoContext with all relevant data set. | Edit this page View Source DeriveSrtcpKeys() Derives the srtcp session keys from the master key. Declaration public void DeriveSrtcpKeys() | Edit this page View Source GetAuthTagLength() Gets the authentication tag length of this SRTP cryptographic context Declaration public int GetAuthTagLength() Returns Type Description int | Edit this page View Source GetMKILength() Gets the MKI length of this SRTP cryptographic context Declaration public int GetMKILength() Returns Type Description int | Edit this page View Source GetSSRC() Gets the SSRC of this SRTP cryptographic context Declaration public long GetSSRC() Returns Type Description long | Edit this page View Source ProcessPacketAESCM(RawPacket, int) Performs Counter Mode AES encryption / decryption Declaration public void ProcessPacketAESCM(RawPacket pkt, int index) Parameters Type Name Description RawPacket pkt The RTP packet to be encrypted / decrypted int index | Edit this page View Source ProcessPacketAESF8(RawPacket, int) Performs F8 Mode AES encryption / decryption Declaration public void ProcessPacketAESF8(RawPacket pkt, int index) Parameters Type Name Description RawPacket pkt The RTP packet to be encrypted / decrypted int index | Edit this page View Source ReverseTransformPacket(RawPacket) Transform a SRTCP packet into a RTCP packet. This method is called when a SRTCP packet was received. Declaration public bool ReverseTransformPacket(RawPacket pkt) Parameters Type Name Description RawPacket pkt The received RTCP packet Returns Type Description bool Returns true if the packet can be accepted false if authentication or replay check failed | Edit this page View Source TransformPacket(RawPacket) Transform a RTP packet into a SRTP packet. This method is called when a normal RTP packet ready to be sent. Operations done by the transformation may include: encryption, using either Counter Mode encryption, or F8 Mode encryption, adding authentication tag, currently HMC SHA1 method. Both encryption and authentication functionality can be turned off as long as the SRTPPolicy used in this SRTPCryptoContext is requires no encryption and no authentication. Then the packet will be sent out untouched. However this is not encouraged. If no SRTP feature is enabled, then we shall not use SRTP TransformConnector. We should use the original method (RTPManager managed transportation) instead. Declaration public void TransformPacket(RawPacket pkt) Parameters Type Name Description RawPacket pkt The RTP packet that is going to be sent out"
  },
  "api/SipLib.Dtls.SrtcpTransformer.html": {
    "href": "api/SipLib.Dtls.SrtcpTransformer.html",
    "title": "Class SrtcpTransformer",
    "keywords": "Class SrtcpTransformer SRTCPTransformer implements PacketTransformer. It encapsulate the encryption / decryption logic for SRTCP packets author Bing SU (nova.su@gmail.com) author Werner Werner.Dittmann@t-online.de Inheritance object SrtcpTransformer Implements IPacketTransformer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class SrtcpTransformer : IPacketTransformer Constructors | Edit this page View Source SrtcpTransformer(SrtpTransformEngine) Constructor Declaration public SrtcpTransformer(SrtpTransformEngine engine) Parameters Type Name Description SrtpTransformEngine engine | Edit this page View Source SrtcpTransformer(SrtpTransformEngine, SrtpTransformEngine) Constructor Declaration public SrtcpTransformer(SrtpTransformEngine forwardEngine, SrtpTransformEngine reverseEngine) Parameters Type Name Description SrtpTransformEngine forwardEngine SrtpTransformEngine reverseEngine Methods | Edit this page View Source Close() Close the transformer and underlying transform engine. The close functions closes all stored crypto contexts. This deletes key data and forces a cleanup of the crypto contexts. Declaration public void Close() | Edit this page View Source ReverseTransform(byte[]) Reverse-transforms a specific packet (i.e. transforms a transformed packet back). Declaration public byte[] ReverseTransform(byte[] pkt) Parameters Type Name Description byte[] pkt Returns Type Description byte[] | Edit this page View Source ReverseTransform(byte[], int, int) Reverse-transforms a specific packet (i.e. transforms a transformed packet back). Declaration public byte[] ReverseTransform(byte[] pkt, int offset, int length) Parameters Type Name Description byte[] pkt int offset int length Returns Type Description byte[] | Edit this page View Source Transform(byte[]) Encrypts a SRTCP packet Declaration public byte[] Transform(byte[] pkt) Parameters Type Name Description byte[] pkt plain SRTCP packet to be encrypted. Returns Type Description byte[] encrypted SRTCP packet. | Edit this page View Source Transform(byte[], int, int) Encrypts a SRTCP packet Declaration public byte[] Transform(byte[] pkt, int offset, int length) Parameters Type Name Description byte[] pkt int offset int length Returns Type Description byte[] Implements IPacketTransformer"
  },
  "api/SipLib.Dtls.SrtpCipherCTR.html": {
    "href": "api/SipLib.Dtls.SrtpCipherCTR.html",
    "title": "Class SrtpCipherCTR",
    "keywords": "Class SrtpCipherCTR SRTPCipherCTR implements SRTP Counter Mode AES Encryption (AES-CM). Counter Mode AES Encryption algorithm is defined in RFC3711, section 4.1.1. Inheritance object SrtpCipherCTR Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class SrtpCipherCTR Methods | Edit this page View Source GetCipherStream(IBlockCipher, byte[], int, byte[]) Computes the cipher stream for AES CM mode. See section 4.1.1 in RFC3711 for detailed description. Declaration public void GetCipherStream(IBlockCipher aesCipher, byte[] _out, int length, byte[] iv) Parameters Type Name Description IBlockCipher aesCipher Cipher to use byte[] _out Byte array holding the output cipher stream int length Length of the cipher stream to produce, in bytes byte[] iv Initialization vector used to generate this cipher stream | Edit this page View Source Process(IBlockCipher, MemoryStream, int, int, byte[]) Processes an input buffer Declaration public void Process(IBlockCipher cipher, MemoryStream data, int off, int len, byte[] iv) Parameters Type Name Description IBlockCipher cipher The cipher to use MemoryStream data Contains the data to process int off Offset into the data array int len Number of bytes to process byte[] iv Initialization Vector (IV) to use"
  },
  "api/SipLib.Dtls.SrtpCipherF8.F8Context.html": {
    "href": "api/SipLib.Dtls.SrtpCipherF8.F8Context.html",
    "title": "Class SrtpCipherF8.F8Context",
    "keywords": "Class SrtpCipherF8.F8Context F8 mode encryption context, see RFC3711 section 4.1.2 for a detailed description. Inheritance object SrtpCipherF8.F8Context Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class SrtpCipherF8.F8Context Fields | Edit this page View Source J Declaration public long J Field Value Type Description long | Edit this page View Source S Declaration public byte[] S Field Value Type Description byte[] | Edit this page View Source ivAccent Declaration public byte[] ivAccent Field Value Type Description byte[]"
  },
  "api/SipLib.Dtls.SrtpCipherF8.html": {
    "href": "api/SipLib.Dtls.SrtpCipherF8.html",
    "title": "Class SrtpCipherF8",
    "keywords": "Class SrtpCipherF8 SRTPCipherF8 implements SRTP F8 Mode AES Encryption (AES-f8). F8 Mode AES Encryption algorithm is defined in RFC3711, section 4.1.2. Inheritance object SrtpCipherF8 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class SrtpCipherF8 Methods | Edit this page View Source DeriveForIV(IBlockCipher, byte[], byte[]) Declaration public static void DeriveForIV(IBlockCipher f8Cipher, byte[] key, byte[] salt) Parameters Type Name Description IBlockCipher f8Cipher byte[] key byte[] salt | Edit this page View Source Process(IBlockCipher, MemoryStream, int, int, byte[], IBlockCipher) Encrypt / Decrypt a block using F8 Mode AES algorithm. Declaration public static void Process(IBlockCipher cipher, MemoryStream data, int off, int len, byte[] iv, IBlockCipher f8Cipher) Parameters Type Name Description IBlockCipher cipher MemoryStream data int off int len byte[] iv IBlockCipher f8Cipher"
  },
  "api/SipLib.Dtls.SrtpCryptoContext.html": {
    "href": "api/SipLib.Dtls.SrtpCryptoContext.html",
    "title": "Class SrtpCryptoContext",
    "keywords": "Class SrtpCryptoContext SRTPCryptoContext class is the core class of SRTP implementation. There can be multiple SRTP sources in one SRTP session.And each SRTP stream has a corresponding SRTPCryptoContext object, identified by SSRC.In this way, different sources can be protected independently. The SRTPCryptoContext class acts as a manager class and maintains all the information used in SRTP transformation. It is responsible for deriving encryption keys / salting keys / authentication keys from master keys. And it will invoke certain class to encrypt / decrypt(transform / reversetransform) RTP packets. It will hold a replay check db and do replay check against incoming packets. Inheritance object SrtpCryptoContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class SrtpCryptoContext Constructors | Edit this page View Source SrtpCryptoContext(long) Constructs an empty SRTPCryptoContext using ssrc. The other parameters are set to default null value. Declaration public SrtpCryptoContext(long ssrcIn) Parameters Type Name Description long ssrcIn SSRC of this SRTPCryptoContext | Edit this page View Source SrtpCryptoContext(long, int, long, byte[], byte[], SrtpPolicy) Constructs a normal SRTPCryptoContext based on the given parameters. Declaration public SrtpCryptoContext(long ssrcIn, int rocIn, long kdr, byte[] masterK, byte[] masterS, SrtpPolicy policyIn) Parameters Type Name Description long ssrcIn The RTP SSRC that this SRTP cryptographic context protects. int rocIn the initial Roll-Over-Counter according to RFC 3711. These are the upper 32 bit of the overall 48 bit SRTP packet index. Refer to chapter 3.2.1 of RFC 3711. long kdr the key derivation rate defines when to recompute the SRTP session keys. Refer to chapter 4.3.1 in the RFC. byte[] masterK byte array holding the master key for this SRTP cryptographic context. Refer to chapter 3.2.1 of the RFC about the role of the master key. byte[] masterS byte array holding the master salt for this SRTP cryptographic context. It is used to computer the initialization vector that in turn is input to compute the session key, session authentication key and the session salt. SrtpPolicy policyIn SRTP policy for this SRTP cryptographic context, defined the encryption algorithm, the authentication algorithm, etc Methods | Edit this page View Source Close() Close the crypto context. Declaration public void Close() | Edit this page View Source DeriveSrtpKeys(long) Derives the SRTP session keys from the master key Declaration public void DeriveSrtpKeys(long index) Parameters Type Name Description long index The 48 bit SRTP packet index | Edit this page View Source GetAuthTagLength() Gets the authentication tag length of this SRTP cryptographic context Declaration public int GetAuthTagLength() Returns Type Description int | Edit this page View Source GetMKILength() Gets the MKI length of this SRTP cryptographic context Declaration public int GetMKILength() Returns Type Description int | Edit this page View Source GetROC() Gets the Roll-Over-Counter of this SRTP cryptographic context Declaration public int GetROC() Returns Type Description int | Edit this page View Source GetSSRC() Gets the SSRC of this SRTP cryptographic context Declaration public long GetSSRC() Returns Type Description long | Edit this page View Source ProcessPacketAESCM(RawPacket) Performs Counter Mode AES encryption / decryption Declaration public void ProcessPacketAESCM(RawPacket pkt) Parameters Type Name Description RawPacket pkt The RTP packet to be encrypted / decrypted | Edit this page View Source ProcessPacketAESF8(RawPacket) Performs F8 Mode AES encryption / decryption Declaration public void ProcessPacketAESF8(RawPacket pkt) Parameters Type Name Description RawPacket pkt The RTP packet to be encrypted / decrypted | Edit this page View Source ReverseTransformPacket(RawPacket) Transform a SRTP packet into a RTP packet. This method is called when a SRTP packet is received. Operations done by the this operation include: Authentication check, Packet replay check and Decryption. Both encryption and authentication functionality can be turned off as long as the SRTPPolicy used in this SRTPCryptoContext requires no encryption and no authentication.Then the packet will be sent out untouched.However this is not encouraged. If no SRTP feature is enabled, then we shall not use SRTP TransformConnector. We should use the original method (RTPManager managed transportation) instead. Declaration public bool ReverseTransformPacket(RawPacket pkt) Parameters Type Name Description RawPacket pkt The RTP packet that is just received Returns Type Description bool Returns true if the packet can be accepted false if the packet failed authentication or failed replay check | Edit this page View Source SetROC(int) Sets the Roll-Over-Counter of this SRTP cryptographic context Declaration public void SetROC(int rocIn) Parameters Type Name Description int rocIn The Roll-Over-Counter of this SRTP cryptographic context | Edit this page View Source TransformPacket(RawPacket) Transforms a RTP packet into a SRTP packet. This method is called when a normal RTP packet ready to be sent. Operations done by the transformation may include: encryption, using either Counter Mode encryption, or F8 Mode encryption, adding authentication tag, currently HMC SHA1 method. Both encryption and authentication functionality can be turned off as long as the SRTPPolicy used in this SRTPCryptoContext is requires no encryption and no authentication.Then the packet will be sent out untouched. However this is not encouraged. If no SRTP feature is enabled, then we shall not use SRTP TransformConnector. We should use the original method (RTPManager managed transportation) instead. Declaration public void TransformPacket(RawPacket pkt) Parameters Type Name Description RawPacket pkt The RTP packet that is going to be sent out | Edit this page View Source deriveContext(long, int, long) Derives a new SRTPCryptoContext for use with a new SSRC Declaration public SrtpCryptoContext deriveContext(long ssrc, int roc, long deriveRate) Parameters Type Name Description long ssrc The SSRC for this context int roc The Roll-Over-Counter for this context long deriveRate The key derivation rate for this context Returns Type Description SrtpCryptoContext Returns a new SRTPCryptoContext with all relevant data set."
  },
  "api/SipLib.Dtls.SrtpParameters.html": {
    "href": "api/SipLib.Dtls.SrtpParameters.html",
    "title": "Struct SrtpParameters",
    "keywords": "Struct SrtpParameters Structure that defines the DTLS derived key and salt lengths for SRTP. See http://tools.ietf.org/html/rfc5764#section-4.1.2 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public struct SrtpParameters Fields | Edit this page View Source SRTP_AES128_CM_HMAC_SHA1_32 AES-128 counter mode with 32 bits of authentication information. Defined in RFC 3711. Declaration public static readonly SrtpParameters SRTP_AES128_CM_HMAC_SHA1_32 Field Value Type Description SrtpParameters | Edit this page View Source SRTP_AES128_CM_HMAC_SHA1_80 AES-128 counter mode with 80 bits of authentication. Defined in RFC 3711. Declaration public static readonly SrtpParameters SRTP_AES128_CM_HMAC_SHA1_80 Field Value Type Description SrtpParameters | Edit this page View Source SRTP_NULL_HMAC_SHA1_32 No encryption with 32 bits of authentication information. Defined in RFC 3711. Declaration public static readonly SrtpParameters SRTP_NULL_HMAC_SHA1_32 Field Value Type Description SrtpParameters | Edit this page View Source SRTP_NULL_HMAC_SHA1_80 No encryption with 80 bits of authentication information. Defined in RFC 3711. Declaration public static readonly SrtpParameters SRTP_NULL_HMAC_SHA1_80 Field Value Type Description SrtpParameters Methods | Edit this page View Source GetCipherKeyLength() Gets the length of the cipher key in bytes. Declaration public int GetCipherKeyLength() Returns Type Description int | Edit this page View Source GetCipherSaltLength() Gets the length of the cipher salt in bytes Declaration public int GetCipherSaltLength() Returns Type Description int | Edit this page View Source GetProfile() Returns the encryption profile. Declaration public int GetProfile() Returns Type Description int Will be either SrtpProtectionProfile.SRTP_AES128_CM_HMAC_SHA1_80, SrtpProtectionProfile.SRTP_AES128_CM_HMAC_SHA1_32, SrtpProtectionProfile.SRTP_NULL_HMAC_SHA1_80 or SrtpProtectionProfile.SRTP_NULL_HMAC_SHA1_32 | Edit this page View Source GetSrtcpPolicy() Gets the SRTP policy for RTCP Declaration public SrtpPolicy GetSrtcpPolicy() Returns Type Description SrtpPolicy | Edit this page View Source GetSrtpParametersForProfile(int) Gets the SRTP parameters from the SRTP profile Declaration public static SrtpParameters GetSrtpParametersForProfile(int profileValue) Parameters Type Name Description int profileValue Specifies the SRTP protection profile. Must be one of the values in the SrtpProtectionProfile enumeration. Returns Type Description SrtpParameters Returns a SrtpParameters structure. | Edit this page View Source GetSrtpPolicy() Gets the SRTP policy for RTP Declaration public SrtpPolicy GetSrtpPolicy() Returns Type Description SrtpPolicy"
  },
  "api/SipLib.Dtls.SrtpPolicy.html": {
    "href": "api/SipLib.Dtls.SrtpPolicy.html",
    "title": "Class SrtpPolicy",
    "keywords": "Class SrtpPolicy SrtpPolicy holds the SRTP encryption / authentication policy of a SRTP session. Author: Bing SU (nova.su@gmail.com) Inheritance object SrtpPolicy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class SrtpPolicy Constructors | Edit this page View Source SrtpPolicy(int, int, int, int, int, int) Construct a SRTPPolicy object based on given parameters. This class acts as a storage class, so all the parameters are passed in through this constructor. Declaration public SrtpPolicy(int encType, int encKeyLength, int authType, int authKeyLength, int authTagLength, int saltKeyLength) Parameters Type Name Description int encType SRTP encryption type int encKeyLength SRTP encryption key length int authType SRTP authentication type int authKeyLength SRTP authentication key length int authTagLength SRTP authentication tag length int saltKeyLength SRTP salt key length Fields | Edit this page View Source AESCM_ENCRYPTION AES counter mode encryption. See RFC 3711. Declaration public const int AESCM_ENCRYPTION = 1 Field Value Type Description int | Edit this page View Source AESF8_ENCRYPTION AES F8 encryption. See RFC 3711. Declaration public const int AESF8_ENCRYPTION = 2 Field Value Type Description int | Edit this page View Source HMACSHA1_AUTHENTICATION HMAC SHA1 authentication. See RFC 3711. Declaration public const int HMACSHA1_AUTHENTICATION = 1 Field Value Type Description int | Edit this page View Source NULL_AUTHENTICATION Not used in DTLS-SRTP Declaration public const int NULL_AUTHENTICATION = 0 Field Value Type Description int | Edit this page View Source NULL_ENCRYPTION No encryption. See RFC 3711. Declaration public const int NULL_ENCRYPTION = 0 Field Value Type Description int | Edit this page View Source SKEIN_AUTHENTICATION Not used in DTLS-SRTP Declaration public const int SKEIN_AUTHENTICATION = 2 Field Value Type Description int | Edit this page View Source TWOFISHF8_ENCRYPTION Not used in DTLS-SRTP Declaration public const int TWOFISHF8_ENCRYPTION = 4 Field Value Type Description int | Edit this page View Source TWOFISH_ENCRYPTION Not used in DTLS-SRTP Declaration public const int TWOFISH_ENCRYPTION = 3 Field Value Type Description int Properties | Edit this page View Source AuthKeyLength Gets or sets the authentication key length Declaration public int AuthKeyLength { get; set; } Property Value Type Description int | Edit this page View Source AuthTagLength Gets or sets the authentication tag length Declaration public int AuthTagLength { get; set; } Property Value Type Description int | Edit this page View Source AuthType Gets or sets the authentication type Declaration public int AuthType { get; set; } Property Value Type Description int | Edit this page View Source EncKeyLength Gets or sets the encryption key length Declaration public int EncKeyLength { get; set; } Property Value Type Description int | Edit this page View Source EncType Gets or sets the encryption type Declaration public int EncType { get; set; } Property Value Type Description int | Edit this page View Source SaltKeyLength Gets or sets the salt length Declaration public int SaltKeyLength { get; set; } Property Value Type Description int"
  },
  "api/SipLib.Dtls.SrtpTransformEngine.html": {
    "href": "api/SipLib.Dtls.SrtpTransformEngine.html",
    "title": "Class SrtpTransformEngine",
    "keywords": "Class SrtpTransformEngine Implementation of the SRTP Transform Engine Inheritance object SrtpTransformEngine Implements ITransformEngine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class SrtpTransformEngine : ITransformEngine Constructors | Edit this page View Source SrtpTransformEngine(byte[], byte[], SrtpPolicy, SrtpPolicy) Constructs a SRTPTransformEngine based on given master encryption key, master salt key and SRTP/SRTCP policy. Declaration public SrtpTransformEngine(byte[] masterKey, byte[] masterSalt, SrtpPolicy srtpPolicy, SrtpPolicy srtcpPolicy) Parameters Type Name Description byte[] masterKey The master encryption key byte[] masterSalt The master salt key SrtpPolicy srtpPolicy SRTP policy SrtpPolicy srtcpPolicy SRTCP policy Methods | Edit this page View Source Close() Closes the transformer engine. Declaration public void Close() | Edit this page View Source GetDefaultContextControl() Get the default SRTPCryptoContext Declaration public SrtcpCryptoContext? GetDefaultContextControl() Returns Type Description SrtcpCryptoContext | Edit this page View Source GetRTCPTransformer() Gets the IPacketTransformer for RTCP packets. Declaration public IPacketTransformer GetRTCPTransformer() Returns Type Description IPacketTransformer | Edit this page View Source GetRTPTransformer() Gets the IPacketTransformer for RTP packets. Declaration public IPacketTransformer GetRTPTransformer() Returns Type Description IPacketTransformer Implements ITransformEngine"
  },
  "api/SipLib.Dtls.SrtpTransformer.html": {
    "href": "api/SipLib.Dtls.SrtpTransformer.html",
    "title": "Class SrtpTransformer",
    "keywords": "Class SrtpTransformer SRTPTransformer implements IPacketTransformer and provides implementations for RTP packet to SRTP packet transformation and SRTP packet to RTP packet transformation logic. It will first find the corresponding SRTPCryptoContext for each packet based on their SSRC and then invoke the context object to perform the transformation and reverse transformation operation. Inheritance object SrtpTransformer Implements IPacketTransformer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Dtls Assembly: SipLib.dll Syntax public class SrtpTransformer : IPacketTransformer Constructors | Edit this page View Source SrtpTransformer(SrtpTransformEngine) Constructor Declaration public SrtpTransformer(SrtpTransformEngine engine) Parameters Type Name Description SrtpTransformEngine engine | Edit this page View Source SrtpTransformer(SrtpTransformEngine, SrtpTransformEngine) Constructor Declaration public SrtpTransformer(SrtpTransformEngine forwardEngine, SrtpTransformEngine reverseEngine) Parameters Type Name Description SrtpTransformEngine forwardEngine SrtpTransformEngine reverseEngine Methods | Edit this page View Source Close() Close the transformer and underlying transform engine. Declaration public void Close() | Edit this page View Source ReverseTransform(byte[]) Reverse-transforms a specific packet (i.e. transforms a transformed packet back). Declaration public byte[] ReverseTransform(byte[] pkt) Parameters Type Name Description byte[] pkt The transformed packet to be restored Returns Type Description byte[] The restored packet | Edit this page View Source ReverseTransform(byte[], int, int) Reverse-transforms a specific packet (i.e. transforms a transformed packet back). Declaration public byte[] ReverseTransform(byte[] pkt, int offset, int length) Parameters Type Name Description byte[] pkt The packet to be restored int offset The offset to the packet data int length The length of data in the packet Returns Type Description byte[] The restored packet | Edit this page View Source Transform(byte[]) Transforms a non-secure packet. Declaration public byte[] Transform(byte[] pkt) Parameters Type Name Description byte[] pkt The packet to be transformed Returns Type Description byte[] Returns the transformed packet. Returns null if the packet cannot be transformed. | Edit this page View Source Transform(byte[], int, int) Transforms a specific non-secure packet. Declaration public byte[] Transform(byte[] pkt, int offset, int length) Parameters Type Name Description byte[] pkt The packet to be secured int offset The offset of the packet data int length The length of the packet data Returns Type Description byte[] Returns the transformed packet. Returns null if the packet cannot be transformed. Implements IPacketTransformer"
  },
  "api/SipLib.Dtls.html": {
    "href": "api/SipLib.Dtls.html",
    "title": "Namespace SipLib.Dtls",
    "keywords": "Namespace SipLib.Dtls Classes required to support encryption and decryption of media (audio, video and Real Time Text) using the Datagram Transport Layer Security DTLS specified in RFC 5763 and RFC 5764. Classes DtlsClientUdpTransport Class for performing the client side of the DTLS handshake for DTLS-SRTP. This class uses a .NET UdpClient to communicate with the DTLS-SRTP server. This class should be used to perform the DTLS-SRTP handshake only. At the end of the DTLS-SRTP handshake both the client and the server will have exchanged the SRTP keying material. Call the Close() method when the handshake is completed. The Close() method closes the UdpClient object so it is necessary to create a new UdpClient object to communicate with the server for transporting SRTP media packets. After calling the constructor, call the DoHandshake() method of the DtlsSrtpTransport object to start the DTLS-SRTP handshake process. DtlsServerUdpTransport Class for performing the server side of the DTLS handshake for DTLS-SRTP. This class uses a .NET UdpClient to communicate with the DTLS-SRTP client. This class should be used to perform the DTLS-SRTP handshake only. At the end of the DTLS-SRTP handshake both the client and the server will have exchanged the SRTP keying material. Call the Close() method when the handshake is completed. The Close() method closes the UdpClient object so it is necessary to create a new UdpClient object to communicate with the client for transporting SRTP media packets. After calling the constructor, call the DoHandshake() method of the DtlsSrtpTransport object to start the DTLS-SRTP handshake process. DtlsSrtpClient Class for a DTLS-SRTP handshake client. DtlsSrtpServer Class for a DTLS-SRTP handshake server DtlsSrtpTransport Class for managing the transport logic for a DTLS SRTP client or a server. DtlsUtils This class provides various utility functions for the Datagram Transport Layer Security (DTLS) protocol. NetConvert This class provides various static functions for fixing Little-Endian/Big-Endian byte ordering issues. RTCDtlsFingerprint Represents a fingerprint of a certificate used to authenticate WebRTC communications. RawPacket When using a TransformConnector, a RTP/RTCP packet is represented using RawPacket. RawPacket stores the buffer holding the RTP/RTCP packet, as well as the inner offset and length of RTP/RTCP packet data. After transformation, data is also stored in RawPacket objects, either the original RawPacket (in place transformation), or a newly created RawPacket. SrtcpCryptoContext SRTPCryptoContext class is the core class of SRTP implementation. There can be multiple SRTP sources in one SRTP session. And each SRTP stream has a corresponding SRTPCryptoContext object, identified by SSRC. In this way, different sources can be protected independently. SrtpPolicy SrtpPolicy holds the SRTP encryption / authentication policy of a SRTP session. Author: Bing SU (nova.su@gmail.com) SrtpTransformEngine Implementation of the SRTP Transform Engine SrtpTransformer SRTPTransformer implements IPacketTransformer and provides implementations for RTP packet to SRTP packet transformation and SRTP packet to RTP packet transformation logic. It will first find the corresponding SRTPCryptoContext for each packet based on their SSRC and then invoke the context object to perform the transformation and reverse transformation operation. Interfaces IDtlsSrtpPeer Definition of the interface that must be implement by the DtlsSrtpClient and the DtlsSrtpServer IPacketTransformer Interface for transforming a non-secure packet. ITransformEngine Interface for the transform engine. Enums AlertLevelsEnum Enumeration of the protocol alert levels AlertTypesEnum Enumeration of the protocol Alert types"
  },
  "api/SipLib.Logging.SipLogger.html": {
    "href": "api/SipLib.Logging.SipLogger.html",
    "title": "Class SipLogger",
    "keywords": "Class SipLogger Class for logging debug, information, warning, error and critical messages. This class is used by the classes in the SipLib class library to log application messages. By default, this class logs all messages to a NullLogger. This means that no messages are logged. The consumer of the SipLib class libray must configure this class by constructing an Ilogger interface and call the Log set property. It is possible to configure this class to log messages to a separate logging destination. It is also possible to configure this class to log messages to the same logging destination as the consummer (an application or another class library) of this class library. It is also possible for the consumer of this class library to use this class directly to log application messages. See Configuring SipLib Logging. Inheritance object SipLogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Logging Assembly: SipLib.dll Syntax public static class SipLogger Properties | Edit this page View Source Log Sets the ILogger interface that this class will use to log messages. Declaration public static ILogger Log { set; } Property Value Type Description ILogger Methods | Edit this page View Source LogCritical(Exception, string) Logs a Critical level message with an exception that occurred Declaration public static void LogCritical(Exception exception, string message) Parameters Type Name Description Exception exception Exception that occurred string message Message to log | Edit this page View Source LogCritical(string) Logs a Critical level message Declaration public static void LogCritical(string message) Parameters Type Name Description string message Message to log | Edit this page View Source LogDebug(Exception, string) Logs a Debug level message with an exception that occurred Declaration public static void LogDebug(Exception exception, string message) Parameters Type Name Description Exception exception Exception that occurred string message Message to log | Edit this page View Source LogDebug(string) Logs a Debug level message Declaration public static void LogDebug(string message) Parameters Type Name Description string message Message to log | Edit this page View Source LogError(Exception, string) Logs an Error level message with an exception that occurred Declaration public static void LogError(Exception exception, string message) Parameters Type Name Description Exception exception Exception that occurred string message Message to log | Edit this page View Source LogError(string) Logs an Error level message Declaration public static void LogError(string message) Parameters Type Name Description string message Message to log | Edit this page View Source LogInformation(Exception, string) Logs an Information level message with an exception that occurred. Declaration public static void LogInformation(Exception exception, string message) Parameters Type Name Description Exception exception Exception that occurred string message Message to log | Edit this page View Source LogInformation(string) Logs an Information level message. Declaration public static void LogInformation(string message) Parameters Type Name Description string message Message to log | Edit this page View Source LogWarning(Exception, string) Logs a Warning level message with an exception Declaration public static void LogWarning(Exception exception, string message) Parameters Type Name Description Exception exception Exception that occurred string message Message to log | Edit this page View Source LogWarning(string) Logs a Warning level message Declaration public static void LogWarning(string message) Parameters Type Name Description string message Message to log"
  },
  "api/SipLib.Logging.html": {
    "href": "api/SipLib.Logging.html",
    "title": "Namespace SipLib.Logging",
    "keywords": "Namespace SipLib.Logging Contains a static class called SipLogger that the classes in this class library can use for logging application messages. Classes SipLogger Class for logging debug, information, warning, error and critical messages. This class is used by the classes in the SipLib class library to log application messages. By default, this class logs all messages to a NullLogger. This means that no messages are logged. The consumer of the SipLib class libray must configure this class by constructing an Ilogger interface and call the Log set property. It is possible to configure this class to log messages to a separate logging destination. It is also possible to configure this class to log messages to the same logging destination as the consummer (an application or another class library) of this class library. It is also possible for the consumer of this class library to use this class directly to log application messages. See Configuring SipLib Logging."
  },
  "api/SipLib.Media.ALawDecoder.html": {
    "href": "api/SipLib.Media.ALawDecoder.html",
    "title": "Class ALawDecoder",
    "keywords": "Class ALawDecoder a-law decoder based on code from: http://hazelware.luggle.com/tutorials/mulawcompression.html Inheritance object ALawDecoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class ALawDecoder Methods | Edit this page View Source ALawToLinearSample(byte) Converts an a-law encoded byte to a 16 bit linear sample Declaration public static short ALawToLinearSample(byte aLaw) Parameters Type Name Description byte aLaw a-law encoded byte Returns Type Description short Linear sample"
  },
  "api/SipLib.Media.ALawEncoder.html": {
    "href": "api/SipLib.Media.ALawEncoder.html",
    "title": "Class ALawEncoder",
    "keywords": "Class ALawEncoder A-law encoder Inheritance object ALawEncoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public static class ALawEncoder Methods | Edit this page View Source LinearToALawSample(short) Encodes a single 16 bit sample to a-law Declaration public static byte LinearToALawSample(short sample) Parameters Type Name Description short sample 16 bit PCM sample Returns Type Description byte a-law encoded byte"
  },
  "api/SipLib.Media.AudioDestination.html": {
    "href": "api/SipLib.Media.AudioDestination.html",
    "title": "Class AudioDestination",
    "keywords": "Class AudioDestination This class receives audio RTP packets from an RtpChannel, decodes them and sends them to an audio destination by calling a delegate function that processes the received audio samples. Inheritance object AudioDestination Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class AudioDestination Constructors | Edit this page View Source AudioDestination(MediaDescription, IAudioDecoder, RtpChannel, AudioDestinationDelegate?, int) Constructor Declaration public AudioDestination(MediaDescription AnsweredMediaDescription, IAudioDecoder Decoder, RtpChannel rtpChannel, AudioDestinationDelegate? destinationHandler, int DestinationSampleRate) Parameters Type Name Description MediaDescription AnsweredMediaDescription The MediaDescription object that was sent as the answer to the offered MediaDescription. This object contains the negotiated media type and codec type. IAudioDecoder Decoder IAudioDecoder to use to decode the received audio samples RtpChannel rtpChannel RtpChannel to receive audio RTP packets on. AudioDestinationDelegate destinationHandler Function to call to handle the decoded audio packets. If this is null then RTP packets are ignored. int DestinationSampleRate Sample rate expected by the destination handler Methods | Edit this page View Source SetDestionationHandler(AudioDestinationDelegate?) Sets the delegate function to call to process received audio packets. Declaration public void SetDestionationHandler(AudioDestinationDelegate? destinationHandler) Parameters Type Name Description AudioDestinationDelegate destinationHandler Audio samples destination handler function. If null then received RTP packets will be ignored."
  },
  "api/SipLib.Media.AudioDestinationDelegate.html": {
    "href": "api/SipLib.Media.AudioDestinationDelegate.html",
    "title": "Delegate AudioDestinationDelegate",
    "keywords": "Delegate AudioDestinationDelegate Delegate function for the audio destination handler function that the AudioDestination class will call to process decoded audio packets. Namespace: SipLib.Media Assembly: SipLib.dll Syntax public delegate void AudioDestinationDelegate(short[] PcmSamples) Parameters Type Name Description short[] PcmSamples"
  },
  "api/SipLib.Media.AudioSampleData.html": {
    "href": "api/SipLib.Media.AudioSampleData.html",
    "title": "Class AudioSampleData",
    "keywords": "Class AudioSampleData Data class for passing audio sample data to an audio sample source Inheritance object AudioSampleData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class AudioSampleData Constructors | Edit this page View Source AudioSampleData(short[], int) Constructor Declaration public AudioSampleData(short[] sampleData, int sampleRate) Parameters Type Name Description short[] sampleData Audio samples. Each sample is a 16-bit linear PCM sample. int sampleRate Sample rate in samples/second of the data in the SampleData array. Properties | Edit this page View Source SampleData Audio samples. Each element is a 16-bit linear PCM sample. Declaration public short[] SampleData { get; } Property Value Type Description short[] | Edit this page View Source SampleRate Sample rate in samples/second of the data in the SampleData array. Declaration public int SampleRate { get; } Property Value Type Description int"
  },
  "api/SipLib.Media.AudioSamplesReadyDelegate.html": {
    "href": "api/SipLib.Media.AudioSamplesReadyDelegate.html",
    "title": "Delegate AudioSamplesReadyDelegate",
    "keywords": "Delegate AudioSamplesReadyDelegate Delegate definition for the AudioSamplesReady event of the IAudioSamplesSource interface. Namespace: SipLib.Media Assembly: SipLib.dll Syntax public delegate void AudioSamplesReadyDelegate(short[] NewSamples, int SampleRate) Parameters Type Name Description short[] NewSamples Block of new 16-bit linear PCM audio samples. int SampleRate Sample rate in samples/second of the data in the NewSamples array."
  },
  "api/SipLib.Media.AudioSource.html": {
    "href": "api/SipLib.Media.AudioSource.html",
    "title": "Class AudioSource",
    "keywords": "Class AudioSource Class for sending sourced audio (from a microphone or a recording) to a remote endpoint via RTP packets over an RtpChannel. Inheritance object AudioSource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class AudioSource Constructors | Edit this page View Source AudioSource(MediaDescription, IAudioEncoder, RtpChannel) Constructor Declaration public AudioSource(MediaDescription AnsweredMediaDescription, IAudioEncoder Encoder, RtpChannel rtpChannel) Parameters Type Name Description MediaDescription AnsweredMediaDescription The MediaDescription object that was sent as the answer to the offered MediaDescription. This object contains the negotiated media type and codec type. IAudioEncoder Encoder IAudioEncoder to use to encode linear 16-bit PCM sample data that will be sent on the RtpChannel RtpChannel rtpChannel The RtpChannel to send RTP packets on Methods | Edit this page View Source OnAudioSamplesReady(short[], int) Event handler for the AudioSamplesReady event of the IAudioSampleSource object that is providing audio samples to send to the remote endpoint via the RtpChannel. Declaration public void OnAudioSamplesReady(short[] AudioSamples, int SampleRate) Parameters Type Name Description short[] AudioSamples int SampleRate | Edit this page View Source Pause() Pauses transmission of RTP packets. Declaration public virtual void Pause() | Edit this page View Source Resume() Resumes generation and transmission of RTP packets. Declaration public virtual void Resume() | Edit this page View Source SendDtmfEvent(DtmfEventEnum) Sends a DTMF event. This event sends a single DTMF event. The event length is 80 ms and three end packets are sent. This class does not ensure the minimum inter-digit gap of 40 ms so the application is responsible for doing this. Ensuring the minimum inter-digit gap is not an issue because DTMF digits are typically sent by a user by typing them on a keypad. Declaration public void SendDtmfEvent(DtmfEventEnum dtmfEvent) Parameters Type Name Description DtmfEventEnum dtmfEvent Event to send. | Edit this page View Source Start() Declaration public void Start() | Edit this page View Source Stop() Declaration public void Stop()"
  },
  "api/SipLib.Media.AudioSourceBase.AudioSourceStateEnum.html": {
    "href": "api/SipLib.Media.AudioSourceBase.AudioSourceStateEnum.html",
    "title": "Enum AudioSourceBase.AudioSourceStateEnum",
    "keywords": "Enum AudioSourceBase.AudioSourceStateEnum Enumeration of the possible states of an audio source Namespace: SipLib.Media Assembly: SipLib.dll Syntax protected enum AudioSourceBase.AudioSourceStateEnum Fields Name Description Paused Playing Stopped"
  },
  "api/SipLib.Media.AudioSourceBase.html": {
    "href": "api/SipLib.Media.AudioSourceBase.html",
    "title": "Class AudioSourceBase",
    "keywords": "Class AudioSourceBase Base class for all audio sources. This base class implementation provides an audio source that provides silence audio samples to the RtpChannel. It also implements DTMF event functionality to support sending of DTMF event codes via the RTP channel. Inheritance object AudioSourceBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class AudioSourceBase Constructors | Edit this page View Source AudioSourceBase(MediaDescription, IAudioEncoder, RtpChannel, HighResolutionTimer) Constructor Declaration public AudioSourceBase(MediaDescription AnsweredMediaDescription, IAudioEncoder Encoder, RtpChannel rtpChannel, HighResolutionTimer HiResTimer) Parameters Type Name Description MediaDescription AnsweredMediaDescription The MediaDescription that was sent in response to the offered MediaDescription. Contains the negotiated encoding type and payload information. IAudioEncoder Encoder Audio encoder to use RtpChannel rtpChannel Channel to send the generated audio data on. HighResolutionTimer HiResTimer High resolution timer to use. If null, then a low resolution timer (System.Threading.Timer) will be used. Fields | Edit this page View Source AudioSourceState Stores the current state of the audio source. Declaration protected AudioSourceBase.AudioSourceStateEnum AudioSourceState Field Value Type Description AudioSourceBase.AudioSourceStateEnum | Edit this page View Source SampleRate The sample rate in samples per second of the audio source Declaration protected int SampleRate Field Value Type Description int Methods | Edit this page View Source GetNextAudioSamples(short[]) Gets the next 16-bit linear PCM raw samples to send. This base class generates silence. Declaration protected virtual void GetNextAudioSamples(short[] Samples) Parameters Type Name Description short[] Samples Destination of 16-bit linear PCM audio. | Edit this page View Source GetSequenceNumberAndTimestamp(out ushort, out uint) Gets the RTP packet SEQ number and Timestamp fields to use for the next audio when changing audio sources for the RtpChannel. Call this method after calling the Stop() or the Pause() methods. Declaration public void GetSequenceNumberAndTimestamp(out ushort SequenceNumber, out uint Timestamp) Parameters Type Name Description ushort SequenceNumber Next SEQ number to use uint Timestamp Next Timestamp to use | Edit this page View Source Pause() Pauses transmission of RTP packets. Declaration public virtual void Pause() | Edit this page View Source Resume() Resumes generation and transmission of RTP packets. Declaration public virtual void Resume() | Edit this page View Source SendDtmfEvent(DtmfEventEnum) Sends a DTMF event. This event sends a single DTMF event. The event length is 80 ms and three end packets are sent. This class does not ensure the minimum inter-digit gap of 40 ms so the application is responsible for doing this. Ensuring the minimum inter-digit gap is not an issue because DTMF digits are typically sent by a user by typing them on a keypad. Declaration public void SendDtmfEvent(DtmfEventEnum dtmfEvent) Parameters Type Name Description DtmfEventEnum dtmfEvent Event to send. | Edit this page View Source SetSequenceNumberAndTimestamp(ushort, uint) Sets the RTP packet SEQ number and Timestamp to start with when switching from another audio source. Call this method before calling the Start() or the Resume() methods. Declaration public void SetSequenceNumberAndTimestamp(ushort SequenceNumber, uint Timestamp) Parameters Type Name Description ushort SequenceNumber The SEQ number from the previous audio source uint Timestamp The Timestamp from the previous audio source | Edit this page View Source Start() Starts the generation and transmission of RTP packets containing audio data. Declaration public virtual void Start() | Edit this page View Source Stop() Stops the audio source. This audio source cannot be used after calling this method. Declaration public virtual void Stop()"
  },
  "api/SipLib.Media.Band.html": {
    "href": "api/SipLib.Media.Band.html",
    "title": "Class Band",
    "keywords": "Class Band Band data for G722 Codec Inheritance object Band Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class Band Fields | Edit this page View Source a a Declaration public int[] a Field Value Type Description int[] | Edit this page View Source ap ap Declaration public int[] ap Field Value Type Description int[] | Edit this page View Source b b Declaration public int[] b Field Value Type Description int[] | Edit this page View Source bp bp Declaration public int[] bp Field Value Type Description int[] | Edit this page View Source d d Declaration public int[] d Field Value Type Description int[] | Edit this page View Source det det Declaration public int det Field Value Type Description int | Edit this page View Source nb nb Declaration public int nb Field Value Type Description int | Edit this page View Source p p Declaration public int[] p Field Value Type Description int[] | Edit this page View Source r r Declaration public int[] r Field Value Type Description int[] | Edit this page View Source s s Declaration public int s Field Value Type Description int | Edit this page View Source sg sg Declaration public int[] sg Field Value Type Description int[] | Edit this page View Source sp sp Declaration public int sp Field Value Type Description int | Edit this page View Source sz sz Declaration public int sz Field Value Type Description int"
  },
  "api/SipLib.Media.FileAudioSource.html": {
    "href": "api/SipLib.Media.FileAudioSource.html",
    "title": "Class FileAudioSource",
    "keywords": "Class FileAudioSource Class for sending audio samples that have been read from a wave file. Inheritance object FileAudioSource Implements IAudioSampleSource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class FileAudioSource : IAudioSampleSource Constructors | Edit this page View Source FileAudioSource(AudioSampleData, HighResolutionTimer?) Constructor. Declaration public FileAudioSource(AudioSampleData audioSampleData, HighResolutionTimer? highResolutionTimer) Parameters Type Name Description AudioSampleData audioSampleData Contains the audio samples to send as read from a wave file. HighResolutionTimer highResolutionTimer High resolution timer to use. If null, then a low resolution timer (System.Threading.Timer) will be used. Methods | Edit this page View Source Start() Starts the timer for sending audio samples. Declaration public void Start() | Edit this page View Source Stop() Stops the timer. No samples will be sent after this method returns. Declaration public void Stop() Events | Edit this page View Source AudioSamplesReady This event is fired every 20 milliseonds to provide an audio source with a new RTP block's worth of audio samples to send. Declaration public event AudioSamplesReadyDelegate? AudioSamplesReady Event Type Type Description AudioSamplesReadyDelegate Implements IAudioSampleSource"
  },
  "api/SipLib.Media.G722Codec.html": {
    "href": "api/SipLib.Media.G722Codec.html",
    "title": "Class G722Codec",
    "keywords": "Class G722Codec SpanDSP - a series of DSP components for telephony g722_decode.c - The ITU G.722 codec, decode part. Written by Steve Underwood <steveu@coppice.org&gt; Copyright (C) 2005 Steve Underwood Ported to C# by Mark Heath 2011 Despite my general liking of the GPL, I place my own contributions to this code in the public domain for the benefit of all mankind - even the slimy ones who might try to proprietize my work and use it to my detriment. Based in part on a single channel G.722 codec which is: Copyright (c) CMU 1993 Computer Science, Speech Group Chengxiang Lu and Alex Hauptmann Inheritance object G722Codec Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class G722Codec Methods | Edit this page View Source Decode(G722CodecState, short[], byte[], int) Decodes a buffer of G722 Declaration public int Decode(G722CodecState state, short[] outputBuffer, byte[] inputG722Data, int inputLength) Parameters Type Name Description G722CodecState state Codec state short[] outputBuffer Output buffer (to contain decompressed PCM samples) byte[] inputG722Data int inputLength Number of bytes in input G722 data to decode Returns Type Description int Number of samples written into output buffer | Edit this page View Source Encode(G722CodecState, byte[], short[], int) Encodes a buffer of G722 Declaration public int Encode(G722CodecState state, byte[] outputBuffer, short[] inputBuffer, int inputBufferCount) Parameters Type Name Description G722CodecState state Codec state byte[] outputBuffer Output buffer (to contain encoded G722) short[] inputBuffer PCM 16 bit samples to encode int inputBufferCount Number of samples in the input buffer to encode Returns Type Description int Number of encoded bytes written into output buffer"
  },
  "api/SipLib.Media.G722CodecState.html": {
    "href": "api/SipLib.Media.G722CodecState.html",
    "title": "Class G722CodecState",
    "keywords": "Class G722CodecState Stores state to be used between calls to Encode or Decode Inheritance object G722CodecState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class G722CodecState Constructors | Edit this page View Source G722CodecState(int, G722Flags) Creates a new instance of G722 Codec State for a new encode or decode session Declaration public G722CodecState(int rate, G722Flags options) Parameters Type Name Description int rate Bitrate (typically 64000) G722Flags options Special options Properties | Edit this page View Source Band Band Declaration public Band[] Band { get; } Property Value Type Description Band[] | Edit this page View Source BitsPerSample Bits Per Sample 6 for 48000kbps, 7 for 56000kbps, or 8 for 64000kbps. Declaration public int BitsPerSample { get; } Property Value Type Description int | Edit this page View Source EncodeFrom8000Hz 8kHz Sampling TRUE if encode from 8k samples/second Declaration public bool EncodeFrom8000Hz { get; } Property Value Type Description bool | Edit this page View Source InBits Number of bits in InBuffer Declaration public int InBits { get; } Property Value Type Description int | Edit this page View Source InBuffer In bit buffer Declaration public uint InBuffer { get; } Property Value Type Description uint | Edit this page View Source ItuTestMode ITU Test Mode TRUE if the operating in the special ITU test mode, with the band split filters disabled. Declaration public bool ItuTestMode { get; set; } Property Value Type Description bool | Edit this page View Source OutBits Number of bits in OutBuffer Declaration public int OutBits { get; } Property Value Type Description int | Edit this page View Source OutBuffer Out bit buffer Declaration public uint OutBuffer { get; } Property Value Type Description uint | Edit this page View Source Packed TRUE if the G.722 data is packed Declaration public bool Packed { get; } Property Value Type Description bool | Edit this page View Source QmfSignalHistory Signal history for the QMF (x) Declaration public int[] QmfSignalHistory { get; } Property Value Type Description int[]"
  },
  "api/SipLib.Media.G722Decoder.html": {
    "href": "api/SipLib.Media.G722Decoder.html",
    "title": "Class G722Decoder",
    "keywords": "Class G722Decoder Class for decoding G.722 encoded data into linear 16-bit PCM samples. Inheritance object G722Decoder Implements IAudioDecoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class G722Decoder : IAudioDecoder Constructors | Edit this page View Source G722Decoder() Constructor Declaration public G722Decoder() Properties | Edit this page View Source SampleRate Gets the sample rate in samples/second. Declaration public int SampleRate { get; } Property Value Type Description int Methods | Edit this page View Source CloseDecoder() Closes the decoder. Not necessary for G.722 Declaration public void CloseDecoder() | Edit this page View Source Decode(byte[]) Decodes the input byte array containing G.722 encoded data and returns an array of audio samples. Declaration public short[] Decode(byte[] EncodedData) Parameters Type Name Description byte[] EncodedData Input data to decode Returns Type Description short[] Returns an array of linear 16-bit PCM audio data. Implements IAudioDecoder"
  },
  "api/SipLib.Media.G722Encoder.html": {
    "href": "api/SipLib.Media.G722Encoder.html",
    "title": "Class G722Encoder",
    "keywords": "Class G722Encoder Class for encoding audio samples using a G.722 encoder. Inheritance object G722Encoder Implements IAudioEncoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class G722Encoder : IAudioEncoder Constructors | Edit this page View Source G722Encoder() Constructor Declaration public G722Encoder() Properties | Edit this page View Source ClockRate Gets the clock rate Declaration public int ClockRate { get; } Property Value Type Description int | Edit this page View Source SampleRate Gets the sample rate in samples/second Declaration public int SampleRate { get; } Property Value Type Description int Methods | Edit this page View Source CloseEncoder() Closes the encoder Declaration public void CloseEncoder() | Edit this page View Source Encode(short[]) Declaration public byte[] Encode(short[] InputSamples) Parameters Type Name Description short[] InputSamples Returns Type Description byte[] Implements IAudioEncoder"
  },
  "api/SipLib.Media.G722Flags.html": {
    "href": "api/SipLib.Media.G722Flags.html",
    "title": "Enum G722Flags",
    "keywords": "Enum G722Flags G722 Flags Namespace: SipLib.Media Assembly: SipLib.dll Syntax [Flags] public enum G722Flags Fields Name Description None None Packed Packed SampleRate8000 Using a G722 sample rate of 8000"
  },
  "api/SipLib.Media.HighResolutionTimer.html": {
    "href": "api/SipLib.Media.HighResolutionTimer.html",
    "title": "Class HighResolutionTimer",
    "keywords": "Class HighResolutionTimer This class implements a high resolution periodic timer for generating media samples. It provides a timer that uses a dedicated thread and is capable of providing timed events with a maximum jitter of less than a millisecond and an average jitter of less that 0.1 milliseconds. An instance of this class may be used for multiple media sources. Inheritance object HighResolutionTimer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class HighResolutionTimer Constructors | Edit this page View Source HighResolutionTimer(double) Constructor. Declaration public HighResolutionTimer(double timerPeriodMs) Parameters Type Name Description double timerPeriodMs Timer period in milliseconds. Typically 20 ms for audio sources and 33.3 milliseconds for video sources. Methods | Edit this page View Source Start() Starts the timer. Declaration public void Start() | Edit this page View Source Stop() Stops the timer. Do not call Start() after Stop() is called. Declaration public void Stop() Events | Edit this page View Source TimerExpired Event that is fired when the timer expires. Declaration public event HighResolutionTimerDelegate? TimerExpired Event Type Type Description HighResolutionTimerDelegate"
  },
  "api/SipLib.Media.HighResolutionTimerDelegate.html": {
    "href": "api/SipLib.Media.HighResolutionTimerDelegate.html",
    "title": "Delegate HighResolutionTimerDelegate",
    "keywords": "Delegate HighResolutionTimerDelegate Delegate type for the TimerExpired event of the HighResolutionTimer class. Namespace: SipLib.Media Assembly: SipLib.dll Syntax public delegate void HighResolutionTimerDelegate()"
  },
  "api/SipLib.Media.IAudioDecoder.html": {
    "href": "api/SipLib.Media.IAudioDecoder.html",
    "title": "Interface IAudioDecoder",
    "keywords": "Interface IAudioDecoder Interface definition for an audio decoder Namespace: SipLib.Media Assembly: SipLib.dll Syntax public interface IAudioDecoder Properties | Edit this page View Source SampleRate Gets the sample rate in samples/second Declaration int SampleRate { get; } Property Value Type Description int Methods | Edit this page View Source CloseDecoder() Closes the decoder so that it can release any memory or resources it has been using. Declaration void CloseDecoder() | Edit this page View Source Decode(byte[]) Decodes the input byte array into array of 16-bit PCMU audio samples. Declaration short[] Decode(byte[] EncodedData) Parameters Type Name Description byte[] EncodedData Input array of encoded audio from the payload of an RTP packet Returns Type Description short[] Returns an array of linear 16-bit PCMU samples. Returns null if an error occurred."
  },
  "api/SipLib.Media.IAudioEncoder.html": {
    "href": "api/SipLib.Media.IAudioEncoder.html",
    "title": "Interface IAudioEncoder",
    "keywords": "Interface IAudioEncoder Interface definition for an audio encoder Namespace: SipLib.Media Assembly: SipLib.dll Syntax public interface IAudioEncoder Properties | Edit this page View Source ClockRate Gets the clock rate (samples/second) Declaration int ClockRate { get; } Property Value Type Description int | Edit this page View Source SampleRate Gets the sample rate in samples/second. Declaration int SampleRate { get; } Property Value Type Description int Methods | Edit this page View Source CloseEncoder() Closes the encoder so that it can release any memory or resources it has been using. Declaration void CloseEncoder() | Edit this page View Source Encode(short[]) Encodes an input sample array of 16-bit PCMU audio samples into a byte array that can be sent as the payload of an RTP packet. Declaration byte[] Encode(short[] InputSamples) Parameters Type Name Description short[] InputSamples Input linear 16-bit Mu-Law samples Returns Type Description byte[] Returns an array of encoded sample bytes"
  },
  "api/SipLib.Media.IAudioSampleSource.html": {
    "href": "api/SipLib.Media.IAudioSampleSource.html",
    "title": "Interface IAudioSampleSource",
    "keywords": "Interface IAudioSampleSource Interface that must be implemented for each type of an audio sample source. Namespace: SipLib.Media Assembly: SipLib.dll Syntax public interface IAudioSampleSource Methods | Edit this page View Source Start() Tells the audio sample source to start sending audio samples by firing the AudioSamplesReady event. Declaration void Start() | Edit this page View Source Stop() Tells the audio sample source to stop sending audio samples. Declaration void Stop() Events | Edit this page View Source AudioSamplesReady This event is fired when a new block of 20 milliseconds worth of audio samples is available. Declaration event AudioSamplesReadyDelegate AudioSamplesReady Event Type Type Description AudioSamplesReadyDelegate"
  },
  "api/SipLib.Media.MediaPortManager.html": {
    "href": "api/SipLib.Media.MediaPortManager.html",
    "title": "Class MediaPortManager",
    "keywords": "Class MediaPortManager Class for managing allocation of UDP and TCP ports for audio, video, RTT and MSRP media. Inheritance object MediaPortManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class MediaPortManager Constructors | Edit this page View Source MediaPortManager(MediaPortSettings) Constructor Declaration public MediaPortManager(MediaPortSettings settings) Parameters Type Name Description MediaPortSettings settings Media port range allocations for each type of media. Properties | Edit this page View Source NextAudioPort Gets the next port to use for audio media. The return value is for audio media. The return value + 1 may be used for RTCP for the audio stream. Declaration public int NextAudioPort { get; } Property Value Type Description int | Edit this page View Source NextMsrpPort Gets the next port to use for MSRP media. RTCP is not used for MSRP so only the return value may be used for the MSRP media. Declaration public int NextMsrpPort { get; } Property Value Type Description int | Edit this page View Source NextRttPort Gets the next port to use for RTT media. The return value is for RTT media. The return value + 1 may be used for RTCP for the RTT stream. Declaration public int NextRttPort { get; } Property Value Type Description int | Edit this page View Source NextVideoPort Gets the next port to use for video media. The return value is for video media. The return value + 1 may be used for RTCP for the video stream. Declaration public int NextVideoPort { get; } Property Value Type Description int"
  },
  "api/SipLib.Media.MediaPortSettings.html": {
    "href": "api/SipLib.Media.MediaPortSettings.html",
    "title": "Class MediaPortSettings",
    "keywords": "Class MediaPortSettings Stores the media port ranges for each media type. Inheritance object MediaPortSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class MediaPortSettings Constructors | Edit this page View Source MediaPortSettings() Constructor. Sets up come defaults. Declaration public MediaPortSettings() Properties | Edit this page View Source AudioPorts Port range for audio Declaration public PortRange AudioPorts { get; set; } Property Value Type Description PortRange | Edit this page View Source MsrpPorts Port range for Message Session Relay Protocol (MSRP) Declaration public PortRange MsrpPorts { get; set; } Property Value Type Description PortRange | Edit this page View Source RttPorts Port range for Real Time Text (RTT) Declaration public PortRange RttPorts { get; set; } Property Value Type Description PortRange | Edit this page View Source VideoPorts Port range for video Declaration public PortRange VideoPorts { get; set; } Property Value Type Description PortRange"
  },
  "api/SipLib.Media.MuLawDecoder.html": {
    "href": "api/SipLib.Media.MuLawDecoder.html",
    "title": "Class MuLawDecoder",
    "keywords": "Class MuLawDecoder mu-law decoder based on code from: http://hazelware.luggle.com/tutorials/mulawcompression.html Inheritance object MuLawDecoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public static class MuLawDecoder Methods | Edit this page View Source MuLawToLinearSample(byte) Converts a mu-law encoded byte to a 16 bit linear sample Declaration public static short MuLawToLinearSample(byte muLaw) Parameters Type Name Description byte muLaw mu-law encoded byte Returns Type Description short Linear sample"
  },
  "api/SipLib.Media.MuLawEncoder.html": {
    "href": "api/SipLib.Media.MuLawEncoder.html",
    "title": "Class MuLawEncoder",
    "keywords": "Class MuLawEncoder mu-law encoder based on code from: http://hazelware.luggle.com/tutorials/mulawcompression.html Inheritance object MuLawEncoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public static class MuLawEncoder Methods | Edit this page View Source LinearToMuLawSample(short) Encodes a single 16 bit sample to mu-law Declaration public static byte LinearToMuLawSample(short sample) Parameters Type Name Description short sample 16 bit PCM sample Returns Type Description byte mu-law encoded byte"
  },
  "api/SipLib.Media.PcmaDecoder.html": {
    "href": "api/SipLib.Media.PcmaDecoder.html",
    "title": "Class PcmaDecoder",
    "keywords": "Class PcmaDecoder Class for decoding PCMA (A-Law) encoded data into linear 16-bit PCM samples. Inheritance object PcmaDecoder Implements IAudioDecoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class PcmaDecoder : IAudioDecoder Properties | Edit this page View Source SampleRate Gets the sample rate in samples/second. Declaration public int SampleRate { get; } Property Value Type Description int Methods | Edit this page View Source CloseDecoder() Closes the decoder. Not necessary for PCMA (A-Law) Declaration public void CloseDecoder() | Edit this page View Source Decode(byte[]) Decodes the input byte array containing PCMA (A-Law) data and returns an array of audio samples. Declaration public short[] Decode(byte[] EncodedData) Parameters Type Name Description byte[] EncodedData Input data to decode Returns Type Description short[] Returns an array of linear 16-bit PCM audio data. Implements IAudioDecoder"
  },
  "api/SipLib.Media.PcmaEncoder.html": {
    "href": "api/SipLib.Media.PcmaEncoder.html",
    "title": "Class PcmaEncoder",
    "keywords": "Class PcmaEncoder Class for encoding linear 16-bit PCM samples into PCMA (G.711 A-Law) samples Inheritance object PcmaEncoder Implements IAudioEncoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class PcmaEncoder : IAudioEncoder Properties | Edit this page View Source ClockRate Gets the RTP clock rate in samples/second Declaration public int ClockRate { get; } Property Value Type Description int | Edit this page View Source SampleRate Gets the sample rate in samples/second Declaration public int SampleRate { get; } Property Value Type Description int Methods | Edit this page View Source CloseEncoder() Closes the encoder so that it can release any memory or resources it has been using. Declaration public void CloseEncoder() | Edit this page View Source Encode(short[]) Encodes linear 16-bit PCM samples into PCMA (G.711 A-Law) samples Declaration public byte[] Encode(short[] InputSamples) Parameters Type Name Description short[] InputSamples Input linear 16-bit Mu-Law samples Returns Type Description byte[] Returns a byte array containing the encoded input samples Implements IAudioEncoder"
  },
  "api/SipLib.Media.PcmuDecoder.html": {
    "href": "api/SipLib.Media.PcmuDecoder.html",
    "title": "Class PcmuDecoder",
    "keywords": "Class PcmuDecoder Class for decoding PCMU (Mu-Law) encoded data into linear 16-bit PCM samples. Inheritance object PcmuDecoder Implements IAudioDecoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class PcmuDecoder : IAudioDecoder Properties | Edit this page View Source SampleRate Gets the sample rate in samples/second. Declaration public int SampleRate { get; } Property Value Type Description int Methods | Edit this page View Source CloseDecoder() Closes the decoder. Not necessary for PCMU (Mu-Law) Declaration public void CloseDecoder() | Edit this page View Source Decode(byte[]) Decodes the input byte array containing PCMU (Mu-Law) data and returns an array of audio samples. Declaration public short[] Decode(byte[] EncodedData) Parameters Type Name Description byte[] EncodedData Input data to decode Returns Type Description short[] Returns an array of linear 16-bit PCM audio data. Implements IAudioDecoder"
  },
  "api/SipLib.Media.PcmuEncoder.html": {
    "href": "api/SipLib.Media.PcmuEncoder.html",
    "title": "Class PcmuEncoder",
    "keywords": "Class PcmuEncoder Class for encoding linear 16-bit PCM samples into PCMU (G.711 Mu-Law) samples Inheritance object PcmuEncoder Implements IAudioEncoder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class PcmuEncoder : IAudioEncoder Properties | Edit this page View Source ClockRate Gets the RTP clock rate in samples/second Declaration public int ClockRate { get; } Property Value Type Description int | Edit this page View Source SampleRate Gets the sample rate in samples/second Declaration public int SampleRate { get; } Property Value Type Description int Methods | Edit this page View Source CloseEncoder() Closes the encoder so that it can release any memory or resources it has been using. Declaration public void CloseEncoder() | Edit this page View Source Encode(short[]) Encodes linear 16-bit PCM samples into PCMU (G.711 Mu-Law) samples Declaration public byte[] Encode(short[] InputSamples) Parameters Type Name Description short[] InputSamples Input linear 16-bit Mu-Law samples Returns Type Description byte[] Implements IAudioEncoder"
  },
  "api/SipLib.Media.PortRange.html": {
    "href": "api/SipLib.Media.PortRange.html",
    "title": "Class PortRange",
    "keywords": "Class PortRange Stores the port range for a single media type Inheritance object PortRange Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Media Assembly: SipLib.dll Syntax public class PortRange Constructors | Edit this page View Source PortRange() Constructor Declaration public PortRange() Properties | Edit this page View Source Count Number of ports to allocate Declaration public int Count { get; set; } Property Value Type Description int | Edit this page View Source StartPort Starting port number Declaration public int StartPort { get; set; } Property Value Type Description int"
  },
  "api/SipLib.Media.html": {
    "href": "api/SipLib.Media.html",
    "title": "Namespace SipLib.Media",
    "keywords": "Namespace SipLib.Media Classes for encoding and decoding audio. The supported codecs are G.711 Mu-Law, G.711 A-Law and G.722. Classes ALawDecoder a-law decoder based on code from: http://hazelware.luggle.com/tutorials/mulawcompression.html ALawEncoder A-law encoder AudioDestination This class receives audio RTP packets from an RtpChannel, decodes them and sends them to an audio destination by calling a delegate function that processes the received audio samples. AudioSampleData Data class for passing audio sample data to an audio sample source AudioSource Class for sending sourced audio (from a microphone or a recording) to a remote endpoint via RTP packets over an RtpChannel. Band Band data for G722 Codec FileAudioSource Class for sending audio samples that have been read from a wave file. G722Codec SpanDSP - a series of DSP components for telephony g722_decode.c - The ITU G.722 codec, decode part. Written by Steve Underwood <steveu@coppice.org&gt; Copyright (C) 2005 Steve Underwood Ported to C# by Mark Heath 2011 Despite my general liking of the GPL, I place my own contributions to this code in the public domain for the benefit of all mankind - even the slimy ones who might try to proprietize my work and use it to my detriment. Based in part on a single channel G.722 codec which is: Copyright (c) CMU 1993 Computer Science, Speech Group Chengxiang Lu and Alex Hauptmann G722CodecState Stores state to be used between calls to Encode or Decode G722Decoder Class for decoding G.722 encoded data into linear 16-bit PCM samples. G722Encoder Class for encoding audio samples using a G.722 encoder. HighResolutionTimer This class implements a high resolution periodic timer for generating media samples. It provides a timer that uses a dedicated thread and is capable of providing timed events with a maximum jitter of less than a millisecond and an average jitter of less that 0.1 milliseconds. An instance of this class may be used for multiple media sources. MediaPortManager Class for managing allocation of UDP and TCP ports for audio, video, RTT and MSRP media. MediaPortSettings Stores the media port ranges for each media type. MuLawDecoder mu-law decoder based on code from: http://hazelware.luggle.com/tutorials/mulawcompression.html MuLawEncoder mu-law encoder based on code from: http://hazelware.luggle.com/tutorials/mulawcompression.html PcmaDecoder Class for decoding PCMA (A-Law) encoded data into linear 16-bit PCM samples. PcmaEncoder Class for encoding linear 16-bit PCM samples into PCMA (G.711 A-Law) samples PcmuDecoder Class for decoding PCMU (Mu-Law) encoded data into linear 16-bit PCM samples. PcmuEncoder Class for encoding linear 16-bit PCM samples into PCMU (G.711 Mu-Law) samples PortRange Stores the port range for a single media type Interfaces IAudioDecoder Interface definition for an audio decoder IAudioEncoder Interface definition for an audio encoder IAudioSampleSource Interface that must be implemented for each type of an audio sample source. Enums G722Flags G722 Flags Delegates AudioDestinationDelegate Delegate function for the audio destination handler function that the AudioDestination class will call to process decoded audio packets. AudioSamplesReadyDelegate Delegate definition for the AudioSamplesReady event of the IAudioSamplesSource interface. HighResolutionTimerDelegate Delegate type for the TimerExpired event of the HighResolutionTimer class."
  },
  "api/SipLib.Msrp.ByteRangeHeader.html": {
    "href": "api/SipLib.Msrp.ByteRangeHeader.html",
    "title": "Class ByteRangeHeader",
    "keywords": "Class ByteRangeHeader Class for parsing and processing the Byte-Range header of a MSRP message. See RFC 4975. Inheritance object ByteRangeHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Msrp Assembly: SipLib.dll Syntax public class ByteRangeHeader Constructors | Edit this page View Source ByteRangeHeader() Constructor Declaration public ByteRangeHeader() Fields | Edit this page View Source End Ending byte number. A value of -1 indicates that the ending byte number is not specified -- its string value is \"*\". Declaration public int End Field Value Type Description int | Edit this page View Source Start Starting byte number. Declaration public int Start Field Value Type Description int | Edit this page View Source Total Total number of bytes in the MSRP message. A value of -1 indicates that the total number of bytes is not specified -- its string value \"*\". Declaration public int Total Field Value Type Description int Methods | Edit this page View Source ParseByteRangeHeader(string) Parses a string into a ByteRangeHeader object. Declaration public static ByteRangeHeader? ParseByteRangeHeader(string strValue) Parameters Type Name Description string strValue Input value of the Byte-Range header Returns Type Description ByteRangeHeader Returns a new ByteRangeHeader object. Returns null if the input string is not a properly formatted Byte-Range header. | Edit this page View Source ToString() Builds a Byte-Range header value as a string Declaration public override string ToString() Returns Type Description string Returns the fully formatted Byte-Range header. Overrides object.ToString()"
  },
  "api/SipLib.Msrp.CpimMessage.html": {
    "href": "api/SipLib.Msrp.CpimMessage.html",
    "title": "Class CpimMessage",
    "keywords": "Class CpimMessage Class for Common Profile for Instant Messaging (CPIM) messages defined by RFC 3862. CPIM messages are not used in standalone manner in NG9-1-1 applications. They are always encapsulated in MSRP messages. Inheritance object CpimMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Msrp Assembly: SipLib.dll Syntax public class CpimMessage Constructors | Edit this page View Source CpimMessage() Default constructor Declaration public CpimMessage() Fields | Edit this page View Source NS Gets or sets the list of Name Space (NS) headers. Optional. Initialized to an empty string. NS headers are not used in this implementation and are treated as simple strings. Declaration public List<string> NS Field Value Type Description List<string> | Edit this page View Source NonStandardHeaders Stores unknown or non-standard headers lines (header: headervalue). Initialized to an empty list. Declaration public List<string> NonStandardHeaders Field Value Type Description List<string> Properties | Edit this page View Source Body Gets or sets the contents (body) of the message. Declaration public byte[]? Body { get; set; } Property Value Type Description byte[] | Edit this page View Source ContentID Gets or set the Content-ID header value. Optional. Declaration public string? ContentID { get; set; } Property Value Type Description string | Edit this page View Source ContentType Gets or sets the Content-Type header value. Required. Must be set to a valid MIME type such as text/plain. Declaration public string? ContentType { get; set; } Property Value Type Description string | Edit this page View Source DateTime Gets or sets the value of the DateTime header field. Optional. A value of DateTime.MinValue indicates that the DateTime header is not present. Declaration public DateTime DateTime { get; set; } Property Value Type Description DateTime | Edit this page View Source From Gets or sets the From header. Required. Declaration public SIPUserField? From { get; set; } Property Value Type Description SIPUserField | Edit this page View Source Require Gets or sets the value of the Require header field. Optional. Declaration public string? Require { get; set; } Property Value Type Description string | Edit this page View Source Subject Gets or sets the a list of Subject header values. Optional. Initialized to an empty list. Declaration public List<string> Subject { get; set; } Property Value Type Description List<string> | Edit this page View Source To Gets or sets a list of To header fields. Initialized to an empty list. The list must contain at least one To header Declaration public List<SIPUserField> To { get; set; } Property Value Type Description List<SIPUserField> | Edit this page View Source cc Gets or sets the list of cc header fields. Initialized to an empty list. cc headers are optional. Declaration public List<SIPUserField> cc { get; set; } Property Value Type Description List<SIPUserField> Methods | Edit this page View Source ParseCpimBytes(byte[]) Parses a CPIM message contained in a byte array. Declaration public static CpimMessage? ParseCpimBytes(byte[] cpimBytes) Parameters Type Name Description byte[] cpimBytes Input message Returns Type Description CpimMessage Returns a new CpimMessage object if successful or null is a parsing error occurred | Edit this page View Source ToByteArray() Converts this object into a byte array so that it may be encapsulated in a MSRP message. Declaration public byte[] ToByteArray() Returns Type Description byte[] Returns a UTF8 encoded byte array."
  },
  "api/SipLib.Msrp.MsrpCompletionStatus.html": {
    "href": "api/SipLib.Msrp.MsrpCompletionStatus.html",
    "title": "Enum MsrpCompletionStatus",
    "keywords": "Enum MsrpCompletionStatus Enumeration that defines the possible status conditions for a single MSRP message. Namespace: SipLib.Msrp Assembly: SipLib.dll Syntax public enum MsrpCompletionStatus Fields Name Description Complete The transaction message contains the complete message or is the last MSRP message in a collection of message chunks. The end line of the message ended with a \"$\" character. Continuation The transaction message contains only a chunk of the an entire MSRP message. The end line of the message ended with a \"+\" character. Truncated The message contains contents that were truncated by the sender. The end line of the message ended with a \"#\" character Unknown The status of the message unknown because the transaction message is not properly terminated."
  },
  "api/SipLib.Msrp.MsrpConnection.html": {
    "href": "api/SipLib.Msrp.MsrpConnection.html",
    "title": "Class MsrpConnection",
    "keywords": "Class MsrpConnection Class for managing a single MSRP connection to either a remote server or from a remote client. Inheritance object MsrpConnection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Msrp Assembly: SipLib.dll Syntax public class MsrpConnection Properties | Edit this page View Source ConnectionIsPassive Returns true if the connection is passive, i.e., this end is the server and listening for connection requests. Returns false if this end of the connection is the client. Declaration public bool ConnectionIsPassive { get; } Property Value Type Description bool | Edit this page View Source MaxMsrpMessageLength Gets or sets the maximum MSRP message transaction (chunk) length for receiving long MSRP messages. This represents the absolute maximum of a single MSRP SEND request message chunk, not the maximum size of a MSRP message that is properly chunked. The setter for this property must be called before calling the Start() method. This property does not affect the maximum MSRP message length if a sender follows the chunking rules set forth in RFC 4975. The minimum value for this property is 3000 (this allows for 2048 byte contents plus a few hundred bytes for the MSRP message headers. The default value of this property is 10000 bytes. Declaration public int MaxMsrpMessageLength { get; set; } Property Value Type Description int Remarks According to RFC 4975, MSRP message senders must split messages where the body of the message is greater than 2048 bytes into chunks containing 2048 byte blocks so it is not necessary to set this property. The only time that setting this property is necessary is if a remote MSRP endpoint does not follow the rules for message chunking and is expected to send large messages that may contain images or video recordings. Methods | Edit this page View Source CreateAsClient(MsrpUri, MsrpUri, X509Certificate2) Creates a client MsrpConnection object. Call this method to create a client that connects to a remote endpoint that listens as a server. After calling this method, hook the events and then call the Start() method when ready to connect. Declaration public static MsrpConnection CreateAsClient(MsrpUri LocalMsrpUri, MsrpUri RemoteMsrpUri, X509Certificate2 LocalCert) Parameters Type Name Description MsrpUri LocalMsrpUri MsrpUri of the local endpoint. The host portion of the URI must be a valid IPEndPoint object. MsrpUri RemoteMsrpUri MsrpUri of the remote endpoint to connect to. The host portion of the URI must be a valid IPEndPoint. X509Certificate2 LocalCert X.509 certificate to use for MSRP over TLS (MSRPS) for optional mutual authentication as a client. Optional. May be null is not using MSRP over TLS. Returns Type Description MsrpConnection Returns a new MsrpConnection object. | Edit this page View Source CreateAsServer(MsrpUri, MsrpUri, X509Certificate2) Creates a new MsrpConnection object that listens for MSRP connection requests as a server. After calling this method, hook the events and then call the Start() method. Declaration public static MsrpConnection CreateAsServer(MsrpUri LocalMsrpUri, MsrpUri RemoteMsrpUri, X509Certificate2 LocalCert) Parameters Type Name Description MsrpUri LocalMsrpUri Specifies the MsrpUri that the server listens on. The host portion of the URI must be a valid IPEndPoint. MsrpUri RemoteMsrpUri Specifies the MsrpUri that the remote client will be connecting from. The host portion of the URI must be a valid IPEndPoint. X509Certificate2 LocalCert X.509 certificate to use. Required if using MSRP over TLS (MSRPS). May be null if using MSRP over TCP. Returns Type Description MsrpConnection Returns a new MsrpConnection object. | Edit this page View Source CreateFromSdp(Sdp, MediaDescription, Sdp, MediaDescription, bool, X509Certificate2) Creates a MsrpConnection from the offered and answered SDP. Declaration public static (MsrpConnection?, string?) CreateFromSdp(Sdp OfferedSdp, MediaDescription OfferedMd, Sdp AnsweredSdp, MediaDescription AnsweredMd, bool IsIncoming, X509Certificate2 LocalCert) Parameters Type Name Description Sdp OfferedSdp The offered SDP from the INVITE request. MediaDescription OfferedMd The offered MediaDescription for MSRP (\"message\") media Sdp AnsweredSdp The answered SDP from the OK response. MediaDescription AnsweredMd The answered MediaDescription for MSRP (\"message\") media bool IsIncoming If true then its an incoming call. Else its an outgoing call X509Certificate2 LocalCert X.509 certificate to use for MSRP over TLS (MSRPS) Returns Type Description (MsrpConnection, string) Returns a tuple containing a MsrpConnection object and a string. If the returned MsrpConnection object is null, then the will contain an error message explaining why the MsrpConnection could no be created. | Edit this page View Source SendMsrpMessage(string?, byte[]?, string?) Sends an MSRP message to the remote endpoint. The method queues the message for transmission and returns immediately. It does not block. If the length of the message contents is longer than 2048 bytes, then the message is split up into chunks and each message chunk is queued. To send an empty SEND request, set the ContentType and the Contents parameters to null. Declaration public void SendMsrpMessage(string? ContentType, byte[]? Contents, string? messageID = null) Parameters Type Name Description string ContentType Specifies the Content-Type header value for the message. For example: text/plain or message/CPIM. byte[] Contents Binary message contents encoded using UTF8 if the message is text or the un-encode binary contents if sending a non-text message such as a picture or a video file. string messageID If specified, this is the Message-ID header that will be include in the SEND request. This should be a 9 or 10 digit alphanumeric string that identifies the method. This parameter is optional. If pressent then the SEND request will include a Success-Report header with a value of \"yes\" so that the remote endpoint will generate a success report. | Edit this page View Source Shutdown() Call this method to close all network connections. This method must be called when a call ends or if the MSRP session must be ended in case of a re-INVITE request to change the media destination or characteristics. Declaration public void Shutdown() | Edit this page View Source Start() Starts the connection process as a MSRP client or as a MSRP server depending upon the configuration. Declaration public void Start() Events | Edit this page View Source MsrpConnectionEstablished This event is fired when a connection is established with the remote endpoint either as a client or as a server. Declaration public event MsrpConnectionStatusDelegate? MsrpConnectionEstablished Event Type Type Description MsrpConnectionStatusDelegate | Edit this page View Source MsrpConnectionFailed This event is fired if the MsrpConnection object was unable to connect to the remote endpoint as a client. Declaration public event MsrpConnectionStatusDelegate? MsrpConnectionFailed Event Type Type Description MsrpConnectionStatusDelegate | Edit this page View Source MsrpMessageDeliveryFailed This event is fired if the remote endpoint rejected a MSRP message sent by the MsrpConnection object or if there was another problem delivering the message. Declaration public event MsrpMessageDeliveryFailedDelegate? MsrpMessageDeliveryFailed Event Type Type Description MsrpMessageDeliveryFailedDelegate | Edit this page View Source MsrpMessageReceived Event that is fired when a complete MSRP message is received. This event is not fired for empty SEND requests. Declaration public event MsrpMessageReceivedDelegate? MsrpMessageReceived Event Type Type Description MsrpMessageReceivedDelegate | Edit this page View Source ReportReceived Event that is fired when a MSRP REPORT request is received. Declaration public event ReportReceivedDelegate? ReportReceived Event Type Type Description ReportReceivedDelegate"
  },
  "api/SipLib.Msrp.MsrpConnectionStatusDelegate.html": {
    "href": "api/SipLib.Msrp.MsrpConnectionStatusDelegate.html",
    "title": "Delegate MsrpConnectionStatusDelegate",
    "keywords": "Delegate MsrpConnectionStatusDelegate Delegate type for the MsrpConnectionEstablished and the MsrpConnectionFailed events of the MsrpConnection class. Namespace: SipLib.Msrp Assembly: SipLib.dll Syntax public delegate void MsrpConnectionStatusDelegate(bool ConnectionIsPassive, MsrpUri RemoteMsrpUri) Parameters Type Name Description bool ConnectionIsPassive If true then the connection is passive, i.e., the MsrpConnection object is the server. False if the MsrpConnection is the client. MsrpUri RemoteMsrpUri MrspUri of the remote endpoint."
  },
  "api/SipLib.Msrp.MsrpMessage.html": {
    "href": "api/SipLib.Msrp.MsrpMessage.html",
    "title": "Class MsrpMessage",
    "keywords": "Class MsrpMessage Class for MSRP messages. See RFC 4975. Inheritance object MsrpMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Msrp Assembly: SipLib.dll Syntax public class MsrpMessage Constructors | Edit this page View Source MsrpMessage() Constructor Declaration public MsrpMessage() Fields | Edit this page View Source Body Contains the binary byte array containing the message contents. Null indicates that there are no contents for the message. Declaration public byte[]? Body Field Value Type Description byte[] | Edit this page View Source TransactionID Transaction ID for the message; Declaration public string TransactionID Field Value Type Description string Properties | Edit this page View Source ByteRange Byte-Range header. Initialized to a new ByteRangeHeader object. Declaration public ByteRangeHeader ByteRange { get; set; } Property Value Type Description ByteRangeHeader | Edit this page View Source CompletionStatus Gets or sets the completion status for this MSRP message Declaration public MsrpCompletionStatus CompletionStatus { get; set; } Property Value Type Description MsrpCompletionStatus | Edit this page View Source ContentType Content-Type header value. A value of null indicates that there was no Content-Type header in the message. Declaration public string? ContentType { get; set; } Property Value Type Description string | Edit this page View Source FailureReport Failure-Report header value. A value of null indicates that Failure-Report header was not provided. Declaration public string? FailureReport { get; set; } Property Value Type Description string | Edit this page View Source FromPath From-Path header. Initialized to a new MsrpPathHeadr object. Declaration public MsrpPathHeader? FromPath { get; set; } Property Value Type Description MsrpPathHeader | Edit this page View Source MessageID Message-ID header value. Declaration public string? MessageID { get; set; } Property Value Type Description string | Edit this page View Source MessageType Specifies the type of MSRP message Declaration public MsrpMessageType MessageType { get; set; } Property Value Type Description MsrpMessageType | Edit this page View Source RequestLine Request line for the message. This will be null if the MessageType is not MessageType.Request Declaration public string? RequestLine { get; set; } Property Value Type Description string | Edit this page View Source RequestMethod Contains the request methode type (SEND or REPORT) if MessageType == MsrpMessageType.Request. Set to null otherwise. Declaration public string? RequestMethod { get; set; } Property Value Type Description string | Edit this page View Source ResponseCode Response code for the message. Valid if the MessageType is MessageType.Response Declaration public int ResponseCode { get; set; } Property Value Type Description int | Edit this page View Source ResponseText Text or comment describing the ResponseCode. Optional. Declaration public string? ResponseText { get; set; } Property Value Type Description string | Edit this page View Source Status Status header. A null value indicates that a Status header is not present Declaration public MsrpStatusHeader? Status { get; set; } Property Value Type Description MsrpStatusHeader | Edit this page View Source SuccessReport Success-Report header value. A value of null indicates that a Success-Report header was not provided. Declaration public string? SuccessReport { get; set; } Property Value Type Description string | Edit this page View Source ToPath To-Path header. Initialized to a new MsrpPathHeader object. Declaration public MsrpPathHeader? ToPath { get; set; } Property Value Type Description MsrpPathHeader | Edit this page View Source UseNickname Use-Nickname header value. See RFC 7701. This header value contains a quoted (using double quotation marks) nickname. Declaration public string? UseNickname { get; set; } Property Value Type Description string Methods | Edit this page View Source BuildResponseMessage(int, string) Builds a MSRP response message to this message. This message must be a MSRP request message. Declaration public MsrpMessage BuildResponseMessage(int ResponseCode, string ResponseText) Parameters Type Name Description int ResponseCode Response code. For example: 200 string ResponseText Response text. Optional. For example: OK Returns Type Description MsrpMessage Returns a MsrpMessage containing a response that can be sent to the remote end point. | Edit this page View Source FailureReportRequested() Returns true if there is a Failure-Report header and its value is \"yes\" Declaration public bool FailureReportRequested() Returns Type Description bool | Edit this page View Source GetContentType() Gets the value of the Content-Type header value without any parameters Declaration public string? GetContentType() Returns Type Description string Returns the Content-Type header value after removing any header parameters if there are any. Return null if there is no Content-Type header value. | Edit this page View Source NewRandomID() Creates a random string to use as a Session ID or a Transaction ID for MSRP. Declaration public static string NewRandomID() Returns Type Description string Returns the random string. | Edit this page View Source ParseMsrpMessage(byte[]) Parses a MSRP message that was received over a TCP/TLS network connection. Declaration public static MsrpMessage? ParseMsrpMessage(byte[] bytes) Parameters Type Name Description byte[] bytes Bytes of the complete MSRP message or a MSRP message chunk. The byte array includes the end-line. Returns Type Description MsrpMessage Returns a new MsrpMessage object or null if a parsing error occurred. | Edit this page View Source SuccessReportRequested() Returns true if there is a Success-Report header and its value is \"yes\" Declaration public bool SuccessReportRequested() Returns Type Description bool | Edit this page View Source ToByteArray() Converts this object into a byte array so that it can be sent over the TCP/TLS stream. All of the required properties must be set before calling this method. Declaration public byte[] ToByteArray() Returns Type Description byte[] Returns a byte array."
  },
  "api/SipLib.Msrp.MsrpMessageDeliveryFailedDelegate.html": {
    "href": "api/SipLib.Msrp.MsrpMessageDeliveryFailedDelegate.html",
    "title": "Delegate MsrpMessageDeliveryFailedDelegate",
    "keywords": "Delegate MsrpMessageDeliveryFailedDelegate Delegate type for the MsrpMessageDeliveryFailed event of the MsrpConnection class. Namespace: SipLib.Msrp Assembly: SipLib.dll Syntax public delegate void MsrpMessageDeliveryFailedDelegate(MsrpMessage message, MsrpUri remoteMsrpUri, int StatusCode, string StatusText) Parameters Type Name Description MsrpMessage message Message that was sent and rejected by the remote endpoint MsrpUri remoteMsrpUri MsrpUri of the remote endpoint int StatusCode Status code that was returned in the respoinse message. string StatusText Status text that was returned in the response message. May be null."
  },
  "api/SipLib.Msrp.MsrpMessageReceivedDelegate.html": {
    "href": "api/SipLib.Msrp.MsrpMessageReceivedDelegate.html",
    "title": "Delegate MsrpMessageReceivedDelegate",
    "keywords": "Delegate MsrpMessageReceivedDelegate Delegate type for the MsrpMessageReceived event of the MsrpConnection class. Namespace: SipLib.Msrp Assembly: SipLib.dll Syntax public delegate void MsrpMessageReceivedDelegate(string ContentType, byte[] Contents) Parameters Type Name Description string ContentType Value of the Content-Type header minus any header parameters. byte[] Contents Binary contents for this message. If the message was chunked then this array will contain all of the chunks concatenated together."
  },
  "api/SipLib.Msrp.MsrpMessageType.html": {
    "href": "api/SipLib.Msrp.MsrpMessageType.html",
    "title": "Enum MsrpMessageType",
    "keywords": "Enum MsrpMessageType Enumeration for MSRP message types. Namespace: SipLib.Msrp Assembly: SipLib.dll Syntax public enum MsrpMessageType Fields Name Description InvalidMessage Invalid message. Request MSRP request message. Response MSRP response message."
  },
  "api/SipLib.Msrp.MsrpPathHeader.html": {
    "href": "api/SipLib.Msrp.MsrpPathHeader.html",
    "title": "Class MsrpPathHeader",
    "keywords": "Class MsrpPathHeader Class for a MSRP To-Path or a From-Path header value. See RFC 4975. Both the To-Path and the From-Path MSRP message headers can contain multiple MSRP URIs. Inheritance object MsrpPathHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Msrp Assembly: SipLib.dll Syntax public class MsrpPathHeader Constructors | Edit this page View Source MsrpPathHeader() Constructor Declaration public MsrpPathHeader() Fields | Edit this page View Source MsrpUris Contains a list of MsrpUris. Initialized to an empty list. Declaration public List<MsrpUri> MsrpUris Field Value Type Description List<MsrpUri> Methods | Edit this page View Source ParseMsrpPathHeader(string) Parses a To-Path or a From-Path MSRP header value into a new MsrpPathHeader object. Declaration public static MsrpPathHeader? ParseMsrpPathHeader(string HeaderValue) Parameters Type Name Description string HeaderValue Input header string value Returns Type Description MsrpPathHeader Returns a new MsrpPathHeader if successful or null if an error is detected | Edit this page View Source ToString() Converts this MsrpPathHeader object into a header string value Declaration public override string ToString() Returns Type Description string Returns the string value of the header Overrides object.ToString()"
  },
  "api/SipLib.Msrp.MsrpStatusHeader.html": {
    "href": "api/SipLib.Msrp.MsrpStatusHeader.html",
    "title": "Class MsrpStatusHeader",
    "keywords": "Class MsrpStatusHeader Class for the Status header of a MSRP message. See RFC 4975 Inheritance object MsrpStatusHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Msrp Assembly: SipLib.dll Syntax public class MsrpStatusHeader Constructors | Edit this page View Source MsrpStatusHeader() Constructor Declaration public MsrpStatusHeader() Fields | Edit this page View Source Comment Contains the comment field of the Status header. The comment field is optional. A value of null indicates that the comment field is not present. Declaration public string? Comment Field Value Type Description string | Edit this page View Source Namespace Contains the namespace field of the Status header. This should always be \"000\". Declaration public string Namespace Field Value Type Description string | Edit this page View Source StatusCode Contains the status-code field of the Status header. A value of 0 indicates an invalid status. Declaration public int StatusCode Field Value Type Description int Methods | Edit this page View Source ParseStatusHeader(string) Parses a Status header value into a new MsrpStatusHeader object Declaration public static MsrpStatusHeader? ParseStatusHeader(string strValue) Parameters Type Name Description string strValue Input Status header value Returns Type Description MsrpStatusHeader Returns a new MsrpStatusHeader object if successful or null if an error is detected | Edit this page View Source ToString() Converts this object into a Status header value string Declaration public override string ToString() Returns Type Description string Returns the string value of a Status header Overrides object.ToString()"
  },
  "api/SipLib.Msrp.MsrpStreamParser.html": {
    "href": "api/SipLib.Msrp.MsrpStreamParser.html",
    "title": "Class MsrpStreamParser",
    "keywords": "Class MsrpStreamParser This class parses each byte received in a TCP/TLS stream and extracts complete MSRP messages from the steam. Inheritance object MsrpStreamParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Msrp Assembly: SipLib.dll Syntax public class MsrpStreamParser Constructors | Edit this page View Source MsrpStreamParser(int) Constructor Declaration public MsrpStreamParser(int MaxMsrpMessageLength) Parameters Type Name Description int MaxMsrpMessageLength Methods | Edit this page View Source FindEndLinePattern(byte[], int, byte[]) Searches for the MSRP end line pattern byte array pattern within an array by searching from the end of the read buffer. Declaration public static int FindEndLinePattern(byte[] SrcArray, int LastSrcIndex, byte[] BytePattern) Parameters Type Name Description byte[] SrcArray Array to search in. int LastSrcIndex Last index in the source array to include in the search range byte[] BytePattern Array of bytes containing the end line pattern to search for. Returns Type Description int The index within the search array of the start of the pattern to search for. Returns -1 if the pattern is not found. | Edit this page View Source GetMessageBytes() Gets the full MSRP message transaction from the current stream buffer. This method must be called immediately if the ProcessByte() method returns true. Declaration public byte[]? GetMessageBytes() Returns Type Description byte[] Returns a byte array containing the full MSRP message transaction. Returns null if this method is not called immediately after ProcessByte() returns true. | Edit this page View Source ProcessByte(byte) Processes the next byte received from the TCP/TLS network stream and searhes for a complete MSRP message transaction. Declaration public bool ProcessByte(byte NextByte) Parameters Type Name Description byte NextByte Next byte to process Returns Type Description bool Returns true if a complete MSRP message transaction block is detected. Return false if a message is not available yet. The caller must immediately call GetMessageBytes() to retrive the new message if this method return true."
  },
  "api/SipLib.Msrp.MsrpUri.html": {
    "href": "api/SipLib.Msrp.MsrpUri.html",
    "title": "Class MsrpUri",
    "keywords": "Class MsrpUri Class for managing a MSRP URI. See Section 9 of RFC 4975. Inheritance object MsrpUri Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Msrp Assembly: SipLib.dll Syntax public class MsrpUri Constructors | Edit this page View Source MsrpUri() Constructor Declaration public MsrpUri() | Edit this page View Source MsrpUri(SIPSchemesEnum, string, IPAddress, int) Constructor Declaration public MsrpUri(SIPSchemesEnum msrpScheme, string user, IPAddress address, int port) Parameters Type Name Description SIPSchemesEnum msrpScheme Must be either SIPSchemesEnum.msrp or SIPSchemesEnum.msrps string user User part of the URI. Optional. May be null. IPAddress address IP address. May be either an IPv4 or an IPv6 IP address int port Port number Properties | Edit this page View Source SessionID Session ID portion of the MSRP URI. Required. Declaration public string SessionID { get; set; } Property Value Type Description string | Edit this page View Source Transport Specifies the MSRP transport protocol. Required. Must be one of: tcp, tls. Declaration public string Transport { get; set; } Property Value Type Description string | Edit this page View Source uri Gets or sets the authority URI portion of the MsrpUri Declaration public SIPURI uri { get; set; } Property Value Type Description SIPURI Methods | Edit this page View Source ParseMsrpUri(string) Parses a string into a MsrpUri object Declaration public static MsrpUri? ParseMsrpUri(string uriString) Parameters Type Name Description string uriString Input string Returns Type Description MsrpUri Returns a new MsrpUri object if successful or null if the input string does not represent a valid MSRP URI | Edit this page View Source ToString() Converts this MSRP URI to a string. Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/SipLib.Msrp.ReportReceivedDelegate.html": {
    "href": "api/SipLib.Msrp.ReportReceivedDelegate.html",
    "title": "Delegate ReportReceivedDelegate",
    "keywords": "Delegate ReportReceivedDelegate Delegate type for the ReportReceived event of the MsrpConnection class. This event is fired when it receives a MSRP REPORT request if a success report was request in call to the SendMsrpMessage method. Namespace: SipLib.Msrp Assembly: SipLib.dll Syntax public delegate void ReportReceivedDelegate(string messageID, int TotalBytes, int StatusCode, string StatusText) Parameters Type Name Description string messageID Message ID parameter that was specified in the SendMsrpMessage call int TotalBytes Total bytes that were received by the remote endpoint int StatusCode Status code from the REPORT request string StatusText Status text from the REPORT request. May be null."
  },
  "api/SipLib.Msrp.html": {
    "href": "api/SipLib.Msrp.html",
    "title": "Namespace SipLib.Msrp",
    "keywords": "Namespace SipLib.Msrp Message Session Relay Protocol (MSRP, see RFC 4975) related classes. Classes ByteRangeHeader Class for parsing and processing the Byte-Range header of a MSRP message. See RFC 4975. CpimMessage Class for Common Profile for Instant Messaging (CPIM) messages defined by RFC 3862. CPIM messages are not used in standalone manner in NG9-1-1 applications. They are always encapsulated in MSRP messages. MsrpConnection Class for managing a single MSRP connection to either a remote server or from a remote client. MsrpMessage Class for MSRP messages. See RFC 4975. MsrpPathHeader Class for a MSRP To-Path or a From-Path header value. See RFC 4975. Both the To-Path and the From-Path MSRP message headers can contain multiple MSRP URIs. MsrpStatusHeader Class for the Status header of a MSRP message. See RFC 4975 MsrpStreamParser This class parses each byte received in a TCP/TLS stream and extracts complete MSRP messages from the steam. MsrpUri Class for managing a MSRP URI. See Section 9 of RFC 4975. Enums MsrpCompletionStatus Enumeration that defines the possible status conditions for a single MSRP message. MsrpMessageType Enumeration for MSRP message types. Delegates MsrpConnectionStatusDelegate Delegate type for the MsrpConnectionEstablished and the MsrpConnectionFailed events of the MsrpConnection class. MsrpMessageDeliveryFailedDelegate Delegate type for the MsrpMessageDeliveryFailed event of the MsrpConnection class. MsrpMessageReceivedDelegate Delegate type for the MsrpMessageReceived event of the MsrpConnection class. ReportReceivedDelegate Delegate type for the ReportReceived event of the MsrpConnection class. This event is fired when it receives a MSRP REPORT request if a success report was request in call to the SendMsrpMessage method."
  },
  "api/SipLib.Network.IpUtils.html": {
    "href": "api/SipLib.Network.IpUtils.html",
    "title": "Class IpUtils",
    "keywords": "Class IpUtils Static class that contains various utility functions relating to IP addresses. Inheritance object IpUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Network Assembly: SipLib.dll Syntax public static class IpUtils Methods | Edit this page View Source GetIPv4Addresses() Gets a list of all available IPv4 IP addresses on the local machine. The list will not contain the local loopback IPv4 address. Declaration public static List<IPAddress> GetIPv4Addresses() Returns Type Description List<IPAddress> Returns a list of addresses. The list may be empty but it will never be null. | Edit this page View Source GetIPv6Addresses() Gets a list of all available IPv6 IP addresses on the local machine. This function does not include IPv6 local link addresses. Declaration public static List<IPAddress> GetIPv6Addresses() Returns Type Description List<IPAddress> Returns a list of addresses. The list may be empty but it will never be null. | Edit this page View Source GetIPv6LocalLinkAddresses() Gets a list of local link IPv6 addresses on the local machine. The list will not include the local loopback address. Declaration public static List<IPAddress> GetIPv6LocalLinkAddresses() Returns Type Description List<IPAddress> Returns a list of addresses. The list may be empty but it will never be null."
  },
  "api/SipLib.Network.html": {
    "href": "api/SipLib.Network.html",
    "title": "Namespace SipLib.Network",
    "keywords": "Namespace SipLib.Network Contains a utility helper class for performing network protocol related functions. Classes IpUtils Static class that contains various utility functions relating to IP addresses."
  },
  "api/SipLib.RealTimeText.RttCharactersReceivedDelegate.html": {
    "href": "api/SipLib.RealTimeText.RttCharactersReceivedDelegate.html",
    "title": "Delegate RttCharactersReceivedDelegate",
    "keywords": "Delegate RttCharactersReceivedDelegate Delegate type for the RttCharactersReceived event of the RttReceiver class. Namespace: SipLib.RealTimeText Assembly: SipLib.dll Syntax public delegate void RttCharactersReceivedDelegate(string RxChars, string Source) Parameters Type Name Description string RxChars Received text. string Source Identifies the source of the received characters"
  },
  "api/SipLib.RealTimeText.RttParameters.html": {
    "href": "api/SipLib.RealTimeText.RttParameters.html",
    "title": "Class RttParameters",
    "keywords": "Class RttParameters Holds the RTT protocol parameters for a RTT session Inheritance object RttParameters Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.RealTimeText Assembly: SipLib.dll Syntax public class RttParameters Constructors | Edit this page View Source RttParameters() Constructor Declaration public RttParameters() Fields | Edit this page View Source Cps Specifies the maximum number of characters per second that may be sent. A value of 0 indicates that the data rate is not limited. Declaration public int Cps Field Value Type Description int | Edit this page View Source RedundancyLevel Specifies the number of redundancy levels. A value of 0 specifies that redundancy is not being used. Declaration public int RedundancyLevel Field Value Type Description int | Edit this page View Source RedundancyPayloadType Specifies the redundant packet payload type in the RTP packets. A value of 0 indicates that redundancy is not being used. Declaration public int RedundancyPayloadType Field Value Type Description int | Edit this page View Source RttMixerAware If true then the UA of the RTT RTP channel is RTT mixer aware as specified in RFC 9071. Declaration public bool RttMixerAware Field Value Type Description bool | Edit this page View Source T140PayloadType Specifies the t140 payload type in the RTP packets. Declaration public int T140PayloadType Field Value Type Description int Methods | Edit this page View Source FromMediaDescription(MediaDescription) Parses an SDP media description object and creates an RttParameters object. Declaration public static RttParameters? FromMediaDescription(MediaDescription mediaDescription) Parameters Type Name Description MediaDescription mediaDescription Input SDP media description. The media type must be \"text\" for RTT. Returns Type Description RttParameters Returns a new RttParameters object. Returns null if a parsing error occurred. | Edit this page View Source ToMediaDescription(int) Creates an SDP media description object from this RttParameters object. Declaration public MediaDescription ToMediaDescription(int Port) Parameters Type Name Description int Port UDP port number to use. Returns Type Description MediaDescription Returns a new SDP MediaDescription object."
  },
  "api/SipLib.RealTimeText.RttReceiver.html": {
    "href": "api/SipLib.RealTimeText.RttReceiver.html",
    "title": "Class RttReceiver",
    "keywords": "Class RttReceiver This class handles Real Time Protocol (RTP) packets containing Real Time Text (RTT, RFC 4103) and notifies the user of this class when complete messages are available. A complete message may be one character or several characters. This class handles RTT redundancy as specified in Section 4.2 of RFC 4103 and is capable of recovering the original message even if there are dropped RTP packets. This class supports receiving characters from a mixer-aware remote endpoint as described in RFC 9071 RTP-Mixer Formatting of Multiparty Real-Time Text. Inheritance object RttReceiver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.RealTimeText Assembly: SipLib.dll Syntax public class RttReceiver Constructors | Edit this page View Source RttReceiver(RttParameters) Constructor. This constructor is for testing only. Use the constructor that takes a RtpChannel parameter for actual application. Declaration public RttReceiver(RttParameters rttParams) Parameters Type Name Description RttParameters rttParams RTT session parameters from the SDP media description block. | Edit this page View Source RttReceiver(RttParameters, RtpChannel, string) Constructor. Declaration public RttReceiver(RttParameters rttParams, RtpChannel rtpChannel, string source) Parameters Type Name Description RttParameters rttParams RTT session parameters from the SDP media description block. RtpChannel rtpChannel RtpChannel for RTT that this object will receive RTP packets from string source Identifies the remote source that will be sending characters Properties | Edit this page View Source Ssrc The SSRC or CSRC of the source of the most recent characters. Taken from the RTP packet. Declaration public uint Ssrc { get; } Property Value Type Description uint Methods | Edit this page View Source ProcessRtpPacket(RtpPacket) Processes an RTP packet containing RTT media. This method fires the RttCharactersReceived event when characters a detected. Declaration public void ProcessRtpPacket(RtpPacket rtpPacket) Parameters Type Name Description RtpPacket rtpPacket Input RTP packet to process. Events | Edit this page View Source RttCharactersReceived Event that is fired when at least one character is received Declaration public event RttCharactersReceivedDelegate? RttCharactersReceived Event Type Type Description RttCharactersReceivedDelegate"
  },
  "api/SipLib.RealTimeText.RttRedundantBlock.html": {
    "href": "api/SipLib.RealTimeText.RttRedundantBlock.html",
    "title": "Class RttRedundantBlock",
    "keywords": "Class RttRedundantBlock Class for representing redundant RTT blocks in an RTP packet. See RFC 4103. Inheritance object RttRedundantBlock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.RealTimeText Assembly: SipLib.dll Syntax public class RttRedundantBlock Constructors | Edit this page View Source RttRedundantBlock() Default constructor Declaration public RttRedundantBlock() | Edit this page View Source RttRedundantBlock(byte, ushort, byte[]) Constructs a new RttRedundantBlock object. Use this constructor when building a new RttRedundantBlock to send. Declaration public RttRedundantBlock(byte Pt, ushort TmOffset, byte[] Payload) Parameters Type Name Description byte Pt T.140 payload type. This is the value for the primary block as set in the SDP. ushort TmOffset Time offset in milliseconds from the beginning of the text session. byte[] Payload | Edit this page View Source RttRedundantBlock(byte[], int) Constructs a new RttRedundantBlock object from 4 consecutive bytes in a byte array starting at a specified index. Use this constructor when parsing an RTP packet containing redundant RTT characters. Declaration public RttRedundantBlock(byte[] pHeader, int StartIndex) Parameters Type Name Description byte[] pHeader Byte array containing the RttRedundantBlock int StartIndex Index to the header of the redunant block. Fields | Edit this page View Source RED_HEADER_LENGTH Length of a redundant block header. Declaration public const int RED_HEADER_LENGTH = 4 Field Value Type Description int | Edit this page View Source RTT_MARKER_MASK Mask for detecting the marker bit in a redundant text block. Declaration public const byte RTT_MARKER_MASK = 128 Field Value Type Description byte Properties | Edit this page View Source BlockLength Gets or sets the length of the redundant block. Declaration public ushort BlockLength { get; set; } Property Value Type Description ushort | Edit this page View Source PayloadBytes Gets or sets the payload bytes. The setter also sets the BlockLength property Declaration public byte[] PayloadBytes { get; set; } Property Value Type Description byte[] | Edit this page View Source T140PayloadType Gets or sets the payload type. Declaration public byte T140PayloadType { get; set; } Property Value Type Description byte | Edit this page View Source TimeOffset Gets or sets the timestamp offset value. Declaration public ushort TimeOffset { get; set; } Property Value Type Description ushort Methods | Edit this page View Source GetRedundantPayloadHeader() Returns a byte array containing the formatted redundant payload header. Call this method after setting the T140PayloadType, BlockLength and TimeOffset properties. Declaration public byte[] GetRedundantPayloadHeader() Returns Type Description byte[] Returns the formatted 4-byte redundant block header."
  },
  "api/SipLib.RealTimeText.RttRtpSendDelegate.html": {
    "href": "api/SipLib.RealTimeText.RttRtpSendDelegate.html",
    "title": "Delegate RttRtpSendDelegate",
    "keywords": "Delegate RttRtpSendDelegate Delegate for a function that sends an RTP packet containing RTT data over an established RTT channel. Namespace: SipLib.RealTimeText Assembly: SipLib.dll Syntax public delegate void RttRtpSendDelegate(RtpPacket rtpPckt) Parameters Type Name Description RtpPacket rtpPckt Complete RTP packet to send"
  },
  "api/SipLib.RealTimeText.RttSender.html": {
    "href": "api/SipLib.RealTimeText.RttSender.html",
    "title": "Class RttSender",
    "keywords": "Class RttSender This class manages the sending side of a RTT media session. See RFC 4103. This class manages the transmission of redundant or non-redundant RTP packets containing RTT payloads based on the timing requirements specified in RFC 4103. Inheritance object RttSender Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.RealTimeText Assembly: SipLib.dll Syntax public class RttSender Constructors | Edit this page View Source RttSender(RttParameters, RttRtpSendDelegate) Constructs a new RttSender object. Declaration public RttSender(RttParameters Rp, RttRtpSendDelegate sender) Parameters Type Name Description RttParameters Rp Contains the RTT media session parameters. RttRtpSendDelegate sender Delegate to use to send RTP packets. Methods | Edit this page View Source SendMessage(string) Enqueues characters to send. This method will truncate the message if it exceeds a maximum allowed message length. If Cps is 0 and redundancy is being used then the maximum length is 1024 characters. If Cps is 0 and redundancy is not being used then the maximum length is the maximum size of a RTP UDP packet. If Cps is greater than 0 then characters are sent one at a time so there is no length restriction. Declaration public void SendMessage(string message) Parameters Type Name Description string message Contains at least one character to send | Edit this page View Source Start() Starts the sender task Declaration public void Start() | Edit this page View Source Stop() Stops the sender task Declaration public void Stop()"
  },
  "api/SipLib.RealTimeText.RttUtils.html": {
    "href": "api/SipLib.RealTimeText.RttUtils.html",
    "title": "Class RttUtils",
    "keywords": "Class RttUtils Provides various helper utility functions and definitions for Real Time Text (RTT, RFC 4103) Inheritance object RttUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.RealTimeText Assembly: SipLib.dll Syntax public class RttUtils Fields | Edit this page View Source ByteOrderMarker Byte Order Marker character Declaration public const char ByteOrderMarker = '﻿' Field Value Type Description char | Edit this page View Source DefaultCps Default number of characters per second. A value of 0 specifies that there is no limit to the number of characters per second that may be sent. Declaration public const int DefaultCps = 0 Field Value Type Description int | Edit this page View Source DefaultRedundancyLevel Default number of redundancy levels. A value of 0 indicates that redundancy is not being used. Declaration public const int DefaultRedundancyLevel = 3 Field Value Type Description int | Edit this page View Source DefaultRedundantPayloadType Default payload type for redundant text (red). A value of 0 means that redundancy is not being used. Declaration public const int DefaultRedundantPayloadType = 99 Field Value Type Description int | Edit this page View Source DefaultT140PayloadType Default payload type for t140 text Declaration public const int DefaultT140PayloadType = 98 Field Value Type Description int | Edit this page View Source MixerAttribute Defines the attribute for the RTT media block that indicates that a UA is RTT mixer aware as defined in RFC 9071. Declaration public const string MixerAttribute = \"rtt-mixer\" Field Value Type Description string | Edit this page View Source Utf8LineSeparator Unicode line separator character encoded as an UTF-8 byte sequence Declaration public static byte[] Utf8LineSeparator Field Value Type Description byte[] | Edit this page View Source strUtf8LineSeparator String containing a Unicode line separator character. Declaration public static string strUtf8LineSeparator Field Value Type Description string Methods | Edit this page View Source FixRttLineEnding(string) Replaces Windows/Linux line endings with the preferred Unicode new line separator per ITU-T Recommendation T.140. The Windows line ending is CRLF. The Linux line ending is LF. Declaration public static string FixRttLineEnding(string InStr) Parameters Type Name Description string InStr Input string containing a string with Windows or Linux line endings Returns Type Description string Returns a string with the T.140 line ending."
  },
  "api/SipLib.RealTimeText.html": {
    "href": "api/SipLib.RealTimeText.html",
    "title": "Namespace SipLib.RealTimeText",
    "keywords": "Namespace SipLib.RealTimeText Classes for the Real Time Text (RTT, see RFC 4103) protocol. Classes RttParameters Holds the RTT protocol parameters for a RTT session RttReceiver This class handles Real Time Protocol (RTP) packets containing Real Time Text (RTT, RFC 4103) and notifies the user of this class when complete messages are available. A complete message may be one character or several characters. This class handles RTT redundancy as specified in Section 4.2 of RFC 4103 and is capable of recovering the original message even if there are dropped RTP packets. This class supports receiving characters from a mixer-aware remote endpoint as described in RFC 9071 RTP-Mixer Formatting of Multiparty Real-Time Text. RttSender This class manages the sending side of a RTT media session. See RFC 4103. This class manages the transmission of redundant or non-redundant RTP packets containing RTT payloads based on the timing requirements specified in RFC 4103. Delegates RttCharactersReceivedDelegate Delegate type for the RttCharactersReceived event of the RttReceiver class. RttRtpSendDelegate Delegate for a function that sends an RTP packet containing RTT data over an established RTT channel."
  },
  "api/SipLib.Rtp.ByePacket.html": {
    "href": "api/SipLib.Rtp.ByePacket.html",
    "title": "Class ByePacket",
    "keywords": "Class ByePacket Class for building and parsing RTCP BYE packets. See Section 6.6 of RFC 3550. Inheritance object ByePacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public class ByePacket Constructors | Edit this page View Source ByePacket() Constructor Declaration public ByePacket() | Edit this page View Source ByePacket(List<uint>, string) Constructs a new BYE packet for sending. Declaration public ByePacket(List<uint> Ssrcs, string Reason) Parameters Type Name Description List<uint> Ssrcs Contains a list of SSRC identifies that the BYE packet pertains to. The list must contain at least one SSRC. string Reason A string that describes the reason for leaving. Properties | Edit this page View Source Header Gets the RtcpHeader for this packet. Declaration public RtcpHeader? Header { get; } Property Value Type Description RtcpHeader | Edit this page View Source Reason Gets the reason for the BYE packet. Returns null if this packet is not valid. Declaration public string? Reason { get; } Property Value Type Description string | Edit this page View Source SSRCs Gets the list of SSRCs. Always returns a non-null value. If the list is empty then this packet is not valid. Declaration public List<uint> SSRCs { get; } Property Value Type Description List<uint> Methods | Edit this page View Source Parse(byte[], int) Parses a received byte array into a ByePacket object Declaration public static ByePacket? Parse(byte[] Bytes, int StartIdx) Parameters Type Name Description byte[] Bytes Received input byte array int StartIdx Start index of the ByePacket in the array Returns Type Description ByePacket Returns a new ByePacket or null if a parsing error occurred | Edit this page View Source ToByteArray() Converts this object to a byte array. Declaration public byte[] ToByteArray() Returns Type Description byte[] Returns a byte array containing the binary version of this object. The returned byte array is padded so that it contains a whole number of 4-byte words."
  },
  "api/SipLib.Rtp.DtlsHandshakeFailedDelegate.html": {
    "href": "api/SipLib.Rtp.DtlsHandshakeFailedDelegate.html",
    "title": "Delegate DtlsHandshakeFailedDelegate",
    "keywords": "Delegate DtlsHandshakeFailedDelegate Delegate type for the DtlsHandshakeFailed event of the RtpChannel class Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public delegate void DtlsHandshakeFailedDelegate(bool IsServer, IPEndPoint remoteEndPoint) Parameters Type Name Description bool IsServer True if this RtpChannel is the DTLS server or false if it is the DTLS client. IPEndPoint remoteEndPoint IP endpoint of the remote peer"
  },
  "api/SipLib.Rtp.DtmfEventEnum.html": {
    "href": "api/SipLib.Rtp.DtmfEventEnum.html",
    "title": "Enum DtmfEventEnum",
    "keywords": "Enum DtmfEventEnum Enumeration of DTMF event codes. See Section 3.2 of RFC 4733. Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public enum DtmfEventEnum : byte Fields Name Description A Asterisk B C D E Eight F Five Four Nine One Pound Seven Six Three Two Zero"
  },
  "api/SipLib.Rtp.DtmfPacket.html": {
    "href": "api/SipLib.Rtp.DtmfPacket.html",
    "title": "Class DtmfPacket",
    "keywords": "Class DtmfPacket Class for representing a DTMF event packet RTP payload. See Section 2.3 of RFC 4733. Inheritance object DtmfPacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public class DtmfPacket Constructors | Edit this page View Source DtmfPacket() Constructor Declaration public DtmfPacket() Fields | Edit this page View Source DEFAULT_VOLUME_DBM Default DTMF tone volume in dBm. Declaration public const int DEFAULT_VOLUME_DBM = -13 Field Value Type Description int | Edit this page View Source DTMF_PACKET_LENGTH Length of a DTMF packet Declaration public const int DTMF_PACKET_LENGTH = 4 Field Value Type Description int Properties | Edit this page View Source Duration Gets or sets the Duration of the DTMF event. The Duration is in RTP packet Timestamp units. Declaration public ushort Duration { get; set; } Property Value Type Description ushort | Edit this page View Source Eflag Gets or sets the E flag value Declaration public bool Eflag { get; set; } Property Value Type Description bool | Edit this page View Source Event Gets or sets the DTMF event value. Declaration public DtmfEventEnum Event { get; set; } Property Value Type Description DtmfEventEnum | Edit this page View Source Volume Gets or sets the DTMF tone volume in dBm. The allowable range is from 0 - -63 dBm. This value defaults to DEFAULT_VOLUME_DBM, which is -13 dBm. Declaration public int Volume { get; set; } Property Value Type Description int Methods | Edit this page View Source GetPacketBytes() Gets the packet bytes. Declaration public byte[] GetPacketBytes() Returns Type Description byte[] Returns a byte array of length DTMF_PACKET_LENGTH | Edit this page View Source Parse(byte[], int) Parses a byte array into a DtmfPacket object Declaration public static DtmfPacket Parse(byte[] packet, int Offset) Parameters Type Name Description byte[] packet Input byte array int Offset Index in the input byte array that contains the DtmfPacket bytes. packet.Length - Offset must be greater than or equal to DTMF_PACKET_LENGTH Returns Type Description DtmfPacket"
  },
  "api/SipLib.Rtp.JitterStatistics.html": {
    "href": "api/SipLib.Rtp.JitterStatistics.html",
    "title": "Class JitterStatistics",
    "keywords": "Class JitterStatistics Container class for storing RTP packet jitter statistics for a sampled interval Inheritance object JitterStatistics Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public class JitterStatistics Properties | Edit this page View Source Average Average jitter in milliseconds Declaration public int Average { get; set; } Property Value Type Description int | Edit this page View Source Maximum Stores the maximum inter-packet jitter in milliseconds Declaration public int Maximum { get; set; } Property Value Type Description int | Edit this page View Source Minimum Stores the minimum inter-packet jitter in milliseconds Declaration public int Minimum { get; set; } Property Value Type Description int Methods | Edit this page View Source CalculateAverage() Calculates the average jitter value for the sample interval. This method must be called at the end of the sample interval. Declaration public void CalculateAverage() | Edit this page View Source Copy() Returns a deep copy of this object. Declaration public JitterStatistics Copy() Returns Type Description JitterStatistics | Edit this page View Source Reset() Resets the statistics to the default values. Declaration public void Reset() | Edit this page View Source Update(int) Updates the minimum and maximum jitter statistics. Call this method each time a new jitter value is calculated. Declaration public void Update(int NewJitterValue) Parameters Type Name Description int NewJitterValue"
  },
  "api/SipLib.Rtp.MeanOpinionScore.html": {
    "href": "api/SipLib.Rtp.MeanOpinionScore.html",
    "title": "Class MeanOpinionScore",
    "keywords": "Class MeanOpinionScore Class for calculating and storing the Mean Opinion Score (MOS) values. The MOS is a numerical estimation of the audio quality. Inheritance object MeanOpinionScore Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public class MeanOpinionScore Constructors | Edit this page View Source MeanOpinionScore() Default constructor Declaration public MeanOpinionScore() | Edit this page View Source MeanOpinionScore(double, double) Constructor Declaration public MeanOpinionScore(double mos, double r) Parameters Type Name Description double mos double r | Edit this page View Source MeanOpinionScore(double, int, int) This constructor calculates the MOS and R values given the packet loss percentage, the jitter and the network delay in milliseconds using the algorithm described in \"EMOS - Estimated Mean Opinion\" Score. See https://arimas.com/2017/09/12/emos-estimated-mean-opinion-score/. Declaration public MeanOpinionScore(double PacketLossPercent, int Jitter, int DelayInMs) Parameters Type Name Description double PacketLossPercent int Jitter int DelayInMs Properties | Edit this page View Source MOS mos estimate. The mos is in the range of 1.0 to 4.5. A value of 4.5 indicates the highest quality audio and a value of 1.0 is the lowest quality audio. A value of 0.0 indicates that the mos has not been calculated. Declaration public double MOS { get; set; } Property Value Type Description double | Edit this page View Source R The R value is the rating value used to calculate the mos. It is calculated from the packet loss, the jitter and the delay. Declaration public double R { get; set; } Property Value Type Description double"
  },
  "api/SipLib.Rtp.ReceiverReport.html": {
    "href": "api/SipLib.Rtp.ReceiverReport.html",
    "title": "Class ReceiverReport",
    "keywords": "Class ReceiverReport Class for building and parsing RTCP Receiver Report packets. See Section 6.4.2 of RFC 3550. Inheritance object ReceiverReport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public class ReceiverReport Constructors | Edit this page View Source ReceiverReport() Constructs a new ReceiverReport object. Use this constructor when building a Receiver RTCP message to send. Declaration public ReceiverReport() Properties | Edit this page View Source GetReportBlocks Gets the list Report Blocks for this SenderReport. Declaration public List<ReportBlock> GetReportBlocks { get; } Property Value Type Description List<ReportBlock> | Edit this page View Source Header Gets the RTCP header. Declaration public RtcpHeader? Header { get; } Property Value Type Description RtcpHeader | Edit this page View Source SSRC Gets or sets the SSRC field. Declaration public uint SSRC { get; set; } Property Value Type Description uint Methods | Edit this page View Source AddReportBlock(ReportBlock) Adds a new ReportBlock object to the list of ReportBlocks. Declaration public void AddReportBlock(ReportBlock Rb) Parameters Type Name Description ReportBlock Rb ReportBlock to add to the list of report blocks | Edit this page View Source GetTotalBytes() Calculates the total number of bytes necessary to hold this object in a byte array. Declaration public int GetTotalBytes() Returns Type Description int The number of bytes required for this object. | Edit this page View Source LoadBytes(byte[], int) Loads this object into a destination byte array. Declaration public void LoadBytes(byte[] Dest, int StartIdx) Parameters Type Name Description byte[] Dest The destination byte array. This array must be long enough to hold this object beginning at the StartIdx position. int StartIdx Index in Dest to load the bytes into. | Edit this page View Source Parse(byte[], int) Parses a byte array containing a ReceiverReport into a ReceiverReport object. Declaration public static ReceiverReport? Parse(byte[] Bytes, int StartIdx) Parameters Type Name Description byte[] Bytes Input byte array containing a ReceiverReport. int StartIdx Index of the first byte containing the header for the Receiver Report. Returns Type Description ReceiverReport Returns a new ReceiverReport object if successful or null if an error occurred. | Edit this page View Source ToByteArray() Converts this RTCP SenderReport object to a byte array so that it can be sent over the network. Declaration public byte[] ToByteArray() Returns Type Description byte[] Returns a byte array containing an RTCP Sender Report.///"
  },
  "api/SipLib.Rtp.ReportBlock.html": {
    "href": "api/SipLib.Rtp.ReportBlock.html",
    "title": "Class ReportBlock",
    "keywords": "Class ReportBlock Class for building or parsing the report block portion of a RTCP Sender Report or Receiver Report. See Section 6.4.1 of RFC 3550. Inheritance object ReportBlock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public class ReportBlock Constructors | Edit this page View Source ReportBlock() Constructs a new ReportBlock object. Use this constructor when building a new ReportBlock object to include in a Sender Report or a Receiver Report to send. Declaration public ReportBlock() Properties | Edit this page View Source CumulativePacketsLost Gets or sets the Cumulative Number of Packets Lost field. Declaration public uint CumulativePacketsLost { get; set; } Property Value Type Description uint | Edit this page View Source Dlsr Gets or sets the Delay Since Last SR (DLSR) field. Declaration public uint Dlsr { get; set; } Property Value Type Description uint | Edit this page View Source FractionLost Gets or sets the Fraction Lost field. Declaration public byte FractionLost { get; set; } Property Value Type Description byte | Edit this page View Source HighestSequenceNumberReceived Gets or sets the Extended Highest Sequence Number Received field. Declaration public uint HighestSequenceNumberReceived { get; set; } Property Value Type Description uint | Edit this page View Source InterarrivalJitter Gets or sets the Inter-arrival Jitter field. Declaration public uint InterarrivalJitter { get; set; } Property Value Type Description uint | Edit this page View Source LastSR Gets or sets the Last SR Timestamp (LSR) field. Declaration public uint LastSR { get; set; } Property Value Type Description uint | Edit this page View Source ReportBlockLength Gets the length of a Report Block. Declaration public static int ReportBlockLength { get; } Property Value Type Description int | Edit this page View Source SSRC Sets or gets the SSRC of the source. Declaration public uint SSRC { get; set; } Property Value Type Description uint Methods | Edit this page View Source LoadBytes(byte[], int) Loads this object into a destination byte array. Declaration public void LoadBytes(byte[] Dest, int StartIdx) Parameters Type Name Description byte[] Dest The destination byte array. Must be long enough to hold this object beginning at the StartIdx position. int StartIdx Index in the destination to start loading the bytes into. | Edit this page View Source Parse(byte[], int) Parses an input byte array and returns a ReportBlock object. Declaration public static ReportBlock? Parse(byte[] Bytes, int StartIdx) Parameters Type Name Description byte[] Bytes Input byte array containing the ReportBlock data. int StartIdx Starting index of the ReportBlock data in the input array. Returns Type Description ReportBlock Returns a ReportBlock object if successful or null if an error occurred."
  },
  "api/SipLib.Rtp.RtcpCompoundPacket.html": {
    "href": "api/SipLib.Rtp.RtcpCompoundPacket.html",
    "title": "Class RtcpCompoundPacket",
    "keywords": "Class RtcpCompoundPacket Class for building and sending compound RTCP packets and for parsing and processing compound RTCP packets received from the network. See RFC 3550. Inheritance object RtcpCompoundPacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public class RtcpCompoundPacket Constructors | Edit this page View Source RtcpCompoundPacket() Creates an empty RTCP compound packet. Add Sender Reports, Receiver Reports, SDES packets or BYE packets to the appropriate lists and then call ToByteArray() to build a compound RTCP packet to send over the network as a byte array. Declaration public RtcpCompoundPacket() Fields | Edit this page View Source ByePackets List of BYE packets. Initialized to an empty list. Declaration public List<ByePacket> ByePackets Field Value Type Description List<ByePacket> | Edit this page View Source ReceiverReports List of Receiver Reports. Initialized to an empty list. Declaration public List<ReceiverReport> ReceiverReports Field Value Type Description List<ReceiverReport> | Edit this page View Source SdesPackets List of Session Description (SDES) packets. Initialized to an empty list. Declaration public List<SdesPacket> SdesPackets Field Value Type Description List<SdesPacket> | Edit this page View Source SenderReports List of Sender Reports. Initialized to an empty list. Declaration public List<SenderReport> SenderReports Field Value Type Description List<SenderReport> Methods | Edit this page View Source Parse(byte[]) Parses a byte array containg a RtcpCompoundPacket that was received from the network. Declaration public static RtcpCompoundPacket? Parse(byte[] Bytes) Parameters Type Name Description byte[] Bytes Input received byte array. Returns Type Description RtcpCompoundPacket Returns a new RtcpCompoundPacket objedt if successful or null if an error occurred | Edit this page View Source ToByteArray() Converts this object to a byte array so that the compound RTCP packet can be sent over the network. Declaration public byte[]? ToByteArray() Returns Type Description byte[] Returns a byte array. Return null if there are no Sender Reports, Receiver Reports, SDES packets or BYE packets to send."
  },
  "api/SipLib.Rtp.RtcpHeader.html": {
    "href": "api/SipLib.Rtp.RtcpHeader.html",
    "title": "Class RtcpHeader",
    "keywords": "Class RtcpHeader Class for creating and parsing Real Time Control Protocol (RTCP) headers. Inheritance object RtcpHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public class RtcpHeader Constructors | Edit this page View Source RtcpHeader() Creates a new RtcpHeader for building RTCP packets. Declaration public RtcpHeader() | Edit this page View Source RtcpHeader(byte[], int) Constructs a new RtcpHeader object from a byte array. Use this constructor when parsing a received RTCP packet. Declaration public RtcpHeader(byte[] Bytes, int StartIdx) Parameters Type Name Description byte[] Bytes Byte array containing the RTCP header. Note: There must be at least 4 bytes between the StartIdx and the end of this byte array. int StartIdx Index of the start of the RTCP header. Fields | Edit this page View Source RTCP_HEADER_LENGTH Length of a RTCP header Declaration public const int RTCP_HEADER_LENGTH = 4 Field Value Type Description int Properties | Edit this page View Source Count Gets or sets the Count field. Declaration public int Count { get; set; } Property Value Type Description int | Edit this page View Source HeaderLength Gets the fixed header length or an RTCP packet header. Declaration public static int HeaderLength { get; } Property Value Type Description int | Edit this page View Source Length Gets or sets the Length field. Declaration public ushort Length { get; set; } Property Value Type Description ushort | Edit this page View Source PacketType Gets or sets the PT (Packet Type) field. Declaration public RtcpPacketType PacketType { get; set; } Property Value Type Description RtcpPacketType | Edit this page View Source Padding Gets or sets the Padding bit. Declaration public bool Padding { get; set; } Property Value Type Description bool | Edit this page View Source PaddingBit Sets or gets the Padding bit value as an int Declaration public int PaddingBit { get; set; } Property Value Type Description int | Edit this page View Source Version Gets the Version field. Declaration public int Version { get; } Property Value Type Description int Methods | Edit this page View Source LoadBytes(byte[], int) Loads the byte array containing the RTCP header block into a destination byte array. Declaration public void LoadBytes(byte[] Dest, int StartIdx) Parameters Type Name Description byte[] Dest Destination array for the RTCP header bytes. This byte array must be long enough to hold this object beginning at the StartIdx position. int StartIdx Starting index to load the header bytes at."
  },
  "api/SipLib.Rtp.RtcpPacketReceivedDelegate.html": {
    "href": "api/SipLib.Rtp.RtcpPacketReceivedDelegate.html",
    "title": "Delegate RtcpPacketReceivedDelegate",
    "keywords": "Delegate RtcpPacketReceivedDelegate Delegate type for the RtcpPacketReceived event of the RtpChannel class. Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public delegate void RtcpPacketReceivedDelegate(RtcpCompoundPacket rtpCompoundPacket) Parameters Type Name Description RtcpCompoundPacket rtpCompoundPacket Un-encrypted compound RTCP packet that was received. Note: All received RTCP packets are parsed as compound packets even through they may not be compound packets."
  },
  "api/SipLib.Rtp.RtcpPacketSentDelegate.html": {
    "href": "api/SipLib.Rtp.RtcpPacketSentDelegate.html",
    "title": "Delegate RtcpPacketSentDelegate",
    "keywords": "Delegate RtcpPacketSentDelegate Delegate type for the RtcpPacketSent event of the RtpChannel class. Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public delegate void RtcpPacketSentDelegate(RtcpCompoundPacket rtcpCompoundPacket) Parameters Type Name Description RtcpCompoundPacket rtcpCompoundPacket Un-encrypted compound RTCP packet that was sent."
  },
  "api/SipLib.Rtp.RtcpPacketType.html": {
    "href": "api/SipLib.Rtp.RtcpPacketType.html",
    "title": "Enum RtcpPacketType",
    "keywords": "Enum RtcpPacketType Enumeration for the RTCP packet type. Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public enum RtcpPacketType Fields Name Description ByePacket BYE Packet. See Section 6.6 of RFC 3550. ReceiverReport Receiver Report. See Section 6.4.2 of RFC 3550. SenderReport Sender Report. See Section 6.4.1 of RFC 3550. SourceDescriptionReport Source description report (SDES). See Section 6.5 of RFC 3550."
  },
  "api/SipLib.Rtp.RtpChannel.html": {
    "href": "api/SipLib.Rtp.RtpChannel.html",
    "title": "Class RtpChannel",
    "keywords": "Class RtpChannel Class for sending and receiving Real Time Protocol (RTP) media such as audio, video and text (RTT). Inheritance object RtpChannel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public class RtpChannel Properties | Edit this page View Source CertificateFingerprint Gets the fingerprint of the self-signed X.509 certificate that will be used for DTLS-SRTP. The certificate is a required SDP attribute for calls that offer or answer DTLS-SRTP media encryption. Declaration public static string? CertificateFingerprint { get; } Property Value Type Description string | Edit this page View Source MediaType Gets the media type for this RtpChannel Declaration public string MediaType { get; } Property Value Type Description string | Edit this page View Source SSRC Gets or sets the RTP SSRC for this RtpChannel. By default, the SSRC is set to a random unsigned 32-bit number so there is usually no need to change it by calling the setter. Declaration public uint SSRC { get; set; } Property Value Type Description uint Methods | Edit this page View Source CreateFromSdp(bool, Sdp, MediaDescription, Sdp, MediaDescription, bool, string?) Creates an RtpChannel using the offered and answered Session Description Protocol (SDP) parameters. Declaration public static (RtpChannel?, string?) CreateFromSdp(bool Incoming, Sdp OfferedSdp, MediaDescription OfferedMd, Sdp AnsweredSdp, MediaDescription AnsweredMd, bool enableRtcp, string? CNAME) Parameters Type Name Description bool Incoming Set to true if the call is incoming. Sdp OfferedSdp The SDP that was offered. MediaDescription OfferedMd The offered media description parameter block from the offered SDP Sdp AnsweredSdp The SDP that was answered. MediaDescription AnsweredMd The answered media description parameter block from the answered SDP bool enableRtcp If true, then RTCP packets will be sent periodically. string CNAME Cononical name to use for sending SDES RTCP packets that identify the media source. If null, then a default CNAME will be automatically generated. Returns Type Description (RtpChannel, string) Returns a (RtpChannel, string) tuple. If the RtpChannel return value is null then an error was detected and the string return value will contain an explanation of the error. If the RtpChannel return value is not null then the string return value will be null. | Edit this page View Source Send(RtpPacket) Sends an RTP packet to the remote endpoint Declaration public void Send(RtpPacket rtpPacket) Parameters Type Name Description RtpPacket rtpPacket | Edit this page View Source Shutdown() Shuts down this RtpChannel and releases all resources. This object cannot be used after this method is called. Declaration public void Shutdown() | Edit this page View Source StartListening() Starts the listener threads for RTP and RTCP. Declaration public void StartListening() Events | Edit this page View Source DtlsHandshakeFailed Event that is fired fired if the DTLS-SRTP handshake failed Declaration public event DtlsHandshakeFailedDelegate? DtlsHandshakeFailed Event Type Type Description DtlsHandshakeFailedDelegate | Edit this page View Source RtcpPacketReceived Event that is fired when a RTCP packet is received. Declaration public event RtcpPacketReceivedDelegate? RtcpPacketReceived Event Type Type Description RtcpPacketReceivedDelegate | Edit this page View Source RtcpPacketSent Event that is fired when this class sends an RTCP packet. Declaration public event RtcpPacketSentDelegate? RtcpPacketSent Event Type Type Description RtcpPacketSentDelegate | Edit this page View Source RtpPacketReceived Event that is fired when a RTP media packet has been received by this RtpChannel Declaration public event RtpPacketReceivedDelegate? RtpPacketReceived Event Type Type Description RtpPacketReceivedDelegate | Edit this page View Source RtpPacketSent Event that is fired when a RTP packet has been sent by this RtpChannel Declaration public event RtpPacketSentDelegate? RtpPacketSent Event Type Type Description RtpPacketSentDelegate"
  },
  "api/SipLib.Rtp.RtpPacket.html": {
    "href": "api/SipLib.Rtp.RtpPacket.html",
    "title": "Class RtpPacket",
    "keywords": "Class RtpPacket Class for handling Real Time Protocol (RTP) network packets. See RFC 3550. Inheritance object RtpPacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public class RtpPacket Constructors | Edit this page View Source RtpPacket() Constructs a RTP packet containing only a RTP packet header without a payload. Declaration public RtpPacket() | Edit this page View Source RtpPacket(byte[]) Constructs a RTP packet from an array of bytes. Declaration public RtpPacket(byte[] SrcBytes) Parameters Type Name Description byte[] SrcBytes Byte array to \"attach\" to. Must be at least MIN_PACKET_LENGTH bytes long. | Edit this page View Source RtpPacket(int) Creates an new RTP packet given the length of the payload in bytes. The RTP header will be 12 bytes. Declaration public RtpPacket(int PayloadLength) Parameters Type Name Description int PayloadLength Number of bytes in the payload. Fields | Edit this page View Source CSRC_LENGTH Length of each CSRC in bytes Declaration public const int CSRC_LENGTH = 4 Field Value Type Description int | Edit this page View Source MIN_PACKET_LENGTH Minimum RTP packet length. This assumes that CSRCs are included. Declaration public const int MIN_PACKET_LENGTH = 12 Field Value Type Description int Properties | Edit this page View Source CSRCs Gets a list of CSRCs (contributing source identifiers) for this RTP packet. Declaration public List<uint>? CSRCs { get; } Property Value Type Description List<uint> | Edit this page View Source CsrcCount Gets or sets the CSRC Count. Declaration public int CsrcCount { get; set; } Property Value Type Description int | Edit this page View Source HeaderLength Gets the length of the RTP packet header. Declaration public int HeaderLength { get; } Property Value Type Description int | Edit this page View Source Marker Gets or sets the M (marker) bit. Declaration public bool Marker { get; set; } Property Value Type Description bool | Edit this page View Source PacketBytes Gets the entire packet byte array Declaration public byte[]? PacketBytes { get; } Property Value Type Description byte[] | Edit this page View Source Padding Gets or sets the Padding bit. Declaration public bool Padding { get; set; } Property Value Type Description bool | Edit this page View Source Payload Gets or sets the payload of the RTP packet. Declaration public byte[]? Payload { get; set; } Property Value Type Description byte[] Exceptions Type Condition ArgumentException Thrown by if the input packet is longer than the allocated payload length for this RTP packet. | Edit this page View Source PayloadLength Gets the number of bytes in the RTP packet payload. Declaration public int PayloadLength { get; } Property Value Type Description int | Edit this page View Source PayloadType Gets or sets the Payload Type (PT) field in the RTP header. The Payload Type must be between 0 and 127. Declaration public int PayloadType { get; set; } Property Value Type Description int | Edit this page View Source SSRC Gets or sets the synchronization source identifier (SSRC). Declaration public uint SSRC { get; set; } Property Value Type Description uint | Edit this page View Source SequenceNumber Gets or sets the Sequence Number field of the RTP packet header. Declaration public ushort SequenceNumber { get; set; } Property Value Type Description ushort | Edit this page View Source Timestamp Gets or sets the Timestamp field of the RTP packet header. Declaration public uint Timestamp { get; set; } Property Value Type Description uint | Edit this page View Source Version Gets the Version field. Declaration public int Version { get; } Property Value Type Description int Methods | Edit this page View Source GetCSRC(int) Gets a CSRC specified by its index. Declaration public uint GetCSRC(int Idx) Parameters Type Name Description int Idx Index of the CSRC to get. Returns Type Description uint Returns the specified CSRC. Returns 0 if the index is out range. | Edit this page View Source GetHeaderBytes() Gets only the bytes from the header portion of the RTP packet. Declaration public byte[] GetHeaderBytes() Returns Type Description byte[] Returns a byte array containing the header bytes. | Edit this page View Source GetPayloadBytes() Strips out the RTP packet header and returns new byte array containing the packet payload. Declaration public byte[]? GetPayloadBytes() Returns Type Description byte[] Returns null if there is no payload or a new byte array containing the payload bytes if there is a payload for the RTP packet. | Edit this page View Source IncrementSequenceNumber() Increments the SequenceNumber (SEQ) by 1 and accounts for wrap around Declaration public void IncrementSequenceNumber() | Edit this page View Source SetCSRC(int, uint) Sets a CSRC value. Declaration public void SetCSRC(int Idx, uint CSRC) Parameters Type Name Description int Idx Index of the CSRC to set. uint CSRC CSRC value. | Edit this page View Source SetPayloadBytes(byte[]) Sets the payload bytes in the packet. Declaration public void SetPayloadBytes(byte[] payloadBytes) Parameters Type Name Description byte[] payloadBytes Contains the payload bytes. The length must be equal to PayloadLength"
  },
  "api/SipLib.Rtp.RtpPacketReceivedDelegate.html": {
    "href": "api/SipLib.Rtp.RtpPacketReceivedDelegate.html",
    "title": "Delegate RtpPacketReceivedDelegate",
    "keywords": "Delegate RtpPacketReceivedDelegate Delegate type for the RtpPacketReceived event of the RtpChannel class. Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public delegate void RtpPacketReceivedDelegate(RtpPacket rtpPacket) Parameters Type Name Description RtpPacket rtpPacket Contains the un-encrypted RtpPacket that was received"
  },
  "api/SipLib.Rtp.RtpPacketSentDelegate.html": {
    "href": "api/SipLib.Rtp.RtpPacketSentDelegate.html",
    "title": "Delegate RtpPacketSentDelegate",
    "keywords": "Delegate RtpPacketSentDelegate Delegate type for the RtpPacketSent event of the RtpChannel class. Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public delegate void RtpPacketSentDelegate(RtpPacket rtpPacket) Parameters Type Name Description RtpPacket rtpPacket Contains the un-encrypted RtpPacket that was send"
  },
  "api/SipLib.Rtp.RtpUtils.html": {
    "href": "api/SipLib.Rtp.RtpUtils.html",
    "title": "Class RtpUtils",
    "keywords": "Class RtpUtils This class contains various static functions for reading and writing words, double words (4 bytes) and double double words (8 bytes) from byte arrays. Inheritance object RtpUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public class RtpUtils Methods | Edit this page View Source DateTimeToNtpTimestamp(DateTime) Converts specified DateTime value to long NTP time. Declaration public static ulong DateTimeToNtpTimestamp(DateTime value) Parameters Type Name Description DateTime value DateTime value to convert. This value must be in local time. Returns Type Description ulong Returns NTP Timestamp value. | Edit this page View Source DumpByteArray(byte[]) Declaration public static void DumpByteArray(byte[] Ary) Parameters Type Name Description byte[] Ary | Edit this page View Source Get3Bytes(byte[], int) Gets a 24-bit value from a 3-byte array into a UInt32. Declaration public static uint Get3Bytes(byte[] SrcBytes, int idx) Parameters Type Name Description byte[] SrcBytes Source byte array. Must contain at least 3 bytes starting at the idx value. The byte order must be Big-Endian (MSB first). int idx Starting index of the 24-bit field. Returns Type Description uint The 24-bit value packeted into the least significant 3 bytes of a uint value | Edit this page View Source Get8ByteWord(byte[], int) Gets a ulong (64-bit) value from a byte array starting at the specified index value with the MSB first (Big Endian format). Declaration public static ulong Get8ByteWord(byte[] SrcBytes, int idx) Parameters Type Name Description byte[] SrcBytes Source byte array. Must contain at least 8 bytes starting at the idx value. int idx Starting index of the 8 byte long field. Returns Type Description ulong Returns the ulong value. | Edit this page View Source GetDWord(byte[], int) Gets a uint (32-bit DWORD) value from a byte array starting at the specified index value with the MSB first (Big Endian format). Declaration public static uint GetDWord(byte[] SrcBytes, int idx) Parameters Type Name Description byte[] SrcBytes Source byte array. Must contain at least 4 bytes starting at the idx value. int idx Starting index of the 4 byte long field. Returns Type Description uint Returns the uint value. | Edit this page View Source GetWord(byte[], int) Gets a ushort value (16-bit WORD) from a byte array that contains the MSB first (Big Endian format). Declaration public static ushort GetWord(byte[] SrcBytes, int i) Parameters Type Name Description byte[] SrcBytes Source array. Must contain at least 2 bytes starting at the idx value. int i Starting index of the 2 byte long field within the array. Returns Type Description ushort Returns the word value. | Edit this page View Source NtpTimeStampToDateTime(ulong) Converts a NTP timestamp value (as received in an RTCP packet or from an NTP server) to a UTC DateTime value. Declaration public static DateTime NtpTimeStampToDateTime(ulong NtpTimeStamp) Parameters Type Name Description ulong NtpTimeStamp NTP timestamp value to convert. Returns Type Description DateTime Return a UTC DateTime value. Returns DateTime.MinValue if the input NtpTimeStamp parameter is 0 or otherwise not valid. Remarks The caller must be prepared to deal with the case where the returned DateTime value is equal to DateTime.MinValue. | Edit this page View Source Set3Bytes(byte[], int, uint) Loads the 3 least significant bytes into a 3-byte long destination byte array with the MSB first (Big Endian format). Declaration public static void Set3Bytes(byte[] DestBytes, int i, uint DWord) Parameters Type Name Description byte[] DestBytes Destination byte aray. Must contain at least 3 bytes starting at the idx value. int i Starting index of the 24-bit field. uint DWord Contains the 24-bit value to load. | Edit this page View Source Set8ByteWord(byte[], int, ulong) Loads a ulong value (64-bit word) into a byte array starting at the specified index value with the MSB first (Big Endian format). Declaration public static void Set8ByteWord(byte[] DestBytes, int Start, ulong DDw) Parameters Type Name Description byte[] DestBytes Destination byte array. Must contain at least 8 bytes starting at the Start value. int Start Starting index of the 8 byte long field. ulong DDw 64-bit value to load. | Edit this page View Source SetDWord(byte[], int, uint) Loads a uint value (32-bit DWORD) into a byte array starting at the specified index value with the MSB first (Big Endian format). Declaration public static void SetDWord(byte[] DestBytes, int Start, uint DWord) Parameters Type Name Description byte[] DestBytes Destination byte array. Must contain at least 4 bytes starting at the Start value. int Start Starting index of the 4 byte long field. uint DWord 32-bit value to load. | Edit this page View Source SetWord(byte[], int, ushort) Loads a ushort value (16-bit WORD) into a byte array starting at the specified index value with the MSB first (Big Endian format). Declaration public static void SetWord(byte[] DestBytes, int Start, ushort Word) Parameters Type Name Description byte[] DestBytes Destination byte array. Must contain at least 2 bytes starting at the Start value. int Start Starting index of the 2 byte long field. ushort Word 16-bit value to load."
  },
  "api/SipLib.Rtp.SdesChunk.html": {
    "href": "api/SipLib.Rtp.SdesChunk.html",
    "title": "Class SdesChunk",
    "keywords": "Class SdesChunk Class for parsing and building a SDES chunk for an RTCP SDES packet. See Section 6.5 of RFC 3550. Inheritance object SdesChunk Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public class SdesChunk Constructors | Edit this page View Source SdesChunk() Constructor Declaration public SdesChunk() | Edit this page View Source SdesChunk(uint, SdesItem) Constructs a new SdesChunk for sending as part of a RTCP packet given the SSRC and a SdesItem. Declaration public SdesChunk(uint Ssrc, SdesItem Sdi) Parameters Type Name Description uint Ssrc SSRC that identifies the media source. SdesItem Sdi SdesItem object to add to the list of items. | Edit this page View Source SdesChunk(uint, List<SdesItem>) Constructs a new SdesChunk for sending as part of a RTCP SdesPacket. Declaration public SdesChunk(uint Ssrc, List<SdesItem> Items) Parameters Type Name Description uint Ssrc SSRC that identifies the media source. List<SdesItem> Items List of SDES items. The list should include at least one SDES item. Properties | Edit this page View Source Items Gets the list of SDES items in this chunk. Declaration public List<SdesItem> Items { get; } Property Value Type Description List<SdesItem> | Edit this page View Source SSRC Gets or sets the synchronization source (SSRC) of this chunk. Declaration public uint SSRC { get; set; } Property Value Type Description uint | Edit this page View Source TotalLength Gets the total length of the SDES chunk that was received and parsed. Do not use this property if constructing a SdesChunk item to send. Declaration public int TotalLength { get; } Property Value Type Description int Methods | Edit this page View Source Parse(byte[], int) Parses a byte array containing the data for a SdesChunk. Declaration public static SdesChunk? Parse(byte[] Bytes, int StartIdx) Parameters Type Name Description byte[] Bytes Input byte array int StartIdx Index of the first byte of the SdesChunk object. Returns Type Description SdesChunk Returns a SdesChunk object or null if an error occurred. | Edit this page View Source ToByteArray() Converts this object to a byte array for sending it. Declaration public byte[] ToByteArray() Returns Type Description byte[] Returns a byte array containing the binary version of this object. Returns null if there is no payload or the SDES chunk is not valid."
  },
  "api/SipLib.Rtp.SdesItem.html": {
    "href": "api/SipLib.Rtp.SdesItem.html",
    "title": "Class SdesItem",
    "keywords": "Class SdesItem Class for parsing and building SDES items. See Section 6.5 of RFC 3550. Inheritance object SdesItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public class SdesItem Constructors | Edit this page View Source SdesItem(SdesItemType, string) Constructs a new SdesItem for sending as part of a SDES chunk. Declaration public SdesItem(SdesItemType Sit, string strPayload) Parameters Type Name Description SdesItemType Sit Type of SDES item. string strPayload String containing the payload. Properties | Edit this page View Source ItemType Gets the SDES item type. Declaration public SdesItemType ItemType { get; } Property Value Type Description SdesItemType | Edit this page View Source Payload Gets the string value of the payload. Returns null if there is no payload. Declaration public string? Payload { get; } Property Value Type Description string | Edit this page View Source SdesItemLength Gets the total number of bytes in this SDES item. This includes the SDES item byte byte, the length byte and the payload bytes. Declaration public int SdesItemLength { get; } Property Value Type Description int Methods | Edit this page View Source Parse(byte[], int) Parses a byte array into an SdesItem Declaration public static SdesItem? Parse(byte[] Bytes, int StartIdx) Parameters Type Name Description byte[] Bytes Input byte array containing the SdesItem data to parse int StartIdx Starting index in the input array Returns Type Description SdesItem Returns an SdesItem if successful or null if an error occurred | Edit this page View Source ToByteArray() Converts this SdesItem to a byte array for loading it into a SDES chunk. Declaration public byte[]? ToByteArray() Returns Type Description byte[] Returns the byte array for this object. Returns null if there is no payload."
  },
  "api/SipLib.Rtp.SdesItemType.html": {
    "href": "api/SipLib.Rtp.SdesItemType.html",
    "title": "Enum SdesItemType",
    "keywords": "Enum SdesItemType Enumeration for identifying a SDES chunk type. See Section 6.5 of RFC 3550. Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public enum SdesItemType Fields Name Description CNAME Canonical End-Point Identifier SDES item EMAIL Electronic Mail Address SDES Item LOC Geographic User Location SDES Item NAME User name SDES item NOTE Notice/Status SDES Item. PHONE Phone Number SDES Item PRIV Private Extensions SDES Item TOOL Appplication or Tool Name SDES Item"
  },
  "api/SipLib.Rtp.SdesPacket.html": {
    "href": "api/SipLib.Rtp.SdesPacket.html",
    "title": "Class SdesPacket",
    "keywords": "Class SdesPacket Class for parsing and building SDES (Source Description) RTCP packets. See Section 6.5 of RFC 3550. Inheritance object SdesPacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public class SdesPacket Constructors | Edit this page View Source SdesPacket(List<SdesChunk>) Constructs a new SDES RTCP packet for sending. Declaration public SdesPacket(List<SdesChunk> Scs) Parameters Type Name Description List<SdesChunk> Scs List of SdesChunk objects. The list should contain at least 1 SdesChunk object. | Edit this page View Source SdesPacket(uint, SdesItem) Constructs a new SdesPacke for sending given a SSRC and a SdesItem. Declaration public SdesPacket(uint SSRC, SdesItem Sdi) Parameters Type Name Description uint SSRC SSRC that identifies the media source. SdesItem Sdi SDES item to send. Properties | Edit this page View Source Chunks Gets the list of SDES chunks in the packet. Declaration public List<SdesChunk> Chunks { get; } Property Value Type Description List<SdesChunk> | Edit this page View Source Header Gets the RTCP header. Declaration public RtcpHeader? Header { get; } Property Value Type Description RtcpHeader Methods | Edit this page View Source Parse(byte[], int) Parses the data in a byte array from a RTCP packet received from the network into a SdesPacket object. Declaration public static SdesPacket? Parse(byte[] Bytes, int StartIdx) Parameters Type Name Description byte[] Bytes Input byte array int StartIdx Stating index of the SdesPacket data in the input byte array Returns Type Description SdesPacket Returns a SdesPacket object if successful or null if an error occurred | Edit this page View Source ToByteArray() Converts this SdesPacket object to a byte array for sending it over the network. Declaration public byte[] ToByteArray() Returns Type Description byte[] Returns this object converted to a byte array."
  },
  "api/SipLib.Rtp.SenderInfo.html": {
    "href": "api/SipLib.Rtp.SenderInfo.html",
    "title": "Class SenderInfo",
    "keywords": "Class SenderInfo Class for the Sender Info part of a Sender Report RTCP packet. See Section 6.4.1 of RFC 3550. Inheritance object SenderInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public class SenderInfo Constructors | Edit this page View Source SenderInfo() Constructs a new SenderInfo object. Use this constructor when building a new RTCP packet for to send a Sender Report. Declaration public SenderInfo() Fields | Edit this page View Source SENDER_INFO_BLOCK_LENGTH Fixed length of a SenderInfo block Declaration public const int SENDER_INFO_BLOCK_LENGTH = 20 Field Value Type Description int Properties | Edit this page View Source NTP Gets UTC time from the NTP timestamp or sets the NTP timestamp field from the UTC time. Declaration public DateTime NTP { get; set; } Property Value Type Description DateTime | Edit this page View Source RtpTimestamp Gets or sets the RTP Timestamp field. Declaration public uint RtpTimestamp { get; set; } Property Value Type Description uint | Edit this page View Source SenderInfoLength Gets the length of the SendInfo block. Declaration public int SenderInfoLength { get; } Property Value Type Description int | Edit this page View Source SenderOctetCount Gets or sets the Sender Octet Count field. Declaration public uint SenderOctetCount { get; set; } Property Value Type Description uint | Edit this page View Source SenderPacketCount Gets or sets the Sender Packet Count field. Declaration public uint SenderPacketCount { get; set; } Property Value Type Description uint Methods | Edit this page View Source LoadBytes(byte[], int) Loads this object into a destination byte array. Declaration public void LoadBytes(byte[] Dest, int StartIdx) Parameters Type Name Description byte[] Dest The destination byte array. Must be long enough to hold this object beginning at the StartIdx position. int StartIdx Index in the destination to start loading the bytes into. | Edit this page View Source Parse(byte[], int) Parses a byte array and returns a SenderInfo object. Declaration public static SenderInfo? Parse(byte[] Bytes, int StartIdx) Parameters Type Name Description byte[] Bytes Input byte array int StartIdx Starting index of the SenderInfo data in the input byte array. Returns Type Description SenderInfo Returns a SenderInfo object if successful or null if an error occurred."
  },
  "api/SipLib.Rtp.SenderReport.html": {
    "href": "api/SipLib.Rtp.SenderReport.html",
    "title": "Class SenderReport",
    "keywords": "Class SenderReport Class for building and parsing RTCP Sender Report packets. Inheritance object SenderReport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Rtp Assembly: SipLib.dll Syntax public class SenderReport Constructors | Edit this page View Source SenderReport() Constructs a new SenderReport object. Use this constructor when building a new SenderReport RTCP packet to send. Declaration public SenderReport() Properties | Edit this page View Source GetReportBlocks Gets the list Report Blocks for this SenderReport. Declaration public List<ReportBlock> GetReportBlocks { get; } Property Value Type Description List<ReportBlock> | Edit this page View Source Header Gets the RTCP header. Declaration public RtcpHeader? Header { get; } Property Value Type Description RtcpHeader | Edit this page View Source SSRC Gets or sets the SSRC of the sender. Declaration public uint SSRC { get; set; } Property Value Type Description uint | Edit this page View Source SenderInfo Gets the SenderInfo object. Declaration public SenderInfo? SenderInfo { get; } Property Value Type Description SenderInfo Methods | Edit this page View Source AddReportBlock(ReportBlock) Adds a new ReportBlock object to the list of ReportBlocks. Declaration public void AddReportBlock(ReportBlock Rb) Parameters Type Name Description ReportBlock Rb ReportBlock to add to the list of report blocks | Edit this page View Source GetTotalBytes() Calculates the total number of bytes necessary to hold this object in a byte array. Declaration public int GetTotalBytes() Returns Type Description int The number of bytes required for this object. | Edit this page View Source LoadBytes(byte[], int) Loads this object into a destination byte array. Declaration public void LoadBytes(byte[] Dest, int StartIdx) Parameters Type Name Description byte[] Dest The destination byte array. This array must be long enough to hold this object beginning at the StartIdx position. int StartIdx Index in Dest to load the bytes into. | Edit this page View Source Parse(byte[]) Parses a byte array and creates a SenderReport object. Declaration public static SenderReport? Parse(byte[] Bytes) Parameters Type Name Description byte[] Bytes Input byte array Returns Type Description SenderReport Returns a SenderReport object if successful or null if an error occurred. | Edit this page View Source Parse(byte[], int) Parses a byte array and creates a SenderReport object. Declaration public static SenderReport? Parse(byte[] Bytes, int StartIdx) Parameters Type Name Description byte[] Bytes Input byte array int StartIdx Starting index of the SenderReport data in the input byte array Returns Type Description SenderReport Returns a SenderReport object if successful or null if an error occurred. | Edit this page View Source ToByteArray() Converts this RTCP SenderReport object to a byte array so that it can sent over the network. Declaration public byte[] ToByteArray() Returns Type Description byte[] Returns a byte array containing an RTCP Sender Report."
  },
  "api/SipLib.Rtp.html": {
    "href": "api/SipLib.Rtp.html",
    "title": "Namespace SipLib.Rtp",
    "keywords": "Namespace SipLib.Rtp Classes for the Real Time Protocol (RTP, see RFC 3550). The main class is called RtpChannel. This class supports unencrypted RTP media as well as encryption using the SDES-SRTP (RFC 3711, RFC 4568) and SDES-DTLS (RFC 5763, RFC 5764) protocols. Classes ByePacket Class for building and parsing RTCP BYE packets. See Section 6.6 of RFC 3550. DtmfPacket Class for representing a DTMF event packet RTP payload. See Section 2.3 of RFC 4733. JitterStatistics Container class for storing RTP packet jitter statistics for a sampled interval MeanOpinionScore Class for calculating and storing the Mean Opinion Score (MOS) values. The MOS is a numerical estimation of the audio quality. ReceiverReport Class for building and parsing RTCP Receiver Report packets. See Section 6.4.2 of RFC 3550. ReportBlock Class for building or parsing the report block portion of a RTCP Sender Report or Receiver Report. See Section 6.4.1 of RFC 3550. RtcpCompoundPacket Class for building and sending compound RTCP packets and for parsing and processing compound RTCP packets received from the network. See RFC 3550. RtcpHeader Class for creating and parsing Real Time Control Protocol (RTCP) headers. RtpChannel Class for sending and receiving Real Time Protocol (RTP) media such as audio, video and text (RTT). RtpPacket Class for handling Real Time Protocol (RTP) network packets. See RFC 3550. RtpUtils This class contains various static functions for reading and writing words, double words (4 bytes) and double double words (8 bytes) from byte arrays. SdesChunk Class for parsing and building a SDES chunk for an RTCP SDES packet. See Section 6.5 of RFC 3550. SdesItem Class for parsing and building SDES items. See Section 6.5 of RFC 3550. SdesPacket Class for parsing and building SDES (Source Description) RTCP packets. See Section 6.5 of RFC 3550. SenderInfo Class for the Sender Info part of a Sender Report RTCP packet. See Section 6.4.1 of RFC 3550. SenderReport Class for building and parsing RTCP Sender Report packets. Enums DtmfEventEnum Enumeration of DTMF event codes. See Section 3.2 of RFC 4733. RtcpPacketType Enumeration for the RTCP packet type. SdesItemType Enumeration for identifying a SDES chunk type. See Section 6.5 of RFC 3550. Delegates DtlsHandshakeFailedDelegate Delegate type for the DtlsHandshakeFailed event of the RtpChannel class RtcpPacketReceivedDelegate Delegate type for the RtcpPacketReceived event of the RtpChannel class. RtcpPacketSentDelegate Delegate type for the RtcpPacketSent event of the RtpChannel class. RtpPacketReceivedDelegate Delegate type for the RtpPacketReceived event of the RtpChannel class. RtpPacketSentDelegate Delegate type for the RtpPacketSent event of the RtpChannel class."
  },
  "api/SipLib.RtpCrypto.AesFunctions.html": {
    "href": "api/SipLib.RtpCrypto.AesFunctions.html",
    "title": "Class AesFunctions",
    "keywords": "Class AesFunctions This class contains static fuctions for performing AES encryption and decryption operations for SRTP and SRTCP. Inheritance object AesFunctions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.RtpCrypto Assembly: SipLib.dll Syntax public static class AesFunctions Methods | Edit this page View Source AesCounterModeTransform(byte[], byte[], byte[], byte[]) Encrypts or decrypts a block of bytes using AES in Counter Mode. RFC 3711 defines the AES Counter Mode algorithm for SRTP and SRTCP. Declaration public static void AesCounterModeTransform(byte[] key, byte[] salt, byte[] Input, byte[] Output) Parameters Type Name Description byte[] key Encryption key. The array length must be a valid length for the AES algorithm. Valid lengths are: 16 bytes (AES-128), 24 bytes (AES-192) or 32 bytes (AES-256). byte[] salt Salt value to use. This must be 16 bytes (128 bits) long. byte[] Input Input byte array to encrypt or decrypt. byte[] Output Output encrypted or decrypted byte array. Must be the same length or longer than the Input input array. Remarks This function can be used to either encrypt an input array or to produce a key stream which can then be used to encrypt some data.To encrypt data, pass the data into the Input array. To generate a key stream, pass in an array of 0s in the Input array and the Output array will contain the key stream.. Then XOR the key stream in the Output array with the data to be encrypted. The encryption and decryption operations are symetric. To encrypt a packet, pass in the plain text as the input. To decrypt a packet, pass in the encrypted packet as the input. | Edit this page View Source AesCounterModeTransform(byte[], byte[], byte[], int, int, byte[]) Encrypts or decrypts a block of bytes using AES in Counter Mode. RFC 3711 defines the AES Counter Mode algorithm for SRTP and SRTCP. Declaration public static void AesCounterModeTransform(byte[] key, byte[] salt, byte[] Input, int StartIdx, int NumInputBytes, byte[] Output) Parameters Type Name Description byte[] key Encryption key. The array length must be a valid length for the AES algorithm. Valid lengths are: 16 bytes (AES-128), 24 bytes (AES-192) or 32 bytes (AES-256). byte[] salt Salt value to use. This must be 16 bytes (128 bits) long. byte[] Input Input byte array to encrypt or decrypt. int StartIdx Starting index in the Input array. int NumInputBytes Number of bytes in the input array to process. byte[] Output Output encrypted or decrypted byte array. Must be the same length or longer than NumInputBytes Remarks This function can be used to either encrypt an input array or to produce a key stream which can then be used to encrypt some data.To encrypt data, pass the data into the Input array. To generate a key stream, pass in an array of 0s in the Input array and the Output array will contain the key stream.. Then XOR the key stream in the Output array with the data to be encrypted. The encryption and decryption operations are symetric. To encrypt a packet, pass in the plain text as the input. To decrypt a packet, pass in the encrypted packet as the input. | Edit this page View Source AesF8ModeTransform(byte[], byte[], byte[], byte[], byte[]) Encrypts or Decrypts a block of bytes using the AES in F8 mode. Section 4.1.2.1 of RFC 3711 specifies the AES in F8 mode algorithm. This algorithm only supports AES-128. Declaration public static void AesF8ModeTransform(byte[] k_e, byte[] k_s, byte[] IV, byte[] Input, byte[] Output) Parameters Type Name Description byte[] k_e Encryption key. Must be 16 bytes (128 bits) long. byte[] k_s Salt value to use. byte[] IV Initialization Vector (IV) to use. Must be the same length as the k_e input array. byte[] Input Input byte array to encrypt or decrypt. byte[] Output Output encrypted or decrypted byte array. Must be the same length or longer than the Input input array. Remarks This function can be used to either encrypt an input array or to produce a key stream which can then be used to encrypt some data.To encrypt data, pass the data into the Input array. To generate a key stream, pass in an array of 0s in the Input array and the Output array will contain the key stream.. Then XOR the key stream in the Output array with the data to be encrypted. The encryption and decryption operations are symetric. To encrypt a packet, pass in the plain text as the input. To decrypt a packet, pass in the encrypted packet as the input. | Edit this page View Source AesF8ModeTransform(byte[], byte[], byte[], byte[], int, int, byte[]) Encrypts or Decrypts a block of bytes using the AES in F8 mode. Section 4.1.2.1 of RFC 3711 specifies the AES in F8 mode algorithm. This algorithm only supports AES-128. Declaration public static void AesF8ModeTransform(byte[] k_e, byte[] k_s, byte[] IV, byte[] Input, int StartIdx, int NumInputBytes, byte[] Output) Parameters Type Name Description byte[] k_e Encryption key. Must be 16 bytes (128 bits) long. byte[] k_s Salt value to use. byte[] IV Initialization Vector (IV) to use. Must be the same length as the k_e input array. byte[] Input Input byte array to encrypt or decrypt. int StartIdx The index in the Input array to start processing at. int NumInputBytes The number of bytes in the Input array to process. byte[] Output Output encrypted or decrypted byte array. Must be the same length or longer than the Input input array. Remarks This function can be used to either encrypt an input array or to produce a key stream which can then be used to encrypt some data.To encrypt data, pass the data into the Input array. To generate a key stream, pass in an array of 0s in the Input array and the Output array will contain the key stream.. Then XOR the key stream in the Output array with the data to be encrypted. The encryption and decryption operations are symetric. To encrypt a packet, pass in the plain text as the input. To decrypt a packet, pass in the encrypted packet as the input."
  },
  "api/SipLib.RtpCrypto.CryptoAttribute.html": {
    "href": "api/SipLib.RtpCrypto.CryptoAttribute.html",
    "title": "Class CryptoAttribute",
    "keywords": "Class CryptoAttribute Class for the crypto SDP attribute for SRTP. See Section 9 of RFC 4568. The format is like: a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:4 There may be more than one inline parameter. inline parameters are delimited by a \";\". Inheritance object CryptoAttribute Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.RtpCrypto Assembly: SipLib.dll Syntax public class CryptoAttribute Fields | Edit this page View Source CryptoSuite Specifies the crypto-suite to use. The default is AES_CM_128_HMAC_SHA1_80. Declaration public string CryptoSuite Field Value Type Description string | Edit this page View Source FEC_KEY Specifies the fec-key session parameter. The value depends upon the FEC scheme being used. Optional. Set to null if it is not specified. Declaration public string? FEC_KEY Field Value Type Description string | Edit this page View Source FEC_ORDER Specifies the fec-order (for forward error correction) session parameter. Must be \"FEC_SRTP\" or \"SRTP_FEC\". Optional. Set to null if it is not specified. Declaration public string? FEC_ORDER Field Value Type Description string | Edit this page View Source InlineParameters Contains a list of key-params. This list must contain at least 1 element. Declaration public List<InlineParams> InlineParameters Field Value Type Description List<InlineParams> | Edit this page View Source KDR Specifies the Key Derivation Rate. Must be in the range of 0 - 24 and is an integer power of 2. Optional. Set to -1 to indicate not specified. An unspecified KDR means that the default KDR of 0 should be used. Declaration public int KDR Field Value Type Description int | Edit this page View Source Tag Value of the tag parameter. Declaration public int Tag Field Value Type Description int | Edit this page View Source WSH Specifies the Window Size Hint used for replay detection. This session parameter is optional. The minimum value is 64. A value of -1 indicates that the field has not been set. Declaration public int WSH Field Value Type Description int Methods | Edit this page View Source Parse(string) Parses the value portion of a crypto SDP attribute. See Section 9.1 of RFC 4568. The ABNF for the value portion of this attribute is: tag 1WSP crypto-suite 1WSP key-params (1WSP session-param) Declaration public static CryptoAttribute? Parse(string strCrypto) Parameters Type Name Description string strCrypto Input containing the value portion of a crypto SDP attribute. Returns Type Description CryptoAttribute Returns a new CryptoAttribute object if successful or null if an error occurred. | Edit this page View Source ToString() Converts this object to a string. Declaration public string ToString() Returns Type Description string Returns the string version of this object that can be used for the parameters part of a crypto SDP attribute."
  },
  "api/SipLib.RtpCrypto.CryptoContext.html": {
    "href": "api/SipLib.RtpCrypto.CryptoContext.html",
    "title": "Class CryptoContext",
    "keywords": "Class CryptoContext Class for storing the settings and status of the cryptographic context for SRTP and SRTCP. Inheritance object CryptoContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.RtpCrypto Assembly: SipLib.dll Syntax public class CryptoContext Constructors | Edit this page View Source CryptoContext(string) Creates a new CryptoContext object with a single MasterKey. Use this constructor when building a SRTP crypto context for sending SRTP and SRTCP packets. Declaration public CryptoContext(string cryptoSuite) Parameters Type Name Description string cryptoSuite Specifies the name of the crypto suite to use. Fields | Edit this page View Source AuthTagLength Specifies the length in bytes of the packet authentication tag that is appended to each RTP or RTCP packet. Will be equal to 10 or 4 depending upon the crypto suite being used. Declaration public int AuthTagLength Field Value Type Description int | Edit this page View Source CurrentRtcpMasterKeyIndex Index of the current maser key in the MasterKeys list for RTCP. Declaration public int CurrentRtcpMasterKeyIndex Field Value Type Description int | Edit this page View Source CurrentRtpMasterKeyIndex Index of the current master key in the MasterKeys list for RTP. Declaration public int CurrentRtpMasterKeyIndex Field Value Type Description int | Edit this page View Source HighestSeq Highest received RTP sequence number. This value is the s_l variable in Section 3.3.1 of RFC 3711. This is used by the receiver only. Declaration public ushort HighestSeq Field Value Type Description ushort | Edit this page View Source MasterKeys Contains the master keys and master salts used for this crypto context. Will contain at least one entry. Declaration public List<MasterKeys> MasterKeys Field Value Type Description List<MasterKeys> | Edit this page View Source MaxSendRtcpIndex Maximum RTCP Index value. 2^31 - 1 because only 31 bits of the RTCP index are used, the MS bit is used to indicate encryption. Declaration public const uint MaxSendRtcpIndex = 2147483647 Field Value Type Description uint | Edit this page View Source MkiIndicator If true, then each SRTP or SRTCP packet will be appended by a Master Key Indentifier (MKI) value that identifies the master encryption key used for that packet. If false, then no MKI will be attached to the packets. Declaration public bool MkiIndicator Field Value Type Description bool | Edit this page View Source MkiLength Specifies the length in bytes of the MKI attached to each SRTP or SRTCP packet. Used only if MkiIndicator is true. Declaration public int MkiLength Field Value Type Description int | Edit this page View Source ROC Current Roll Over Counter (ROC) values. The ROC represents the number of times that the SEQ number of the SRTP packets has been reset to 0. The ROC is not used for RTCP. Declaration public RocVals ROC Field Value Type Description RocVals | Edit this page View Source RtcpSessionKeys Stores the current session keys (key, salt and auth. key) for SRTCP. Declaration public SessionKeys RtcpSessionKeys Field Value Type Description SessionKeys | Edit this page View Source RtpSessionKeys Stores the current session keys (key, salt and auth. key) for SRTP. Declaration public SessionKeys RtpSessionKeys Field Value Type Description SessionKeys | Edit this page View Source SendRtcpIndex SRTP Index used for sending RTCP packets Declaration public uint SendRtcpIndex Field Value Type Description uint Properties | Edit this page View Source CryptoSuite Gets the crypto suite name used by this crypto context. Declaration public string CryptoSuite { get; } Property Value Type Description string Methods | Edit this page View Source CreateFromCryptoAttribute(CryptoAttribute) Creates a new CryptoContext object from a CryptoAttribute object. Declaration public static CryptoContext CreateFromCryptoAttribute(CryptoAttribute attr) Parameters Type Name Description CryptoAttribute attr Input CryptoAttribute Returns Type Description CryptoContext Returns a new CryptoContext object | Edit this page View Source ToCryptoAttribute() Converts this crypto context object into a CryptoAttribute object. Declaration public CryptoAttribute ToCryptoAttribute() Returns Type Description CryptoAttribute Returns a new CryptoAttribute object"
  },
  "api/SipLib.RtpCrypto.CryptoSuites.html": {
    "href": "api/SipLib.RtpCrypto.CryptoSuites.html",
    "title": "Class CryptoSuites",
    "keywords": "Class CryptoSuites Class that provides information about the crypto suites for SRTP that this class library supports. Inheritance object CryptoSuites Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.RtpCrypto Assembly: SipLib.dll Syntax public class CryptoSuites Fields | Edit this page View Source AES_192_CM_HMAC_SHA1_32 See Table 2 of RFC 6188 Declaration public const string AES_192_CM_HMAC_SHA1_32 = \"AES_192_CM_HMAC_SHA1_32\" Field Value Type Description string | Edit this page View Source AES_192_CM_HMAC_SHA1_80 See Table 1 of RFC 6188 Declaration public const string AES_192_CM_HMAC_SHA1_80 = \"AES_192_CM_HMAC_SHA1_80\" Field Value Type Description string | Edit this page View Source AES_256_CM_HMAC_SHA1_32 See Table 4 of RFC 6188 Declaration public const string AES_256_CM_HMAC_SHA1_32 = \"AES_256_CM_HMAC_SHA1_32\" Field Value Type Description string | Edit this page View Source AES_256_CM_HMAC_SHA1_80 See Table 3 of RFC 6188 Declaration public const string AES_256_CM_HMAC_SHA1_80 = \"AES_256_CM_HMAC_SHA1_80\" Field Value Type Description string | Edit this page View Source AES_CM_128_HMAC_SHA1_32 See Section 6.2.2 of RFC 4568 Declaration public const string AES_CM_128_HMAC_SHA1_32 = \"AES_CM_128_HMAC_SHA1_32\" Field Value Type Description string | Edit this page View Source AES_CM_128_HMAC_SHA1_80 See Section 6.2.1 of RFC 4568 Declaration public const string AES_CM_128_HMAC_SHA1_80 = \"AES_CM_128_HMAC_SHA1_80\" Field Value Type Description string | Edit this page View Source F8_128_HMAC_SHA1_80 See Section 6.2.3 of RFC 4568 Declaration public const string F8_128_HMAC_SHA1_80 = \"F8_128_HMAC_SHA1_80\" Field Value Type Description string | Edit this page View Source SupportedAlgorithms Gets the list of supported SRTP cryptographic algorithms. This list is ordered from most preferred (most secure) to least preferred. Declaration public static List<string> SupportedAlgorithms Field Value Type Description List<string> Methods | Edit this page View Source CryptoSuiteIsSupported(string) Returns true if the crypto cryptoSuite is supported or false if it not Declaration public static bool CryptoSuiteIsSupported(string cryptoSuite) Parameters Type Name Description string cryptoSuite Name of the crypto cryptoSuite Returns Type Description bool True if the cryptoSuite is supported or false if it is not. | Edit this page View Source GetAuthTagLengthBytes(string) Gets the length in bytes of the authentication tag that is appended to each RTP and RTCP packet. Declaration public static int GetAuthTagLengthBytes(string cryptoSuite) Parameters Type Name Description string cryptoSuite Crypto suite. Returns Type Description int Returns the length of the SRTP authentication in bytes. The return value either be 10 or 4. | Edit this page View Source GetKeyLengthBytes(string) Gets the key length in bytes for a cryto suite Declaration public static int GetKeyLengthBytes(string cryptoSuite) Parameters Type Name Description string cryptoSuite The SRTP crypto suite that the inline parameters relate to Returns Type Description int Returns the expected key length"
  },
  "api/SipLib.RtpCrypto.InlineParams.html": {
    "href": "api/SipLib.RtpCrypto.InlineParams.html",
    "title": "Class InlineParams",
    "keywords": "Class InlineParams Class for storing and managing the parameter of the \"inline\" SRTP key-param of an SDP crypto media attribute. See Section 9 of RFC 4568. Inheritance object InlineParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.RtpCrypto Assembly: SipLib.dll Syntax public class InlineParams Fields | Edit this page View Source Lifetime Specifies the lifetime of the master key in RTP packets. A value of 0 indicates that the default lifetime is to be used. Must be an integral power of 2. A value of 0 indicates that the default lifetime of 2^48 should be used. Declaration public ulong Lifetime Field Value Type Description ulong | Edit this page View Source MKI Specifies the Master Key Identifier (MKI) for the master key. A value of 0 indicates that master key identifiers are not being used. Declaration public int MKI Field Value Type Description int | Edit this page View Source MKI_Length Specifies length in bytes of the MKI in the SRTP or SRTCP packet. Declaration public int MKI_Length Field Value Type Description int | Edit this page View Source MasterKey Contains the master key byte array. Must be a valid length for the AES algorithm (16 bytes for AES-128), (24 bytes for AES-192 or 32 bytes for AES-256). Declaration public byte[]? MasterKey Field Value Type Description byte[] | Edit this page View Source MasterSalt Contains the master salt byte array. Must be 14 bytes in length for SRTP. Declaration public byte[]? MasterSalt Field Value Type Description byte[] Methods | Edit this page View Source Parse(string, int) Parses the \"inline=\" portion of an SDP crypto attribute. Declaration public static InlineParams? Parse(string Inline, int KeyLength) Parameters Type Name Description string Inline String containing the \"inline=\" portion of the crypto attribute. Needs to be in the form: \"inline:MTIzNDU2Nzg5QUJDREUwMTIzNDU2Nzg5QUJjZGVm|2^20|1:4\". See Section 9.1 of RFC 4568. int KeyLength Master Key length in bytes. Must be 16, 24 or 32, depending on the crypto suite. Returns Type Description InlineParams Returns a new InlineParameters object if the input is valid or null if the input is not valid. | Edit this page View Source ToString() Converts this object into a formatted string for inclusion as an inline key param. in a crypto SDP attribute. Declaration public string ToString() Returns Type Description string Returns a string representation of this object."
  },
  "api/SipLib.RtpCrypto.MasterKeys.html": {
    "href": "api/SipLib.RtpCrypto.MasterKeys.html",
    "title": "Class MasterKeys",
    "keywords": "Class MasterKeys Class for storing a single SRTP master key, master salt and parameters related to these. Inheritance object MasterKeys Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.RtpCrypto Assembly: SipLib.dll Syntax public class MasterKeys Constructors | Edit this page View Source MasterKeys(string) Creates a new RtpMaster key object and initializes the MasterKey and the MasterSalt to random values. Declaration public MasterKeys(string cryptoSuite) Parameters Type Name Description string cryptoSuite Crypto suite to be used. Fields | Edit this page View Source KeyDerivationRate Stores the Key Derivation Rate (KDR). This is a power of 2 that is in the range of 1 to 24. This value specifies the number of packets after which the session keys are recalculated. A value of 0 indicates that the KDR is unspecified. This means that the session keys are only calculated from the master keys once. Declaration public ulong KeyDerivationRate Field Value Type Description ulong | Edit this page View Source MKI Master Key Identifier (MKI) for the master key. Declaration public uint MKI Field Value Type Description uint | Edit this page View Source MasterKey Contains the bytes of the master key. The key length depends on the AES encryption algorithm being used. Declaration public byte[]? MasterKey Field Value Type Description byte[] | Edit this page View Source MasterSalt Contains the bytes of the master salt. The length will always be 14 bytes for the AES-CM and AES-f8 encryption algorithms. Declaration public byte[]? MasterSalt Field Value Type Description byte[] | Edit this page View Source NumKdrPackets Specifies the number of packets for the KDR. This value if calculated as 2^KDR. Declaration public ulong NumKdrPackets Field Value Type Description ulong | Edit this page View Source RtcpMasterKeyCount The number of RTCP packets that have been sent using this master key. Declaration public long RtcpMasterKeyCount Field Value Type Description long | Edit this page View Source RtpMasterKeyCount Number of RTP packets that have been sent using this master key. Declaration public long RtpMasterKeyCount Field Value Type Description long Properties | Edit this page View Source CryptoSuite Gets the crypto suite name Declaration public string CryptoSuite { get; } Property Value Type Description string"
  },
  "api/SipLib.RtpCrypto.RocVals.html": {
    "href": "api/SipLib.RtpCrypto.RocVals.html",
    "title": "Class RocVals",
    "keywords": "Class RocVals Class for storing the Roll Over Counter (ROC) for SRTP encryption. The ROC counts the number of times that the RTP packet sequence number has wrapped around in a RTP media session. Inheritance object RocVals Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.RtpCrypto Assembly: SipLib.dll Syntax public class RocVals Fields | Edit this page View Source Roc Current ROC value. Declaration public uint Roc Field Value Type Description uint | Edit this page View Source RocMinus1 Stores the value of ROC - 1 Declaration public uint RocMinus1 Field Value Type Description uint | Edit this page View Source RocPlus1 Stores the value of ROC + 1 Declaration public uint RocPlus1 Field Value Type Description uint Methods | Edit this page View Source IncrementRoc() Increments the ROC Declaration public void IncrementRoc()"
  },
  "api/SipLib.RtpCrypto.RocValues.html": {
    "href": "api/SipLib.RtpCrypto.RocValues.html",
    "title": "Class RocValues",
    "keywords": "Class RocValues Class for storing the Roll Over Counter (ROC) for SRTP encryption. The ROC counts the number of times that the RTP packet sequence number has wrapped around in a RTP media session. See Section 3.3.1 of RFC 3711. Inheritance object RocValues Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.RtpCrypto Assembly: SipLib.dll Syntax public class RocValues Fields | Edit this page View Source Roc Current ROC value. Declaration public uint Roc Field Value Type Description uint | Edit this page View Source RocMinus1 Stores the value of ROC - 1 Declaration public uint RocMinus1 Field Value Type Description uint | Edit this page View Source RocPlus1 Stores the value of ROC + 1 Declaration public uint RocPlus1 Field Value Type Description uint Methods | Edit this page View Source IncrementRoc() Increments the Roll Over Counter (ROC) Declaration public void IncrementRoc()"
  },
  "api/SipLib.RtpCrypto.SRtpErrorsEnum.html": {
    "href": "api/SipLib.RtpCrypto.SRtpErrorsEnum.html",
    "title": "Enum SRtpErrorsEnum",
    "keywords": "Enum SRtpErrorsEnum Enumeration of SRTP error conditions Namespace: SipLib.RtpCrypto Assembly: SipLib.dll Syntax public enum SRtpErrorsEnum Fields Name Description AuthenticationFailed Packet authentication failed when decrypting an input packet. InputPacketTooShort The input packet was too short. MasterKeyNotFound The input packet for decryption contained an MKI, but the master key for that MKI was not found in the CryptoContext NoAuthenticationTag To input packet was too short to contain an authentication tag NoError No errors detected. NoMKI The CryptoContext specified that an MKI will be provided with each packet but the input packet did not contain an MKI."
  },
  "api/SipLib.RtpCrypto.SRtpUtils.html": {
    "href": "api/SipLib.RtpCrypto.SRtpUtils.html",
    "title": "Class SRtpUtils",
    "keywords": "Class SRtpUtils Static class that provides static functions for performing various Secure RTP (SRTP) calculations. Inheritance object SRtpUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.RtpCrypto Assembly: SipLib.dll Syntax public static class SRtpUtils Fields | Edit this page View Source n_a Default bit size of the authentication key. Declaration public const int n_a = 160 Field Value Type Description int | Edit this page View Source n_aB Default byte size of the authentication key. Declaration public const int n_aB = 20 Field Value Type Description int | Edit this page View Source n_b Bit size of the block for the block cipher Declaration public const int n_b = 128 Field Value Type Description int | Edit this page View Source n_e Bit size of the encryption key. Declaration public const int n_e = 128 Field Value Type Description int | Edit this page View Source n_eB Byte size of the encryption key Declaration public const int n_eB = 16 Field Value Type Description int | Edit this page View Source n_s Bit size of the session salting key Declaration public const int n_s = 112 Field Value Type Description int | Edit this page View Source n_sB Byte size of the session salting key Declaration public const int n_sB = 14 Field Value Type Description int | Edit this page View Source n_tag Default bit size of the authentication tag. Declaration public const int n_tag = 80 Field Value Type Description int | Edit this page View Source n_tagB Default byte size of the authentication tag. Declaration public const int n_tagB = 10 Field Value Type Description int Methods | Edit this page View Source AuthRtpPacket(byte[], byte[], uint, byte[], byte[]) Authenticates an SRTP or an SRTCP packet. See Section 4.2 of RFC 3711. This function computes the authentication tag for the packet using the HMAC-SHA1 algorithm and compares it to the authentication tag that was sent with the SRTP or SRTCP packet. Declaration public static bool AuthRtpPacket(byte[] HdrBytes, byte[] PacketPayload, uint ROCorSRTCPIndex, byte[] k_a, byte[] AuthTag) Parameters Type Name Description byte[] HdrBytes Byte array containing the RTP or RTCP packet header. byte[] PacketPayload Byte array containing the payload of the RTP or RTCP packet. This is the encrypted portion of the packet. uint ROCorSRTCPIndex Roll Over Counter (ROC) value or the SRTCP Index. byte[] k_a Byte array containing the session authentication key. byte[] AuthTag Byte array containing the authentication tag read from the SRTP packet. Returns Type Description bool Returns true if the packet is successfully authenticated, i.e. the computed authentication tag matches the received authentication tag. | Edit this page View Source CalcAesCmIV(byte[], uint, ulong) Calculates the Initialization Vector (IV) for AES in Counter Mode (AES-CM) as specified in Section 4.1.1 AES in Counter Mode of RFC 3711. Declaration public static byte[] CalcAesCmIV(byte[] k_s, uint SSRC, ulong i) Parameters Type Name Description byte[] k_s Session salting key. Must be at least n_sB bytes in length. uint SSRC SSRC value from the RTCP packet. ulong i Packet index for the RTP packet. Calculated as using the PacketIndex() function as specifed in Section 3.3.1 and Appendix A of RFC 3711. Returns Type Description byte[] Returns the IV array, which is n_eB (16) bytes in length. | Edit this page View Source CalcF8SRTCPIV(RtcpHeader, uint, uint) Calculates the Initialization Vector (IV) for the F8 AES encryption algorithm for a RTCP packet given the RTCP packet and the SRTCP packet index. See Section 4.1.2.3 of RFC 3711. Declaration public static byte[] CalcF8SRTCPIV(RtcpHeader RtcpHdr, uint SrtcpIndex, uint SSRC) Parameters Type Name Description RtcpHeader RtcpHdr RTCP packet header to compute the IV for. uint SrtcpIndex SRTCP packet index as read from the the SRTCP packet. Includes the \"E\" bit. See Figure 2 of RFC 3711. uint SSRC SSRC for the sender of the RTCP packet. Returns Type Description byte[] Returns the 16-byte long IV to use for the IV for an RTCP packet. | Edit this page View Source CalcF8SRTPIV(RtpPacket, uint) Calculates the Initialization Vector (IV) for the F8 AES encryption algorithm for a RTP packet given the RTP packet header and the Roll Over Counter (ROC). See Section 4.1.2.2 of RFC 3711. Declaration public static byte[] CalcF8SRTPIV(RtpPacket RtpPckt, uint ROC) Parameters Type Name Description RtpPacket RtpPckt RTP packet header. uint ROC Current Roll Over Counter value. Returns Type Description byte[] Returns the 16-byte long IV to use for the IV for an RTP packet. | Edit this page View Source CalcRtpPacketAuthTag(byte[], byte[], uint, byte[], int) Calculates the authentication tag for an RTP or an RTCP packet. See Section 4.2 of RFC 3711. Declaration public static byte[] CalcRtpPacketAuthTag(byte[] HdrBytes, byte[] Payload, uint ROCorSRTCPIndex, byte[] k_a, int TagLength) Parameters Type Name Description byte[] HdrBytes Byte array containing the RTP packet header./// byte[] Payload Byte array containing the payload of the RTP or RTCP packet. This is the encrypted portion of the packet. uint ROCorSRTCPIndex Roll Over Counter (ROC) value. byte[] k_a Byte array containing the session authentication key. int TagLength Length in bytes of the authentication tag to return. This must be either 10 (for 80 bits) or 4 (for 32 bits) depending upon the encryption profile being used. Returns Type Description byte[] The authentication tag | Edit this page View Source DeriveRtcpSessionKeys(ulong, MasterKeys, CryptoContext) Derives the RTCP session keys for a CryptoContext. See Section 4.3.2 of RFC 3711. Declaration public static void DeriveRtcpSessionKeys(ulong PI, MasterKeys Mks, CryptoContext Context) Parameters Type Name Description ulong PI Packet Index MasterKeys Mks Master keys to use to derive the session keya CryptoContext Context CryptoContext to write the session keys to | Edit this page View Source DeriveRtpSessionKeys(ulong, MasterKeys, CryptoContext) Derives the RTP session keys for a CryptoContext. See Section 4.3.1 of RFC 3711 Declaration public static void DeriveRtpSessionKeys(ulong PI, MasterKeys Mks, CryptoContext Context) Parameters Type Name Description ulong PI Packet Index MasterKeys Mks Master keys to use to derive the session keya CryptoContext Context CryptoContext to write the session keys to | Edit this page View Source DeriveSrtpSessionKey(ulong, ulong, SrtpLabelItem, byte[], byte[], byte[]) Derives a session key given the master key and the master salt for SRTP. See Section 4.3.1 Key Derivation Algorithm and Section 4.3.2 SRTCP Key Derivation of RFC 3711. Declaration public static byte[] DeriveSrtpSessionKey(ulong PI, ulong kdr, SrtpLabelItem Label, byte[] MasterSalt, byte[] MasterKey, byte[] InputZeroArray) Parameters Type Name Description ulong PI Packet index for the SRTP packet as calculated by the PacketIndex() function is for SRTP. Pass in 32-bit value 0 || SRTCP Index from the SRTCP packet as described in Section 4.3.2 of RFC 3711. ulong kdr Key Derivation Rate (KDR) SrtpLabelItem Label Identifies the type of key to derive. byte[] MasterSalt Master salt array. byte[] MasterKey Master Key array. byte[] InputZeroArray Array of zero values to use as the input for the key derivation. The length of this array determines the length of the array returned by this function. Returns Type Description byte[] Returns a byte array containing the derived key, salting key or the authentication key. | Edit this page View Source ExtractDelimStr(char, char, string) Extracts a string that is delimited by two characters. The delimiter characters may be different. Declaration public static string? ExtractDelimStr(char D1, char D2, string strInput) Parameters Type Name Description char D1 First delimiter character. char D2 Second delimiter character. string strInput Input string. Returns Type Description string Returns the delimited string. Returns null if the delimiters are not present or the extracted string length is zero. | Edit this page View Source GetValueOfNameValuePair(string, char) Gets the value portion of a name/value pair from a string that is formatted as a name followed by a 1 character separator followed by a value. For example Param=Value or Param:Value Declaration public static string? GetValueOfNameValuePair(string Input, char Sep) Parameters Type Name Description string Input Input string containing the name/value. char Sep Separator character such as '=' or ':' Returns Type Description string Returns the value portion or null if the input string is not in the proper format. | Edit this page View Source PacketIndex(ushort, ushort, RocVals) Calculates the packet index for an RTP packet. See Section 3.3.1 and Appendix A of RFC 3711. This algorithm accounds for rollover of the sequence number and the impact of packet loss. Declaration public static ulong PacketIndex(ushort SEQ, ushort s_l, RocVals Rv) Parameters Type Name Description ushort SEQ Sequence number (SEQ) read from the RTP packet header. ushort s_l Highest received SEQ number so far. RocVals Rv Stored ROC values. Returns Type Description ulong Returns the packet index as a 48-bit number right justified in the lower 48 bits of a 64-bit unsigned integer."
  },
  "api/SipLib.RtpCrypto.SessionKeys.html": {
    "href": "api/SipLib.RtpCrypto.SessionKeys.html",
    "title": "Class SessionKeys",
    "keywords": "Class SessionKeys Class for storing the current session key, salt and authentication keys for SRTP Inheritance object SessionKeys Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.RtpCrypto Assembly: SipLib.dll Syntax public class SessionKeys Fields | Edit this page View Source SessionAuthKey Contains the bytes of the session authentication key. The length will always be 20 bytes (160 bits) for the HMAC-SHA1 authentication algorithm. Declaration public byte[]? SessionAuthKey Field Value Type Description byte[] | Edit this page View Source SessionKey Contains the bytes of the session key. The length depends on the crypto suite in use Declaration public byte[]? SessionKey Field Value Type Description byte[] | Edit this page View Source SessionSalt Contains the bytes of the session salt. The length will always be 14 bytes for the AES-CM and the AES-F8 algorithms. Declaration public byte[]? SessionSalt Field Value Type Description byte[]"
  },
  "api/SipLib.RtpCrypto.SrtpDecryptor.html": {
    "href": "api/SipLib.RtpCrypto.SrtpDecryptor.html",
    "title": "Class SrtpDecryptor",
    "keywords": "Class SrtpDecryptor Class for decrypting SRTP and SRTCP packets received from a remote endpoint. Inheritance object SrtpTransformBase SrtpDecryptor Inherited Members SrtpTransformBase.m_Context SrtpTransformBase.ApplySrtpTransform(RtpPacket, ulong, byte[], byte[]) SrtpTransformBase.ApplySrtcpTransform(RtcpHeader, uint, ulong, byte[], byte[]) SrtpTransformBase.ApplySrtcpTransform(RtcpHeader, uint, ulong, byte[], int, int, byte[]) SrtpTransformBase.Error object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.RtpCrypto Assembly: SipLib.dll Syntax public class SrtpDecryptor : SrtpTransformBase Constructors | Edit this page View Source SrtpDecryptor(CryptoContext) Constructor Declaration public SrtpDecryptor(CryptoContext context) Parameters Type Name Description CryptoContext context CryptoContext provided by the remote endpoint if SRTP is being used. If null, then RTP and RTCP packets are not encrypted. Methods | Edit this page View Source DecryptRtcpPacket(byte[]) Decrypts an RTCP packet if encryption is used. Declaration public byte[]? DecryptRtcpPacket(byte[] Pckt) Parameters Type Name Description byte[] Pckt Input RTCP packet. Returns Type Description byte[] Returns the decrypted version of the encrypted input packet if encryption is being used. Returns the original input packet if encryption is not being used. Returns null if an error is detected and the Error property value will indicate the type of error. | Edit this page View Source DecryptRtpPacket(byte[]) Decrypts an RTP packet if encryption is used or returns the original data if encryption is not being used. Declaration public byte[]? DecryptRtpPacket(byte[] Pckt) Parameters Type Name Description byte[] Pckt Input RTP packet. Returns Type Description byte[] Returns the decrypted version of the encrypted input packet if encryption is being used. Returns the original input packet if encryption is not being used. Returns null if an error is detected and the Error property value will indicate the type of error."
  },
  "api/SipLib.RtpCrypto.SrtpEncryptor.html": {
    "href": "api/SipLib.RtpCrypto.SrtpEncryptor.html",
    "title": "Class SrtpEncryptor",
    "keywords": "Class SrtpEncryptor Class for encypting RTP and RTCP packets to be sent. See RFC 3711. Inheritance object SrtpTransformBase SrtpEncryptor Inherited Members SrtpTransformBase.m_Context SrtpTransformBase.ApplySrtpTransform(RtpPacket, ulong, byte[], byte[]) SrtpTransformBase.ApplySrtcpTransform(RtcpHeader, uint, ulong, byte[], byte[]) SrtpTransformBase.ApplySrtcpTransform(RtcpHeader, uint, ulong, byte[], int, int, byte[]) SrtpTransformBase.Error object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.RtpCrypto Assembly: SipLib.dll Syntax public class SrtpEncryptor : SrtpTransformBase Constructors | Edit this page View Source SrtpEncryptor(CryptoContext) Constructor Declaration public SrtpEncryptor(CryptoContext context) Parameters Type Name Description CryptoContext context CryptoContext greated by the sender of the RTP and SRTP. If null, then RTP and RTCP packets are not encrypted. Methods | Edit this page View Source EncryptRtcpPacket(byte[]) Encrypts a RTCP packet to send Declaration public byte[]? EncryptRtcpPacket(byte[] Pckt) Parameters Type Name Description byte[] Pckt Input RTCP packet Returns Type Description byte[] Returns the encrypted RTCP packet if encryption is being used. Returns the original input packet if encryption is not being used. Returns null if an error occurs and the Error property value will indicate the type of error.. | Edit this page View Source EncryptRtpPacket(byte[]) Encrypts an RTP packet if encryption is being used. Declaration public byte[]? EncryptRtpPacket(byte[] Pckt) Parameters Type Name Description byte[] Pckt Input RTP packet to encrypt. Returns Type Description byte[] Returns an encrypted packet if encryption is being used. Returns the original packet if encryption is not being used. Returns null if an error is detected and the Error property value will indicate the type of error.."
  },
  "api/SipLib.RtpCrypto.SrtpLabelItem.html": {
    "href": "api/SipLib.RtpCrypto.SrtpLabelItem.html",
    "title": "Enum SrtpLabelItem",
    "keywords": "Enum SrtpLabelItem Enumeration for the valid value of the \"label\" specified in Sections 4.3.1 and 4.3.2 of RFC 3711. This enumeration is used by the DeriveSrtpSessionKey() function to determine what type of session item to generate. Namespace: SipLib.RtpCrypto Assembly: SipLib.dll Syntax public enum SrtpLabelItem : ulong Fields Name Description SrtcpAuthKey Generate an authentication key for SRTCP. SrtcpSessionKey Generate a session key for SRTCP. SrtcpSessionSalt Generate a session salt for SRTCP. SrtpAuthKey Generate an authentication key for SRTP. SrtpSessionKey Generate a session key for SRTP. SrtpSessionSalt Generate a sessiion salt for SRTP."
  },
  "api/SipLib.RtpCrypto.SrtpTransformBase.html": {
    "href": "api/SipLib.RtpCrypto.SrtpTransformBase.html",
    "title": "Class SrtpTransformBase",
    "keywords": "Class SrtpTransformBase Base class for the SrtpEncryptor and SrtpDecryptor classes Inheritance object SrtpTransformBase SrtpDecryptor SrtpEncryptor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.RtpCrypto Assembly: SipLib.dll Syntax public class SrtpTransformBase Constructors | Edit this page View Source SrtpTransformBase(CryptoContext) Constructor Declaration protected SrtpTransformBase(CryptoContext context) Parameters Type Name Description CryptoContext context CryptoContext to use Fields | Edit this page View Source m_Context Cryptographic context to use for encryption and decryption of RTP and RTCP packets. Declaration protected CryptoContext m_Context Field Value Type Description CryptoContext Properties | Edit this page View Source Error Gets or sets the reason for an encryption or a decryption error. This property will be set to a value indicating the cause of the error if an encryption or decryption method returns null. Declaration public SRtpErrorsEnum Error { get; protected set; } Property Value Type Description SRtpErrorsEnum Methods | Edit this page View Source ApplySrtcpTransform(RtcpHeader, uint, ulong, byte[], byte[]) Applies the AES or F8 transform specified in the CryptoContext to the input byte array to produce the output byte array for a RTCP packet Declaration protected void ApplySrtcpTransform(RtcpHeader Header, uint SSRC, ulong PI, byte[] InputBytes, byte[] OutputBytes) Parameters Type Name Description RtcpHeader Header RTCP packet header uint SSRC SSRC of the RTCP packet ulong PI The calculated Packet Index byte[] InputBytes Input array byte[] OutputBytes Output array. Must be the same length as the input array | Edit this page View Source ApplySrtcpTransform(RtcpHeader, uint, ulong, byte[], int, int, byte[]) Applies the AES or F8 transform specified in the CryptoContext to the input byte array to produce the output byte array for a RTCP packet Declaration protected void ApplySrtcpTransform(RtcpHeader Header, uint SSRC, ulong PI, byte[] InputBytes, int StartIdx, int Length, byte[] OutputBytes) Parameters Type Name Description RtcpHeader Header RTCP header for the RTCP packet uint SSRC SSRC of the RTCP packet ulong PI The calculated Packet Index byte[] InputBytes Input array int StartIdx Starting index in the input array int Length Number of bytes to apply the transform to byte[] OutputBytes Output array. Must be the same length as the input array | Edit this page View Source ApplySrtpTransform(RtpPacket, ulong, byte[], byte[]) Applies the AES or F8 transform specified in the CryptoContext to the input byte array to produce the output byte array for a RTP packet Declaration protected void ApplySrtpTransform(RtpPacket Rp, ulong PI, byte[] InputBytes, byte[] OutputBytes) Parameters Type Name Description RtpPacket Rp RtpPacket containing the SSRC. ulong PI The calculated Packet Index byte[] InputBytes Input array byte[] OutputBytes Output array. Must be the same length as the input array"
  },
  "api/SipLib.RtpCrypto.html": {
    "href": "api/SipLib.RtpCrypto.html",
    "title": "Namespace SipLib.RtpCrypto",
    "keywords": "Namespace SipLib.RtpCrypto Classes that implement the SDES-SRTP protocols used in secure RTP. Classes AesFunctions This class contains static fuctions for performing AES encryption and decryption operations for SRTP and SRTCP. CryptoAttribute Class for the crypto SDP attribute for SRTP. See Section 9 of RFC 4568. The format is like: a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:4 There may be more than one inline parameter. inline parameters are delimited by a \";\". CryptoContext Class for storing the settings and status of the cryptographic context for SRTP and SRTCP. CryptoSuites Class that provides information about the crypto suites for SRTP that this class library supports. InlineParams Class for storing and managing the parameter of the \"inline\" SRTP key-param of an SDP crypto media attribute. See Section 9 of RFC 4568. MasterKeys Class for storing a single SRTP master key, master salt and parameters related to these. RocVals Class for storing the Roll Over Counter (ROC) for SRTP encryption. The ROC counts the number of times that the RTP packet sequence number has wrapped around in a RTP media session. RocValues Class for storing the Roll Over Counter (ROC) for SRTP encryption. The ROC counts the number of times that the RTP packet sequence number has wrapped around in a RTP media session. See Section 3.3.1 of RFC 3711. SRtpUtils Static class that provides static functions for performing various Secure RTP (SRTP) calculations. SessionKeys Class for storing the current session key, salt and authentication keys for SRTP SrtpDecryptor Class for decrypting SRTP and SRTCP packets received from a remote endpoint. SrtpEncryptor Class for encypting RTP and RTCP packets to be sent. See RFC 3711. SrtpTransformBase Base class for the SrtpEncryptor and SrtpDecryptor classes Enums SRtpErrorsEnum Enumeration of SRTP error conditions SrtpLabelItem Enumeration for the valid value of the \"label\" specified in Sections 4.3.1 and 4.3.2 of RFC 3711. This enumeration is used by the DeriveSrtpSessionKey() function to determine what type of session item to generate."
  },
  "api/SipLib.Sdp.ConnectionData.html": {
    "href": "api/SipLib.Sdp.ConnectionData.html",
    "title": "Class ConnectionData",
    "keywords": "Class ConnectionData Class for processing the Connection Data \"c=\" type of the SDP contents. Inheritance object ConnectionData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Sdp Assembly: SipLib.dll Syntax public class ConnectionData Constructors | Edit this page View Source ConnectionData() Constructs a new, empty ConnectionData object. Use this construct when creating new connection data for SDP contents of a new SIP message. Declaration public ConnectionData() | Edit this page View Source ConnectionData(IPAddress) Constructor. Declaration public ConnectionData(IPAddress address) Parameters Type Name Description IPAddress address Fields | Edit this page View Source Address Contains the IP address portion of a c= SDP line. May be an IPv4 or an IPv6 address Declaration public IPAddress? Address Field Value Type Description IPAddress | Edit this page View Source AddressCount Contains the number of IP addresses if the Address is a multicast address. A value of 0 indicates that the address Count field is not present. Declaration public int AddressCount Field Value Type Description int | Edit this page View Source AddressType Contains the Address Type information. Should be \"IP4\" or \"IP6\". Declaration public string AddressType Field Value Type Description string | Edit this page View Source NetworkType Contains the network type. \"IN\" = Internet. Declaration public string NetworkType Field Value Type Description string | Edit this page View Source TTL Contains the Time To Live field of the IP address. A value of -1 indicates that the TTL field is not present. Declaration public int TTL Field Value Type Description int Methods | Edit this page View Source CreateCopy() Creates a deep copy of this object. Declaration public ConnectionData CreateCopy() Returns Type Description ConnectionData A new object with a copy of the member variables. | Edit this page View Source ParseConnectionData(string) Parses a string containing the parameter fields of the SDP c= line. Declaration public static ConnectionData ParseConnectionData(string strConnectionData) Parameters Type Name Description string strConnectionData Contains the parameter fields of the c= line. The \"c=\" field must not be present. Returns Type Description ConnectionData Returns a new ConnectionData object | Edit this page View Source ToString() Converts the ConnectionData object to a string. Declaration public override string ToString() Returns Type Description string The string format is: \"c=NetworkType AddressType ConnectionAddress\\r\\n\" Overrides object.ToString()"
  },
  "api/SipLib.Sdp.MediaDescription.html": {
    "href": "api/SipLib.Sdp.MediaDescription.html",
    "title": "Class MediaDescription",
    "keywords": "Class MediaDescription Class for processing the Media Description \"m=\" type for the SDP contents. See Section 5.14 of RFC 8866. Inheritance object MediaDescription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Sdp Assembly: SipLib.dll Syntax public class MediaDescription Constructors | Edit this page View Source MediaDescription() Constructs an empty MediaDescription object. Use this constructor to create a new Media Description for a new SDP message block to send. Declaration public MediaDescription() | Edit this page View Source MediaDescription(string, int, List<int>) Constructs a new MediaDescription object from parameters provided by the caller. Declaration public MediaDescription(string strMediaType, int iPort, List<int> payloadTypes) Parameters Type Name Description string strMediaType Media type. Ex: \"audio\" or \"video\" int iPort Port number that the session will occur on. List<int> payloadTypes Media payload types. Properties | Edit this page View Source Attributes Contains the attributes for this type of media except the rtpmap attributes, which are stored in the RtpMapAttributes field. Declaration public List<SdpAttribute> Attributes { get; set; } Property Value Type Description List<SdpAttribute> | Edit this page View Source Bandwidth Specifies the bandwidth limit for the media in kilo-bits per second. This is comes from or generates a b=AS:Bandwidth line in the media description. An empty or null value indicates that there is no b= line in the media description. Declaration public string Bandwidth { get; set; } Property Value Type Description string | Edit this page View Source ConnectionData Contains the connection data (c=) for this media. If null, then use the ConnectionData of the SDP session. Declaration public ConnectionData? ConnectionData { get; set; } Property Value Type Description ConnectionData | Edit this page View Source Label Gets or sets the label attribute of a media description block. RFC 4574 specifies the characteristics of the label attribute. The getter returns an empty string if the media description does not have a label attribute. The setter removes any existing label attributes and then adds one with the value to ensure that each MediaDescription has a single label attribute. Declaration public string? Label { get; set; } Property Value Type Description string | Edit this page View Source MediaDirection Gets or Sets the media direction attribute for this media description. If there is no media direction attribute, then the getter returns sendrecv. Declaration public MediaDirectionEnum MediaDirection { get; set; } Property Value Type Description MediaDirectionEnum | Edit this page View Source MediaType Specifies the media type. Example: \"audio\", \"video\", \"text\" or \"message\". Declaration public string MediaType { get; set; } Property Value Type Description string | Edit this page View Source PayloadTypes Contains a list of payload types for the m= line. Declaration public List<int> PayloadTypes { get; set; } Property Value Type Description List<int> | Edit this page View Source Port Specifies the TCP/UDP port number; Declaration public int Port { get; set; } Property Value Type Description int | Edit this page View Source RtpMapAttributes Contains a list of RtpMap objects. Each object corresponds to a a=rtpmap .... line in the media description. Declaration public List<RtpMapAttribute> RtpMapAttributes { get; set; } Property Value Type Description List<RtpMapAttribute> | Edit this page View Source Transport Specifies the transport mechanism: \"TCP\", \"UDP\", \"RTP/AVP\", etc. Declaration public string Transport { get; set; } Property Value Type Description string Methods | Edit this page View Source AddSetupAttribute(SetupType) Adds a a=setup:xxx attribute. Declaration public void AddSetupAttribute(SetupType SetType) Parameters Type Name Description SetupType SetType Specifies the role (active, passive, etc.) | Edit this page View Source BuildH264AnswerSmd(int) Builds an MediaDescription that contains only the offerred H264 codec attributes. Declaration public MediaDescription? BuildH264AnswerSmd(int Port) Parameters Type Name Description int Port RTP port number to use. Returns Type Description MediaDescription Returns a new MediaDescription object or null if the video media block does not contain an offer of H264 media. | Edit this page View Source CreateCopy() Creates a deep copy of this object. This only copies the m= line. Declaration public MediaDescription CreateCopy() Returns Type Description MediaDescription Returns a new object with a copy of each member variable in this object. | Edit this page View Source GetAttributeValue(string) Gets the attribute value for the specified attribute name. Declaration public string? GetAttributeValue(string strAttributeName) Parameters Type Name Description string strAttributeName Name of the attribute to search for. Returns Type Description string A string containing the attribute value. Returns an empty string if the attribute name was not found or if the attribute was found but does not have a value (not all attributes have values). | Edit this page View Source GetCryptoAttributes() Gets a list of the CryptoAttributes in this MediaDescription. Declaration public List<CryptoAttribute> GetCryptoAttributes() Returns Type Description List<CryptoAttribute> Returns a list of the crypto attributes for SDES-SRTP in this MediaDescription. The return value will not be null but it may be empty. | Edit this page View Source GetFmtpForFormatNumber(string) Finds the fmtp attribute for the specified media format number. Declaration public SdpAttribute? GetFmtpForFormatNumber(string strFormatNumber) Parameters Type Name Description string strFormatNumber String representation of the media format number to look for. Returns Type Description SdpAttribute Returns the SdpAttribute object or null if its not found. | Edit this page View Source GetNamedAttribute(string) Returns the SdpAttribute object for a named attribute. Declaration public SdpAttribute? GetNamedAttribute(string strAttr) Parameters Type Name Description string strAttr Name of the attribute to search for. Returns Type Description SdpAttribute Returns a SdpAttribute for the named attribute if it is found or null if the named attribute is not present. | Edit this page View Source GetNamedAttributes(string) Gets a list of SdpAttributes for an attribute name. Declaration public List<SdpAttribute> GetNamedAttributes(string strAttr) Parameters Type Name Description string strAttr Attribute name. Returns Type Description List<SdpAttribute> Returns a list of SdpAttribute object. The return value will never be null but will be empty if there are no attributes with a name that matches the strAttr parameter. | Edit this page View Source GetRtpMapForCodecType(string) Finds the RtpMapAttribute object for the specified codec name (encoding name) Declaration public RtpMapAttribute? GetRtpMapForCodecType(string strCodecName) Parameters Type Name Description string strCodecName Codec or encoding name Returns Type Description RtpMapAttribute Returns the RtpMapAttribute object if found or null if not found | Edit this page View Source GetRtpMapForPayloadType(int) Gets the RtpMapAttribute object for the specified payload type Declaration public RtpMapAttribute? GetRtpMapForPayloadType(int payloadType) Parameters Type Name Description int payloadType Specifies the payload type to look for Returns Type Description RtpMapAttribute Returns the RtpMapAttribute object if successful or null if it is not present | Edit this page View Source GetSetupTypeAttributeValue() Gets the value of the setup attribute. Declaration public SetupType GetSetupTypeAttributeValue() Returns Type Description SetupType | Edit this page View Source GetTelephoneEventPayloadType(out int) Retrieves the payload type for DTMF telephone events. Declaration public bool GetTelephoneEventPayloadType(out int PayloadType) Parameters Type Name Description int PayloadType Output is set to the value for the first rtpmap attribute for a telephone-event if the return value is true. This output parameter will be set to 0 if the return value of this function is false. Returns Type Description bool True if the rtpmap attribute for a telephone-event is found. A return value of false indicates that the telephone-event rtpmap attrubute could not be found. | Edit this page View Source HasMediaStateAttribute() Determines if the media description has an attribute that specifies the media state. The media state attributes are inactive, sendrecv, recvonly and sendonly. Declaration public bool HasMediaStateAttribute() Returns Type Description bool Returns true if there is a media state attribute, else returns false. | Edit this page View Source ParseMediaDescriptionLine(string) Parses a string containing the parameter fields of a SDP m= line Declaration public static MediaDescription ParseMediaDescriptionLine(string strMd) Parameters Type Name Description string strMd Contains the parameter fields of a m= line. The m= field must not be included. Returns Type Description MediaDescription Returns a new MediaDescription object. | Edit this page View Source ParseMediaDescriptionString(string) Parses a string containing a full media description block into a MediaDescription object. Declaration public static MediaDescription? ParseMediaDescriptionString(string strMd) Parameters Type Name Description string strMd Input string containing the lines of an SDP media description block. The first line must contain an m= line Returns Type Description MediaDescription Returns a new MediaDescription object of successful or null if an error is detected. | Edit this page View Source RemoveNamedAttributes(string) Removes all instances of a named SDP attribute. Declaration public void RemoveNamedAttributes(string Attr) Parameters Type Name Description string Attr Name of the SDP attribute to remove. | Edit this page View Source ToString() Converts the MediaDescription object to a string. Declaration public override string ToString() Returns Type Description string The string format is: \"m=MediaType Port Transport MediaFormat(s)\" Overrides object.ToString() | Edit this page View Source UsingDtlsSrtp(out SetupType) Determines if its necessary to use DTLS-SRTP to negotiate encryption keys and algorithms. Declaration public bool UsingDtlsSrtp(out SetupType SetType) Parameters Type Name Description SetupType SetType SetupType to use in the answer to the offered SetupType. Returns Type Description bool Returns true if DTLS-SRTP is required. | Edit this page View Source UsingSdesSrtp() Returns true if this MediaDescription object is for SDES-SRTP media encryption. Declaration public bool UsingSdesSrtp() Returns Type Description bool"
  },
  "api/SipLib.Sdp.MediaDirectionEnum.html": {
    "href": "api/SipLib.Sdp.MediaDirectionEnum.html",
    "title": "Enum MediaDirectionEnum",
    "keywords": "Enum MediaDirectionEnum Enumeration of values for the Media Direction SDP attribute. See Section 6.7 of RFC 8866. Namespace: SipLib.Sdp Assembly: SipLib.dll Syntax public enum MediaDirectionEnum Fields Name Description inactive Media is inactive recvonly Receive only sendonly Send only sendrecv Send and receive"
  },
  "api/SipLib.Sdp.Origin.html": {
    "href": "api/SipLib.Sdp.Origin.html",
    "title": "Class Origin",
    "keywords": "Class Origin Class for processing the Origin \"o=\" SDP line. See Section 5.2 of RFC 4566. Inheritance object Origin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Sdp Assembly: SipLib.dll Syntax public class Origin Constructors | Edit this page View Source Origin(string, IPAddress) Constructs a new Origin object from parameters provided by the caller. Declaration public Origin(string strUserName, IPAddress Addr) Parameters Type Name Description string strUserName Display version of the user name. IPAddress Addr IP address or domain name of the user's position Fields | Edit this page View Source Address IP address. May be an IPv4, an IPv6 address or a fully qualified domain name. Declaration public string? Address Field Value Type Description string | Edit this page View Source AddressType Address type field. Should be \"IP4\" or \"IP6\". Declaration public string AddressType Field Value Type Description string | Edit this page View Source NetworkType Network Type field. Example: \"IN\" for Internet. Declaration public string NetworkType Field Value Type Description string | Edit this page View Source SessionId Session ID field. Declaration public string SessionId Field Value Type Description string | Edit this page View Source UserName User name field. Declaration public string UserName Field Value Type Description string | Edit this page View Source Version Version field. Declaration public long Version Field Value Type Description long Properties | Edit this page View Source VersionNumber Gets or sets the version number in the SDP Origin as an integer. Declaration public long VersionNumber { get; set; } Property Value Type Description long Methods | Edit this page View Source ParseOrigin(string) Constructs a new Origin object from a string. Use this constructor for parsing the origin string received in the SDP contents of an SIP message. Declaration public static Origin ParseOrigin(string strOrigin) Parameters Type Name Description string strOrigin The format of this string is: \"UserName SessionId Version NetworkType AddressType Address\". Returns Type Description Origin Returns a new Origin object. | Edit this page View Source ToString() Returns the fully formatted Origin string for a SDP message block. The format is : o=Origin where Origin is the contains each parameter separated by a space. Declaration public override string ToString() Returns Type Description string Returns a full origin line. The format is: o=UserName, SessionId, Version, NetworkType, AdddressType Address\\r\\n Overrides object.ToString()"
  },
  "api/SipLib.Sdp.RtpMapAttribute.html": {
    "href": "api/SipLib.Sdp.RtpMapAttribute.html",
    "title": "Class RtpMapAttribute",
    "keywords": "Class RtpMapAttribute Class for represent an SDP rtpmap attribute. See Section 6.6 of RFC 8866. Inheritance object RtpMapAttribute Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Sdp Assembly: SipLib.dll Syntax public class RtpMapAttribute Constructors | Edit this page View Source RtpMapAttribute() Constructor Declaration public RtpMapAttribute() | Edit this page View Source RtpMapAttribute(int, string, int) Constructor Declaration public RtpMapAttribute(int payloadType, string encodingName, int clockRate) Parameters Type Name Description int payloadType Payload type. string encodingName Encoding name. For example \"PCMU\" int clockRate Clock rate in samples/second. Fields | Edit this page View Source Channels Specifies the number of channels. If not specified then the number of channels is 1. A value of 0 indicates that the number of channels is not set. This is the default case. Declaration public int Channels Field Value Type Description int | Edit this page View Source ClockRate Specifies the clock rate or sample rate. Declaration public int ClockRate Field Value Type Description int | Edit this page View Source EncodingName Specifies the encoding-name parameter. For example: PCMU Declaration public string? EncodingName Field Value Type Description string | Edit this page View Source PayloadType Represents the payload type number. For instance, 0 = PCMU by default. Declaration public int PayloadType Field Value Type Description int Methods | Edit this page View Source ParseRtpMap(string) Parses an attribute value string and returns a new RtpMapAttribute object. Declaration public static RtpMapAttribute? ParseRtpMap(string attrValue) Parameters Type Name Description string attrValue Attribute value string. For example, if the SDP media description has an attribute line line \"a=rtpmap 0 PCMU/8000\", then the attribute value string would be \"0 PCMU/8000\". Returns Type Description RtpMapAttribute Returns a new RtpMapAttribute object if successful or null if a formatting error is detected. | Edit this page View Source ToString() Converts this object into a full SDP attribute line. For example: \"a=rtpmap: 0 PCMU/8000\". Declaration public override string ToString() Returns Type Description string Returns a full SDP attribute line. Overrides object.ToString()"
  },
  "api/SipLib.Sdp.Sdp.html": {
    "href": "api/SipLib.Sdp.Sdp.html",
    "title": "Class Sdp",
    "keywords": "Class Sdp Class for processing the Session Description Protocol message contents of a SIP message. See RFC 8866. Inheritance object Sdp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Sdp Assembly: SipLib.dll Syntax public class Sdp Constructors | Edit this page View Source Sdp(IPAddress, string) Constructs a new Sdp and initializes the Origin (o=), ConnectionData (c=), session name (s=) and an empty media list. Declaration public Sdp(IPAddress LocalIp, string UaName) Parameters Type Name Description IPAddress LocalIp Local IP address string UaName User agent or server name Properties | Edit this page View Source Attributes Contains the attributes for this media session. Declaration public List<SdpAttribute> Attributes { get; set; } Property Value Type Description List<SdpAttribute> | Edit this page View Source Bandwidth Bandwidth parameter (b) for the entire session. See Section 5.8 of RFC 8866. This parameter is optional. Treating it as a simple string. Declaration public string Bandwidth { get; set; } Property Value Type Description string | Edit this page View Source ConnectionData Contains the connecton data for the call. Declaration public ConnectionData? ConnectionData { get; set; } Property Value Type Description ConnectionData | Edit this page View Source Email Contains the e-mail parameter (e) for the session. See Section 5.6 of RFC 8866. This parameter is optional. Declaration public string Email { get; set; } Property Value Type Description string | Edit this page View Source Media Contains a list of all of the different types of media for a call. Declaration public List<MediaDescription> Media { get; set; } Property Value Type Description List<MediaDescription> | Edit this page View Source MediaDirection Gets or sets the media direction attribute for the session level. Declaration public MediaDirectionEnum MediaDirection { get; set; } Property Value Type Description MediaDirectionEnum | Edit this page View Source Origin Contains the origin information for the \"o\" parameter. See Section 5.2 of RFC 8866. Declaration public Origin? Origin { get; set; } Property Value Type Description Origin | Edit this page View Source PhoneNumber Contains the phone number (p) parameter for the session. See Section 5.6 of RFC 8866. This parameter is optional. Declaration public string PhoneNumber { get; set; } Property Value Type Description string | Edit this page View Source SessionInformation Contains the session information \"i\" parameter. See Section 5.4 of RFC 8866. This parameter is optional. Declaration public string SessionInformation { get; set; } Property Value Type Description string | Edit this page View Source SessionName Contains the Session Name for the \"s\" type. parameter Section 5.3 of RFC 8866. Declaration public string SessionName { get; set; } Property Value Type Description string | Edit this page View Source Timing Timing (t) parameter. See Section 5.9 of RFC 8866. Declaration public string Timing { get; set; } Property Value Type Description string | Edit this page View Source Uri Contains a URI to more information about the session. This is the \"u\" parameter. See Section 5.5 of RFC 8866. This parameter is optional. Declaration public string Uri { get; set; } Property Value Type Description string | Edit this page View Source Version Contains the version number (v) of the SDP protocol. This is expected to be always 0. See Section 5.1 of RFC 8866. Declaration public int Version { get; } Property Value Type Description int Methods | Edit this page View Source BuildAnswerSdp(Sdp, IPAddress, SdpAnswerSettings) Builds an Sdp object to send as the answered Sdp in responsed to the offered Sdp Declaration public static Sdp BuildAnswerSdp(Sdp OfferedSdp, IPAddress address, SdpAnswerSettings AnswerSettings) Parameters Type Name Description Sdp OfferedSdp SDP that was offered IPAddress address IP address to be used for transport of all media. This address is used in the \"c=\" line of the SDP. SdpAnswerSettings AnswerSettings Settings that determine how to build the answered SDP Returns Type Description Sdp Returns the SDP to send to the client that offered the SDP | Edit this page View Source CreateCopy() Creates a deep copy (i.e. by-value) of this object. Declaration public Sdp CreateCopy() Returns Type Description Sdp Returns a new Sdp object. | Edit this page View Source GetAudioConnectionData(ref string?, ref int) Retrieves the IP address and the port number for the audio media in this SDP. Declaration public bool GetAudioConnectionData(ref string? strIpAddr, ref int Port) Parameters Type Name Description string strIpAddr IP address to send the audio to. This output will contain the IP address if this method returns true or it will be set to null if this method returns false. int Port Port number to send the audio to. This output will contain the port number to if this method returns true or it will be set to 0 if this function returns false. Returns Type Description bool Returns true if the audio media type is present and valid. Else returns null. | Edit this page View Source GetMediaDirection(Sdp, MediaDescription) Gets the media direction attribute for a media type. The media direction may be specified at the session level or at the media level. The media level has priority. Declaration public static MediaDirectionEnum GetMediaDirection(Sdp sdp, MediaDescription md) Parameters Type Name Description Sdp sdp Session data MediaDescription md Media description. Must be one of the MediaDescription objects in the SDP. Returns Type Description MediaDirectionEnum Returns the media direction if specified at the media level or the session level. Returns MediaDirectionEnum.sendrecv if the direction is not specified at either level. | Edit this page View Source GetMediaEndPoint(Sdp, MediaDescription) Gets the IPEndPoint for media given the offered SDP and the offered SDP Media Description for that media. The destination IP address may be specified at the session level or the media level. Declaration public static IPEndPoint? GetMediaEndPoint(Sdp Sdp, MediaDescription Md) Parameters Type Name Description Sdp Sdp The entire SDP block that was offered. MediaDescription Md The SDP Media Description block for the media to get the IP address for. Returns Type Description IPEndPoint Returns an IPAddress. Returns null if there was no address specified in the session or media levels. | Edit this page View Source GetMediaIPAddr(Sdp, MediaDescription) Gets the destination IP address for media given the offered SDP and the offered SDP Media Description for that media. The destination IP address may be specified at the session level or the media level. Declaration public static IPAddress? GetMediaIPAddr(Sdp Sdp, MediaDescription Smd) Parameters Type Name Description Sdp Sdp The entire SDP block that was offered. MediaDescription Smd The SDP Media Description block for the media to get the IP address for. Returns Type Description IPAddress Returns an IPAddress. Returns null if there was no address specified in the session or media levels. | Edit this page View Source GetMediaType(string) Gets the MediaDescription object for the specified type of media. Declaration public MediaDescription? GetMediaType(string strType) Parameters Type Name Description string strType Type of media such as audio, video, text, etc.. Returns Type Description MediaDescription Returns the SepMediaDescription object if the specified type of media is present or null if it is not. | Edit this page View Source GetMediaTypeIndex(string) Gets the index of a specified media type in the Media list. Declaration public int GetMediaTypeIndex(string strType) Parameters Type Name Description string strType Type of media to look for. Must be \"audio\", \"video\", \"text\" or \"message\" Returns Type Description int Returns the index of the media type in the Media list. Returns -1 if the media type is not present. | Edit this page View Source GetMediaTypeList(string) Gets a list of MediaDescription objects in the SDP that have the same type of media. Declaration public List<MediaDescription> GetMediaTypeList(string strType) Parameters Type Name Description string strType Media type. Must be one of \"audio\", \"video\", \"text\" or \"message\" Returns Type Description List<MediaDescription> Returns a list of MediaDescription objects of the same media type. The return value will not be null. | Edit this page View Source GetNamedAttribute(string) Returns the SdpAttribute object for a named attribute for the entire SDP at the session level. Declaration public SdpAttribute? GetNamedAttribute(string strAttr) Parameters Type Name Description string strAttr Name of the attribute to search for. Returns Type Description SdpAttribute Returns a SdpAttribute for the named attribute if it is found or null if the named attribute is not present. | Edit this page View Source HasMultiMedia() Checks to see if the offered SDP has media other that \"audio\" that is a known media type. Declaration public bool HasMultiMedia() Returns Type Description bool Returns true if the SDP contains media other than \"audio\" or false does not. | Edit this page View Source MediaTypeToDisplayString(string) Returns a display name for the associated media type name. Declaration public static string MediaTypeToDisplayString(string mediaTypeName) Parameters Type Name Description string mediaTypeName Media type name. Should be one of \"audio\", \"video\", \"message\" or \"text\". Returns Type Description string Return a name for displaying. | Edit this page View Source ParseSDP(string) Parses the SDP contained in a string Declaration public static Sdp ParseSDP(string strSdp) Parameters Type Name Description string strSdp Contains a SDP SIP body part. Returns Type Description Sdp Returns a new Sdp object. Exceptions Type Condition ArgumentException Thrown if an invalid argument is detected Exception Thrown if an unexpected error occurs | Edit this page View Source RemoveNamedAttribute(string) Removes all instances of a named SDP attribute. Declaration public void RemoveNamedAttribute(string strAttr) Parameters Type Name Description string strAttr Name of the SDP attribute to remove. | Edit this page View Source ToString() Converts the Sdp object to a string. Declaration public override string ToString() Returns Type Description string The string is formatted so that it can be appended to a SIP message as the SDP contents. Overrides object.ToString()"
  },
  "api/SipLib.Sdp.SdpAnswerSettings.html": {
    "href": "api/SipLib.Sdp.SdpAnswerSettings.html",
    "title": "Class SdpAnswerSettings",
    "keywords": "Class SdpAnswerSettings Class for passing the media settings to use when building an SDP object in response to an offered SDP Inheritance object SdpAnswerSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Sdp Assembly: SipLib.dll Syntax public class SdpAnswerSettings Constructors | Edit this page View Source SdpAnswerSettings(List<string>, List<string>, string, string, MediaPortManager) Constructor. Declaration public SdpAnswerSettings(List<string> AudioCodecs, List<string> VideoCodecs, string userName, string fingerprint, MediaPortManager portManager) Parameters Type Name Description List<string> AudioCodecs List of supported audio codecs List<string> VideoCodecs List of supported video codecs string userName User name to use for the session owner and MSRP URI in the media descriptions string fingerprint Fingerprint of the self-signed X.509 certificate that will be used for DTLS-SDES keying material negotiation MediaPortManager portManager MediaPortManager to use use for allocation of media ports. Properties | Edit this page View Source EnableAudio If true, then answer with an audio media MediaDescription if audio media is offered. Else, reject the audio media. Declaration public bool EnableAudio { get; set; } Property Value Type Description bool | Edit this page View Source EnableMsrp If true, then answer with an MSRP media MediaDescription if MSRP media is offered. Else, reject the MSRP media. Declaration public bool EnableMsrp { get; set; } Property Value Type Description bool | Edit this page View Source EnableRtt If true, then answer with an RTT media MediaDescription if RTT media is offered. Else, reject the RTT media. Declaration public bool EnableRtt { get; set; } Property Value Type Description bool | Edit this page View Source EnableVideo If true, then answer with an video media MediaDescription if video media is offered. Else, reject the video media. Declaration public bool EnableVideo { get; set; } Property Value Type Description bool | Edit this page View Source Fingerprint Fingerprint of the self-signed X.509 certificate that that will be used for DTLS-SDES keying material negotiation Declaration public string Fingerprint { get; set; } Property Value Type Description string | Edit this page View Source PortManager MediaPortManager to use for allocation of media ports. Declaration public MediaPortManager PortManager { get; set; } Property Value Type Description MediaPortManager | Edit this page View Source SupportedAudioCodecs Contains a list of supported audio codecs. For example: \"PCMU\", \"PCMA\", \"G722\" Declaration public List<string> SupportedAudioCodecs { get; set; } Property Value Type Description List<string> | Edit this page View Source SupportedVideoCodecs Contains a list of supported video codecs. For example: \"H264\", \"VP8\" Declaration public List<string> SupportedVideoCodecs { get; set; } Property Value Type Description List<string> | Edit this page View Source UserName User name to use for the session owner and MSRP URI in the media descriptions Declaration public string UserName { get; set; } Property Value Type Description string"
  },
  "api/SipLib.Sdp.SdpAttribute.html": {
    "href": "api/SipLib.Sdp.SdpAttribute.html",
    "title": "Class SdpAttribute",
    "keywords": "Class SdpAttribute Class for processing the Attributes \"a=\" type of the SDP contents. See Section 5.13 of RFC 4566. Inheritance object SdpAttribute Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SipLib.Sdp Assembly: SipLib.dll Syntax public class SdpAttribute Constructors | Edit this page View Source SdpAttribute() Constructs a new, empty SdpAttribute object. Use this constructor when for attribute objects for SDP contents of a new SIP message. Declaration public SdpAttribute() | Edit this page View Source SdpAttribute(string, string?) Constructs a new SdpAttribute given the attribute name and the value. Declaration public SdpAttribute(string AttrName, string? AttrValue) Parameters Type Name Description string AttrName Name of the attribute. string AttrValue Value of the attribute Fields | Edit this page View Source Attribute Contains the attribute name. Declaration public string Attribute Field Value Type Description string | Edit this page View Source Params Contains the parameters for the SDP a= attribute. This dictionary will be empty if there are no parameters. The key is the name of the parameter and the value is the parameter value. The parameter value may be null or empty if there is no associated value for the parameter name. Declaration public Dictionary<string, string> Params Field Value Type Description Dictionary<string, string> | Edit this page View Source Value Contains the attribute value. This string may be empty or null if the attribute does not have a value. Declaration public string? Value Field Value Type Description string Methods | Edit this page View Source CreateCopy() Creates a copy of this object. Declaration public SdpAttribute CreateCopy() Returns Type Description SdpAttribute A new object with a copy of each member variable. | Edit this page View Source GetAttributeParameter(string, ref string?) Gets the parameter value for a named parameter for this SDP attribute. Declaration public bool GetAttributeParameter(string strParamName, ref string? strValue) Parameters Type Name Description string strParamName Name of the SDP attribute parameter to search for. string strValue Output. Value of the parameter. This may be null or empty if the named parameter is not found or if the parameter has no associated value. Returns Type Description bool Returns true if the parameter named in strParameter is found or false if it is not. | Edit this page View Source ParseSdpAttribute(string) Parses the input string and Constructs a new SdpAttribute object from the attribute information received in the SDP contents of a SIP message. Declaration public static SdpAttribute ParseSdpAttribute(string strAttributeIn) Parameters Type Name Description string strAttributeIn The format must be either \"Attribute\" or \"Attribute:Value\". Returns Type Description SdpAttribute A new SdpAttribute object. | Edit this page View Source ToString() Converts the SdpAttribute object to a string. Declaration public override string ToString() Returns Type Description string The format is either \"a=Attribute:Value\\r\\n\" or \"a=Attribute\\r\\n\". Overrides object.ToString()"
  },
  "api/SipLib.Sdp.SdpUtils.html": {
    "href": "api/SipLib.Sdp.SdpUtils.html",
    "title": "Class SdpUtils",
    "keywords": "Class SdpUtils Static class that provides various functions for working with the Session Description Protocol (SDP) Inheritance object SdpUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Sdp Assembly: SipLib.dll Syntax public static class SdpUtils Methods | Edit this page View Source AddDtlsSrtp(MediaDescription, string) Adds DTLS-SRTP attributes to a MediaDescription object that will be sent out as part of an SDP offer. Declaration public static void AddDtlsSrtp(MediaDescription mediaDescription, string fingerPrintAttribute) Parameters Type Name Description MediaDescription mediaDescription Input MediaDescription to modify string fingerPrintAttribute Fingerprint from the X.509 certificate. For example: \"SHA-256 4A:AD:B9:B1:3F:82:18:3B:54:02:12:DF:3E:5D:49:6B:19:E5:7C:AB\" | Edit this page View Source AddSdesSrtpEncryption(MediaDescription) Adds SDES-SRTP attributes to a MediaDescription object that will be sent out as part of an SDP offer. Declaration public static void AddSdesSrtpEncryption(MediaDescription mediaDescription) Parameters Type Name Description MediaDescription mediaDescription Input MediaDescription to modify | Edit this page View Source BuildSimpleAudioSdp(IPAddress, int, string) Builds an Sdp for offering G.711 Mu-Law audio. Declaration public static Sdp BuildSimpleAudioSdp(IPAddress iPAddress, int Port, string UaName) Parameters Type Name Description IPAddress iPAddress IP address that the remote endpoint should send audio to. Audio data must also be sent from this address. int Port Specifies the UDP port number that audio will be sent from and received on string UaName User agent or server name to used for the origin name (o=). Also used to create a unique name for the audio session. Returns Type Description Sdp Returns an Sdp object with an audio media description | Edit this page View Source CreateAudioMediaDescription(int) Creates a basic MediaDescription object for offerring G.711 Mu-Law audio media. Declaration public static MediaDescription CreateAudioMediaDescription(int Port) Parameters Type Name Description int Port Specifies the UDP port number that audio will be sent and received on Returns Type Description MediaDescription Returns a new MediaDescription object. | Edit this page View Source CreateDtlsSrtpAudioMediaDescription(int, string) Creates a basic MediaDescription object for offering G.711 Mu-Law audio media that will be encrypted using DTLS-SRTP. See RFC 5763, RFC 5764 and RFC 3711. Declaration public static MediaDescription CreateDtlsSrtpAudioMediaDescription(int Port, string fingerPrintAttribute) Parameters Type Name Description int Port Specifies the UDP port number that audio will be sent and received on string fingerPrintAttribute Fingerprint from the X.509 certificate. For example: \"SHA-256 4A:AD:B9:B1:3F:82:18:3B:54:02:12:DF:3E:5D:49:6B:19:E5:7C:AB\" Returns Type Description MediaDescription Returns a new MediaDescription object. | Edit this page View Source CreateDtlsSrtpRttMediaDescription(int, string) Creates a basic MediaDescription object for offerring Real Time Text (RTT) media that will be encrypted using DTLS-SRTP. See RFC 5763, RFC 5764 and RFC 3711. Declaration public static MediaDescription CreateDtlsSrtpRttMediaDescription(int Port, string fingerPrintAttribute) Parameters Type Name Description int Port Specifies the UDP port number that RTT will be sent and received on string fingerPrintAttribute Fingerprint from the X.509 certificate. For example: \"SHA-256 4A:AD:B9:B1:3F:82:18:3B:54:02:12:DF:3E:5D:49:6B:19:E5:7C:AB\" Returns Type Description MediaDescription Returns a new MediaDescription object. | Edit this page View Source CreateDtlsSrtpVideoMediaDescription(int, string) Builds a basic MediaDescription object for offering H.264 video using the Basic Level 1 video profile that will be encrypted using DTLS-SRTP. See RFC 5763, RFC 5764 and RFC 3711. Declaration public static MediaDescription CreateDtlsSrtpVideoMediaDescription(int Port, string fingerPrintAttribute) Parameters Type Name Description int Port Specifies the UDP port number that video will be sent and received on string fingerPrintAttribute Fingerprint from the X.509 certificate. For example: \"SHA-256 4A:AD:B9:B1:3F:82:18:3B:54:02:12:DF:3E:5D:49:6B:19:E5:7C:AB\" Returns Type Description MediaDescription Returns a new MediaDescription object. | Edit this page View Source CreateMsrpMediaDescription(IPAddress, int, bool, SetupType, X509Certificate2?) Creates a basic MediaDescription object for offering Message Session Relay Protocol (MSRP, see RFC 4975). Declaration public static MediaDescription CreateMsrpMediaDescription(IPAddress ipAddress, int Port, bool UseTls, SetupType setupType = SetupType.active, X509Certificate2? localCert = null) Parameters Type Name Description IPAddress ipAddress Specifies the IPv4 or IPv6 IP address to use for the MSRP URI in the path attribute. This is address to which MSRP messages will be sent to and from which MSRP messages will be sent. int Port Specifies the local port for the MSRP URI. bool UseTls If true then offer MSRP over TLS (MSRPS), else offer MSRP over TCP. SetupType setupType Specifies the setup type (active/passive) value to use for the setup attribute. Optional. Defaults to SetupType.active. X509Certificate2 localCert Used to build the fingerprint attribute of the client's X.509 certificate. Optional. Defaults to null. This is required only if mutual authentication is being used. Returns Type Description MediaDescription Returns a new MediaDescription object for offering MSRP. | Edit this page View Source CreateRttMediaDescription(int) Creates a basic MediaDescription object for offering Real Time Text (RTT) media. Declaration public static MediaDescription CreateRttMediaDescription(int Port) Parameters Type Name Description int Port Specifies the UDP port number that RTT will be sent and received on Returns Type Description MediaDescription Returns a new MediaDescription object. | Edit this page View Source CreateSdesSrtpAudioMediaDescription(int) Creates a basic MediaDescription object for offerring G.711 Mu-Law audio media that will be encrypted using SDES-SRTP. See RFC 4568, RFC 3711 and RFC 6188. Declaration public static MediaDescription CreateSdesSrtpAudioMediaDescription(int Port) Parameters Type Name Description int Port Specifies the UDP port number that audio will be sent and received on Returns Type Description MediaDescription Returns a new MediaDescription object. | Edit this page View Source CreateSdesSrtpRttMediaDescription(int) Creates a basic MediaDescription object for offerring Real Time Text (RTT) media that will be encrypted using SDES-SRTP. See RFC 4568, RFC 3711 and RFC 6188. Declaration public static MediaDescription CreateSdesSrtpRttMediaDescription(int Port) Parameters Type Name Description int Port Specifies the UDP port number that RTT will be sent and received on Returns Type Description MediaDescription Returns a new MediaDescription object. | Edit this page View Source CreateSdesSrtpVideoMediaDescription(int) Builds a basic MediaDescription object for offering H.264 video using the Basic Level 1 video profile that will be encrypted using SDES-SRTP. See RFC 4568, RFC 3711 and RFC 6188. Declaration public static MediaDescription CreateSdesSrtpVideoMediaDescription(int Port) Parameters Type Name Description int Port Specifies the UDP port number that video will be sent and received on Returns Type Description MediaDescription Returns a new MediaDescription object. | Edit this page View Source CreateVideoMediaDescription(int) Builds a basic MediaDescription object for offering H.264 video using the Basic Level 1 video profile. Declaration public static MediaDescription CreateVideoMediaDescription(int Port) Parameters Type Name Description int Port Specifies the UDP port number that video will be sent and received on Returns Type Description MediaDescription Returns a new MediaDescription object."
  },
  "api/SipLib.Sdp.SetupType.html": {
    "href": "api/SipLib.Sdp.SetupType.html",
    "title": "Enum SetupType",
    "keywords": "Enum SetupType Enumeration that specifies the type of connection setup to use as described in RFC 4145. This depends on the a=setup:xxx SDP attribute. Namespace: SipLib.Sdp Assembly: SipLib.dll Syntax public enum SetupType Fields Name Description active The endpoint will initiate an outgoing connection. actpass The endpoint is willing to accept an incoming connection or to initiate an outgoing connection. holdcon The endpoint does not want the connection to be established for the time being. This option is not currently supported. passive The endpoint will accept an incoming connection. unknown The endpoint did not specify a setup type or the provided attribute value is unknow or not supported"
  },
  "api/SipLib.Sdp.html": {
    "href": "api/SipLib.Sdp.html",
    "title": "Namespace SipLib.Sdp",
    "keywords": "Namespace SipLib.Sdp Classes used for the Session Description Protocol (SDP, see RFC 8866). Classes ConnectionData Class for processing the Connection Data \"c=\" type of the SDP contents. MediaDescription Class for processing the Media Description \"m=\" type for the SDP contents. See Section 5.14 of RFC 8866. Origin Class for processing the Origin \"o=\" SDP line. See Section 5.2 of RFC 4566. RtpMapAttribute Class for represent an SDP rtpmap attribute. See Section 6.6 of RFC 8866. Sdp Class for processing the Session Description Protocol message contents of a SIP message. See RFC 8866. SdpAnswerSettings Class for passing the media settings to use when building an SDP object in response to an offered SDP SdpAttribute Class for processing the Attributes \"a=\" type of the SDP contents. See Section 5.13 of RFC 4566. SdpUtils Static class that provides various functions for working with the Session Description Protocol (SDP) Enums MediaDirectionEnum Enumeration of values for the Media Direction SDP attribute. See Section 6.7 of RFC 8866. SetupType Enumeration that specifies the type of connection setup to use as described in RFC 4145. This depends on the a=setup:xxx SDP attribute."
  },
  "api/SipLib.Transactions.ClientInviteTransaction.html": {
    "href": "api/SipLib.Transactions.ClientInviteTransaction.html",
    "title": "Class ClientInviteTransaction",
    "keywords": "Class ClientInviteTransaction Class for managing a single SIP client INVITE transaction. See Section 17.1.1 of RFC 3261. Inheritance object SipTransactionBase ClientInviteTransaction Inherited Members SipTransactionBase.RequestReceived SipTransactionBase.ResponseReceived SipTransactionBase.T1IntervalMs SipTransactionBase.TransactionStartTime SipTransactionBase.RequestSentTime SipTransactionBase.State SipTransactionBase.StateStartTime SipTransactionBase.MaxAttempts SipTransactionBase.NumAttempts SipTransactionBase.m_transportManager SipTransactionBase.TransportManager SipTransactionBase.Request SipTransactionBase.TransactionComplete SipTransactionBase.RemoteEndPoint SipTransactionBase.LastSipResponseSent SipTransactionBase.TransactionID SipTransactionBase.TerminationReason SipTransactionBase.LastReceivedResponse SipTransactionBase.CompletionSemaphore SipTransactionBase.StateLockObj SipTransactionBase.WaitForCompletionAsync() SipTransactionBase.NotifyTransactionUser(SIPRequest, SIPResponse, IPEndPoint) SipTransactionBase.GetClientTransactionID(SIPRequest) SipTransactionBase.GetClientTransactionID(SIPResponse) SipTransactionBase.GetServerTransactionID(SIPRequest) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Transactions Assembly: SipLib.dll Syntax public class ClientInviteTransaction : SipTransactionBase Constructors | Edit this page View Source ClientInviteTransaction(SIPRequest, IPEndPoint, SipTransactionCompleteDelegate, SipTransport) Constructor. The transaction is not started until the StartTransaction method is called by the transport layer. Declaration public ClientInviteTransaction(SIPRequest request, IPEndPoint remoteEndPoint, SipTransactionCompleteDelegate transactionComplete, SipTransport TransportManager) Parameters Type Name Description SIPRequest request SIP INVITE request that will be send by the client. IPEndPoint remoteEndPoint Destination to send the request to SipTransactionCompleteDelegate transactionComplete Notification callback. Called when the transaction is completed or terminated. May be null if a notification is not required. SipTransport TransportManager SipTransport that is managing this transaction Methods | Edit this page View Source CancelInvite() Cancels the client INVITE request transaction by building and sending a CANCEL request. Declaration public bool CancelInvite() Returns Type Description bool Returns true if a CANCEL request is sent. Returns false if a CANCEL request was not sent because the INVITE transaction is not in the Proceeding state. If false is returned then the caller must wait until an interim response is received and then try again later."
  },
  "api/SipLib.Transactions.ClientNonInviteTransaction.html": {
    "href": "api/SipLib.Transactions.ClientNonInviteTransaction.html",
    "title": "Class ClientNonInviteTransaction",
    "keywords": "Class ClientNonInviteTransaction Class for managing a single SIP client non-INVITE transaction. See Section 17.1.2 of RFC 3261. Inheritance object SipTransactionBase ClientNonInviteTransaction Inherited Members SipTransactionBase.RequestReceived SipTransactionBase.ResponseReceived SipTransactionBase.T1IntervalMs SipTransactionBase.TransactionStartTime SipTransactionBase.RequestSentTime SipTransactionBase.State SipTransactionBase.StateStartTime SipTransactionBase.MaxAttempts SipTransactionBase.NumAttempts SipTransactionBase.m_transportManager SipTransactionBase.TransportManager SipTransactionBase.Request SipTransactionBase.TransactionComplete SipTransactionBase.RemoteEndPoint SipTransactionBase.LastSipResponseSent SipTransactionBase.TransactionID SipTransactionBase.TerminationReason SipTransactionBase.LastReceivedResponse SipTransactionBase.CompletionSemaphore SipTransactionBase.StateLockObj SipTransactionBase.WaitForCompletionAsync() SipTransactionBase.NotifyTransactionUser(SIPRequest, SIPResponse, IPEndPoint) SipTransactionBase.GetClientTransactionID(SIPRequest) SipTransactionBase.GetClientTransactionID(SIPResponse) SipTransactionBase.GetServerTransactionID(SIPRequest) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Transactions Assembly: SipLib.dll Syntax public class ClientNonInviteTransaction : SipTransactionBase Constructors | Edit this page View Source ClientNonInviteTransaction(SIPRequest, IPEndPoint, SipTransactionCompleteDelegate?, SipTransport, int) Constructor. The transaction is not started until the StartTransaction() method is called by the transport layer. Declaration public ClientNonInviteTransaction(SIPRequest request, IPEndPoint remoteEndPoint, SipTransactionCompleteDelegate? transactionComplete, SipTransport TransportManager, int finalResponseTimeoutMs) Parameters Type Name Description SIPRequest request SIP request to send IPEndPoint remoteEndPoint Destination to send the request to SipTransactionCompleteDelegate transactionComplete Notification callback. Called when the transaction is completed or terminated. May be null if a notification is not required. SipTransport TransportManager SipTransportManager that is managing this transaction int finalResponseTimeoutMs Number of milliseconds to wait for a final response. This corresponds to Timer F shown in Figure 6 of RFC 3261."
  },
  "api/SipLib.Transactions.ServerInviteTransaction.html": {
    "href": "api/SipLib.Transactions.ServerInviteTransaction.html",
    "title": "Class ServerInviteTransaction",
    "keywords": "Class ServerInviteTransaction Class for managing a SIP server INVITE transaction. See Section 17.2.1 of RFC 3261. Inheritance object SipTransactionBase ServerInviteTransaction Inherited Members SipTransactionBase.RequestReceived SipTransactionBase.ResponseReceived SipTransactionBase.T1IntervalMs SipTransactionBase.TransactionStartTime SipTransactionBase.RequestSentTime SipTransactionBase.State SipTransactionBase.StateStartTime SipTransactionBase.MaxAttempts SipTransactionBase.NumAttempts SipTransactionBase.m_transportManager SipTransactionBase.TransportManager SipTransactionBase.Request SipTransactionBase.TransactionComplete SipTransactionBase.RemoteEndPoint SipTransactionBase.LastSipResponseSent SipTransactionBase.TransactionID SipTransactionBase.TerminationReason SipTransactionBase.LastReceivedResponse SipTransactionBase.CompletionSemaphore SipTransactionBase.StateLockObj SipTransactionBase.WaitForCompletionAsync() SipTransactionBase.NotifyTransactionUser(SIPRequest, SIPResponse, IPEndPoint) SipTransactionBase.GetClientTransactionID(SIPRequest) SipTransactionBase.GetClientTransactionID(SIPResponse) SipTransactionBase.GetServerTransactionID(SIPRequest) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Transactions Assembly: SipLib.dll Syntax public class ServerInviteTransaction : SipTransactionBase Constructors | Edit this page View Source ServerInviteTransaction(SIPRequest, IPEndPoint, SipTransactionCompleteDelegate, SipTransport, SIPResponse) Constructor. The transaction is not started until the StartTransaction method is called by the transport layer. Declaration public ServerInviteTransaction(SIPRequest request, IPEndPoint remoteEndPoint, SipTransactionCompleteDelegate transactionComplete, SipTransport TransportManager, SIPResponse ResponseToSend) Parameters Type Name Description SIPRequest request SIP request that was received by the server. IPEndPoint remoteEndPoint IP endpoint of the remote client that sent the request. SipTransactionCompleteDelegate transactionComplete Notification callback. Called when the transaction is completed or terminated. May be null if a notification is not required. SipTransport TransportManager Transport from which the request was received. SIPResponse ResponseToSend Initial response to send to the client. Will be sent when the transport layer calls the StartTransaction() method. Methods | Edit this page View Source SendResponse(SIPResponse) Sends a response to the INVITE request. The transaction user must use this method to send a response. Declaration public void SendResponse(SIPResponse response) Parameters Type Name Description SIPResponse response SIP response to send"
  },
  "api/SipLib.Transactions.ServerNonInviteTransaction.html": {
    "href": "api/SipLib.Transactions.ServerNonInviteTransaction.html",
    "title": "Class ServerNonInviteTransaction",
    "keywords": "Class ServerNonInviteTransaction Class for handling a server non-INVITE transaction. See Section 17.2.2 of RFC 3261. Inheritance object SipTransactionBase ServerNonInviteTransaction Inherited Members SipTransactionBase.RequestReceived SipTransactionBase.ResponseReceived SipTransactionBase.T1IntervalMs SipTransactionBase.TransactionStartTime SipTransactionBase.RequestSentTime SipTransactionBase.State SipTransactionBase.StateStartTime SipTransactionBase.MaxAttempts SipTransactionBase.NumAttempts SipTransactionBase.m_transportManager SipTransactionBase.TransportManager SipTransactionBase.Request SipTransactionBase.TransactionComplete SipTransactionBase.RemoteEndPoint SipTransactionBase.LastSipResponseSent SipTransactionBase.TransactionID SipTransactionBase.TerminationReason SipTransactionBase.LastReceivedResponse SipTransactionBase.CompletionSemaphore SipTransactionBase.StateLockObj SipTransactionBase.WaitForCompletionAsync() SipTransactionBase.NotifyTransactionUser(SIPRequest, SIPResponse, IPEndPoint) SipTransactionBase.GetClientTransactionID(SIPRequest) SipTransactionBase.GetClientTransactionID(SIPResponse) SipTransactionBase.GetServerTransactionID(SIPRequest) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Transactions Assembly: SipLib.dll Syntax public class ServerNonInviteTransaction : SipTransactionBase Constructors | Edit this page View Source ServerNonInviteTransaction(SIPRequest, IPEndPoint, SipTransactionCompleteDelegate, SipTransport, SIPResponse) Constructor. The transaction is not started until the StartTransaction method is called by the transport layer. Declaration public ServerNonInviteTransaction(SIPRequest request, IPEndPoint remoteEndPoint, SipTransactionCompleteDelegate transactionComplete, SipTransport TransportManager, SIPResponse ResponseToSend) Parameters Type Name Description SIPRequest request SIP request that was received by the server. IPEndPoint remoteEndPoint IP endpoint of the remote client that sent the request. SipTransactionCompleteDelegate transactionComplete Notification callback. Called when the transaction is completed or terminated. May be null if a notification is not required. SipTransport TransportManager Transport from which the request was received. SIPResponse ResponseToSend Initial response to send to the client. Will be sent when the transport layer calls the StartTransaction() method. Methods | Edit this page View Source SendResponse(SIPResponse) Sends a response to the non-INVITE request. The transaction user must use this method to send a response. Declaration public void SendResponse(SIPResponse response) Parameters Type Name Description SIPResponse response SIP response to send"
  },
  "api/SipLib.Transactions.SipInviteTransaction.html": {
    "href": "api/SipLib.Transactions.SipInviteTransaction.html",
    "title": "Class SipInviteTransaction",
    "keywords": "Class SipInviteTransaction Data class for a single SIP client INVITE transaction Inheritance object SipInviteTransaction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Transactions Assembly: SipLib.dll Syntax public class SipInviteTransaction"
  },
  "api/SipLib.Transactions.SipTimers.html": {
    "href": "api/SipLib.Transactions.SipTimers.html",
    "title": "Class SipTimers",
    "keywords": "Class SipTimers Defines the default timer intervals for SIP transactions defined in RFC 3261. Inheritance object SipTimers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Transactions Assembly: SipLib.dll Syntax public static class SipTimers Fields | Edit this page View Source T1 Value of the SIP defined timer T1 in milliseconds and is the time for the first retransmit. Should not need to be adjusted in normal circumstances. Declaration public static int T1 Field Value Type Description int | Edit this page View Source T1_TIMER_DEFAULT Default value for the SIP T1 timer Declaration public const int T1_TIMER_DEFAULT = 500 Field Value Type Description int | Edit this page View Source T2 Value of the SIP defined timer T2 in milliseconds and is the maximum time between retransmits. Should not need to be adjusted in normal circumstances. Declaration public static int T2 Field Value Type Description int | Edit this page View Source T4 The SIP T4 timer in milliseconds represents the amount of time the network will take to clear messages between client and server transactions. Declaration public static int T4 Field Value Type Description int | Edit this page View Source T6 Value of the SIP defined timer T6 in milliseconds and is the period after which a transaction has timed out. Should not need to be adjusted in normal circumstances. Declaration public static int T6 Field Value Type Description int | Edit this page View Source TimerB Interval in milliseconds that a client INVITE transaction can remain in the Calling state. See Section 17.1.1.2 and Figure 5 of RFC 3261. Declaration public static int TimerB Field Value Type Description int | Edit this page View Source TimerD Interval in milliseconds that a client INVITE transaction can remain in the Completed state. See Section 17.1.1.2 and Figure 5 of RFC 3261. Declaration public static int TimerD Field Value Type Description int | Edit this page View Source TimerG Used for server INVITE transactions in the Completed state when the transport protocol is UDP. Defines the interval in milliseconds at which the last sent response is retransmitted. Declaration public static int TimerG Field Value Type Description int | Edit this page View Source TimerH Used for server INVITE transactions in the Completed state. Specifies the interval in milliseconds that the server stops trying to retransmit the last sent final response. Declaration public static int TimerH Field Value Type Description int | Edit this page View Source TimerI Used for server INVITE transactions in the Confirmed state when the transport protocol is UDP. Specifies the interval in milliseconds that the server transaction remains in the Confirmed state. Declaration public static int TimerI Field Value Type Description int | Edit this page View Source TimerJ Used for server non-INVITE transactions in the Completed state when the transport protocol is UDP. The units are milliseconds. Declaration public static int TimerJ Field Value Type Description int"
  },
  "api/SipLib.Transactions.SipTransactionBase.html": {
    "href": "api/SipLib.Transactions.SipTransactionBase.html",
    "title": "Class SipTransactionBase",
    "keywords": "Class SipTransactionBase Base class for SIP transactions. See Section 17 of RFC 3261. Inheritance object SipTransactionBase ClientInviteTransaction ClientNonInviteTransaction ServerInviteTransaction ServerNonInviteTransaction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Transactions Assembly: SipLib.dll Syntax public class SipTransactionBase Constructors | Edit this page View Source SipTransactionBase(SIPRequest, IPEndPoint, SipTransactionCompleteDelegate?, SipTransport) Transaction base class constructor Declaration public SipTransactionBase(SIPRequest request, IPEndPoint remoteEndPoint, SipTransactionCompleteDelegate? transactionComplete, SipTransport TransportManager) Parameters Type Name Description SIPRequest request SIP request to send for client transactions or the request that was received for server transactions IPEndPoint remoteEndPoint Destination to send the request to for client transactions or the source of the request for server transactions SipTransactionCompleteDelegate transactionComplete Notification callback. May be null if a notification is not required.. SipTransport TransportManager SipTransportManager that is managing this transaction Fields | Edit this page View Source CompletionSemaphore Semaphore to signal when a transaction is completed or terminated. Declaration protected SemaphoreSlim CompletionSemaphore Field Value Type Description SemaphoreSlim | Edit this page View Source LastSipResponseSent The most recent SIPResponse that was sent to a client if this transaction is a server transaction. Not used for client transactions. Declaration protected SIPResponse? LastSipResponseSent Field Value Type Description SIPResponse | Edit this page View Source MaxAttempts Maximum number of transmission attempts for a request Declaration protected const int MaxAttempts = 3 Field Value Type Description int | Edit this page View Source NumAttempts Number of transmission attempts made so far Declaration protected int NumAttempts Field Value Type Description int | Edit this page View Source RemoteEndPoint Endpoint to send the request to if the transaction is a client transaction or the source of a request if the transaction is a server transaction. Declaration public IPEndPoint? RemoteEndPoint Field Value Type Description IPEndPoint | Edit this page View Source Request SIPRequest for the transaction. Declaration public SIPRequest? Request Field Value Type Description SIPRequest | Edit this page View Source RequestReceived Event that is fired when the transaction receives a SIP request. Declaration public TransactionRequestReceivedDelegate? RequestReceived Field Value Type Description TransactionRequestReceivedDelegate | Edit this page View Source RequestSentTime Time that the request was sent. Declaration protected DateTime RequestSentTime Field Value Type Description DateTime | Edit this page View Source ResponseReceived Event that is fired when the transaction receives a SIP response. Declaration public TransactionResponseReceivedDelegate? ResponseReceived Field Value Type Description TransactionResponseReceivedDelegate | Edit this page View Source State Current state of the transaction. Declaration protected TransactionStateEnum State Field Value Type Description TransactionStateEnum | Edit this page View Source StateLockObj Used by derived classes for locking the state variables Declaration protected object StateLockObj Field Value Type Description object | Edit this page View Source StateStartTime Time that the transaction entered the current state. Declaration protected DateTime StateStartTime Field Value Type Description DateTime | Edit this page View Source T1IntervalMs SIP T1 timer in milliseconds. Declaration protected int T1IntervalMs Field Value Type Description int | Edit this page View Source TransactionComplete Method to call when the transaction either completes or times out Declaration protected SipTransactionCompleteDelegate? TransactionComplete Field Value Type Description SipTransactionCompleteDelegate | Edit this page View Source TransactionStartTime Time that the transaction started. Declaration protected DateTime TransactionStartTime Field Value Type Description DateTime | Edit this page View Source m_transportManager Transport manager to use for sending messages Declaration protected SipTransport? m_transportManager Field Value Type Description SipTransport Properties | Edit this page View Source LastReceivedResponse Gets the last response received for a client transaction. Will be null if a response was never received. Declaration public SIPResponse? LastReceivedResponse { get; protected set; } Property Value Type Description SIPResponse | Edit this page View Source TerminationReason Gets the reason that the transaction was terminated. Declaration public TransactionTerminationReasonEnum TerminationReason { get; protected set; } Property Value Type Description TransactionTerminationReasonEnum | Edit this page View Source TransactionID Gets the TransactionID that uniquely identifies the transaction Declaration public string? TransactionID { get; protected set; } Property Value Type Description string | Edit this page View Source TransportManager Gets the SipTransportManager that is managing this transaction Declaration public SipTransport? TransportManager { get; } Property Value Type Description SipTransport Methods | Edit this page View Source GetClientTransactionID(SIPRequest) Calculates the TransactionID for a client transaction. See Section 17.1.3 of RFC 3261. Declaration protected static string GetClientTransactionID(SIPRequest request) Parameters Type Name Description SIPRequest request Request that was sent. Returns Type Description string Returns the TransactionID for the request. | Edit this page View Source GetClientTransactionID(SIPResponse) Calculates the TransactionID for a client transaction given the response. See Section 17.1.3 of RFC 3261. This method is used for calculating the transaction ID of a SIP response message so that it may be matched to an existing transaction. Declaration public static string GetClientTransactionID(SIPResponse response) Parameters Type Name Description SIPResponse response Returns Type Description string | Edit this page View Source GetServerTransactionID(SIPRequest) Gets the TransactionID for a server transaction. See Section 17.2.3 of RFC 3261. Declaration public static string GetServerTransactionID(SIPRequest request) Parameters Type Name Description SIPRequest request Request that was received Returns Type Description string | Edit this page View Source NotifyTransactionUser(SIPRequest, SIPResponse?, IPEndPoint) Notifies the transaction user that the transaction has either terminated or timed out. Declaration protected void NotifyTransactionUser(SIPRequest Request, SIPResponse? Response, IPEndPoint RemoteEndPoint) Parameters Type Name Description SIPRequest Request Request relating to the transaction SIPResponse Response Response that was received. May be null if a response was never received IPEndPoint RemoteEndPoint Remote endpoint for the transaction. | Edit this page View Source WaitForCompletionAsync() Asynchronously waits for the transaction to complete. Declaration public Task<SipTransactionBase> WaitForCompletionAsync() Returns Type Description Task<SipTransactionBase>"
  },
  "api/SipLib.Transactions.SipTransport.html": {
    "href": "api/SipLib.Transactions.SipTransport.html",
    "title": "Class SipTransport",
    "keywords": "Class SipTransport This class manages sending and receiving SIP messages on a single SIPChannel. It also manages SIP transactions for transactions on that SIPChannel. Inheritance object SipTransport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Transactions Assembly: SipLib.dll Syntax public class SipTransport Constructors | Edit this page View Source SipTransport(SIPChannel) Constructor Declaration public SipTransport(SIPChannel sipChannel) Parameters Type Name Description SIPChannel sipChannel SIPChannel to use for sending and receiving SIP messages. Properties | Edit this page View Source SipChannel Gets the SIPChannel object that this class is managing. Declaration public SIPChannel SipChannel { get; } Property Value Type Description SIPChannel | Edit this page View Source TransactionCount Gets the number of active transactions. Declaration public int TransactionCount { get; } Property Value Type Description int Methods | Edit this page View Source SendSipRequest(SIPRequest, IPEndPoint) Sends a SIP request on the SIPChannel Declaration public void SendSipRequest(SIPRequest Request, IPEndPoint DestEp) Parameters Type Name Description SIPRequest Request SIP request to send IPEndPoint DestEp Destination endpoint | Edit this page View Source SendSipResponse(SIPResponse, SIPEndPoint) Sends a SIP response message on the SIPChannel. This method fires the LogSipResponse event for NG9-1-1 event logging. Declaration public void SendSipResponse(SIPResponse Response, SIPEndPoint DestEp) Parameters Type Name Description SIPResponse Response SIP response message to send SIPEndPoint DestEp Destination SIPEndPoint to send the message to. | Edit this page View Source SendSipResponse(SIPResponse, IPEndPoint) Sends a SIP response message on the SIPChannel. This method fires the LogSipResponse event for NG9-1-1 event logging. Declaration public void SendSipResponse(SIPResponse Response, IPEndPoint DestEp) Parameters Type Name Description SIPResponse Response SIP response message to send IPEndPoint DestEp Destination IPEndPoint to send the message to. | Edit this page View Source Shutdown() Call this method to shutdown the processing thread and close the SIP channel and all current connections. Declaration public void Shutdown() | Edit this page View Source Start() Call this method after hooking the events to start the message processing thread. Declaration public void Start() | Edit this page View Source StartClientInvite(SIPRequest, IPEndPoint, SipTransactionCompleteDelegate?, TransactionResponseReceivedDelegate?) Creates and starts a client INVITE transaction. Declaration public ClientInviteTransaction StartClientInvite(SIPRequest request, IPEndPoint remoteEndPoint, SipTransactionCompleteDelegate? completeDelegate, TransactionResponseReceivedDelegate? responseReceivedDelegate) Parameters Type Name Description SIPRequest request SIP INVITE request to send IPEndPoint remoteEndPoint Destination to send the request to SipTransactionCompleteDelegate completeDelegate Notification callback. Called when the transaction is completed or terminated. May be null if a notification is not required. TransactionResponseReceivedDelegate responseReceivedDelegate Callback function to call when a response is received for the transaction. Optional, may be null. This may be used when the client transaction user needs to be informed of provisional responses (ex. 180 Ringing or 183 Session Progress) Returns Type Description ClientInviteTransaction Returns a new ClientInviteTransaction object | Edit this page View Source StartClientInviteAsync(SIPRequest, IPEndPoint, TransactionResponseReceivedDelegate?) Creates and starts a client INVITE transaction asynchronously. Declaration public Task<ClientInviteTransaction> StartClientInviteAsync(SIPRequest request, IPEndPoint remoteEndPoint, TransactionResponseReceivedDelegate? responseReceivedDelegate) Parameters Type Name Description SIPRequest request SIP INVITE request to send IPEndPoint remoteEndPoint Destination to send the request to TransactionResponseReceivedDelegate responseReceivedDelegate Callback function to call when a response is received for the transaction. Optional, may be null. This may be used when the client transaction user needs to be informed of provisional responses (ex. 180 Ringing or 183 Session Progress) Returns Type Description Task<ClientInviteTransaction> Returns a ClientInviteTransaction that contains the results of the transaction | Edit this page View Source StartClientNonInviteTransaction(SIPRequest, IPEndPoint, SipTransactionCompleteDelegate?, int) Creates and starts a client non-INVITE SIP transaction Declaration public ClientNonInviteTransaction StartClientNonInviteTransaction(SIPRequest request, IPEndPoint remoteEndPoint, SipTransactionCompleteDelegate? completeDelegate, int FinalResponseTimeoutMs = 32000) Parameters Type Name Description SIPRequest request SIP request to send IPEndPoint remoteEndPoint Destination to send the request to SipTransactionCompleteDelegate completeDelegate Notification callback. Called when the transaction is completed or terminated. May be null if a notification is not required. int FinalResponseTimeoutMs Number of milliseconds to wait for a final response. This corresponds to Timer F shown in Figure 6 of RFC 3261. The default value is 32,000 milliseconds (64 * T1, where T1 is 500 ms). Returns Type Description ClientNonInviteTransaction Returns a new ClientNonInviteTransaction object | Edit this page View Source StartServerInviteTransaction(SIPRequest, IPEndPoint, SipTransactionCompleteDelegate?, SIPResponse) Creates and starts a server INVITE transaction. Declaration public ServerInviteTransaction StartServerInviteTransaction(SIPRequest request, IPEndPoint remoteEndPoint, SipTransactionCompleteDelegate? completeDelegate, SIPResponse ResponseToSend) Parameters Type Name Description SIPRequest request INVITE request that was received. IPEndPoint remoteEndPoint IP endpoint of the remote client that sent the request. SipTransactionCompleteDelegate completeDelegate Notification callback. Called when the transaction is completed or terminated. May be null if a notification is not required. SIPResponse ResponseToSend Initial response to send to the client. Will be sent when the transport layer calls the StartTransaction() method. Returns Type Description ServerInviteTransaction Returns a new ServerInviteTransaction object. | Edit this page View Source StartServerNonInviteTransaction(SIPRequest, IPEndPoint, SipTransactionCompleteDelegate?, SIPResponse) Creates and starts a server non-INVITE transaction. Declaration public ServerNonInviteTransaction StartServerNonInviteTransaction(SIPRequest request, IPEndPoint remoteEndPoint, SipTransactionCompleteDelegate? completeDelegate, SIPResponse ResponseToSend) Parameters Type Name Description SIPRequest request SIP request that was received by the server. IPEndPoint remoteEndPoint IP endpoint of the remote client that sent the request. SipTransactionCompleteDelegate completeDelegate Notification callback. Called when the transaction is completed or terminated. May be null if a notification is not required. SIPResponse ResponseToSend Initial response to send to the client. Will be sent when the transport layer calls the StartTransaction() method. Returns Type Description ServerNonInviteTransaction Returns a new ServerNonInviteTransaction object Events | Edit this page View Source LogInvalidSipMessage Event that is fired if this SipTransport object receives an invalid SIP message. Declaration public event LogInvalidSipMessageDelegate? LogInvalidSipMessage Event Type Type Description LogInvalidSipMessageDelegate | Edit this page View Source LogSipRequest Event that is fired for every SIP request that is sent or received by the SipTransport class. For received requests, this event is fired after the request is sent to a transaction object or to the SipTransport user. Declaration public event LogSipRequestDelegate? LogSipRequest Event Type Type Description LogSipRequestDelegate | Edit this page View Source LogSipResponse Event that is fired for every SIP response that is sent or received by the SipTransport class. For received responses, this event is fired after the response is sent to a transaction object or to the SipTransport user. Declaration public event LogSipResponseDelegate? LogSipResponse Event Type Type Description LogSipResponseDelegate | Edit this page View Source SipRequestReceived Event that is fired when a SIP request is received. This event is not fired if the SIP request is handled by a SIP transaction object (a SipTransactionBase derived class). The SIP transaction layer may pass the request up to the transaction user if required. Declaration public event SipRequestReceivedDelegate? SipRequestReceived Event Type Type Description SipRequestReceivedDelegate | Edit this page View Source SipResponseReceived Event that is fired when a SIP response is received. This event is not fired if the SIP response is handled by a SIP transaction object (a SipTransactionBase derived class). The SIP transaction layer may pass the response up to the transaction user if required. Declaration public event SipResponseReceivedDelegate? SipResponseReceived Event Type Type Description SipResponseReceivedDelegate"
  },
  "api/SipLib.Transactions.TransactionRequestReceivedDelegate.html": {
    "href": "api/SipLib.Transactions.TransactionRequestReceivedDelegate.html",
    "title": "Delegate TransactionRequestReceivedDelegate",
    "keywords": "Delegate TransactionRequestReceivedDelegate Delegate type for the RequestReceived event of all SipTransactionBase derived classes. Namespace: SipLib.Transactions Assembly: SipLib.dll Syntax public delegate void TransactionRequestReceivedDelegate(SIPRequest Request, IPEndPoint RemoteEndPoint, SipTransactionBase Transaction) Parameters Type Name Description SIPRequest Request SIPRequest that the transaction handled. IPEndPoint RemoteEndPoint Remote endpoint that sent the request. SipTransactionBase Transaction Transaction that fired the event."
  },
  "api/SipLib.Transactions.TransactionResponseReceivedDelegate.html": {
    "href": "api/SipLib.Transactions.TransactionResponseReceivedDelegate.html",
    "title": "Delegate TransactionResponseReceivedDelegate",
    "keywords": "Delegate TransactionResponseReceivedDelegate Delegate type for the ResponseReceived event of all SipTransactionBase derived classes. Namespace: SipLib.Transactions Assembly: SipLib.dll Syntax public delegate void TransactionResponseReceivedDelegate(SIPResponse Response, IPEndPoint RemoteEndPoint, SipTransactionBase Transaction) Parameters Type Name Description SIPResponse Response SIPResponse that the transaction handled. IPEndPoint RemoteEndPoint Remote endpoint that sent the response. SipTransactionBase Transaction Transaction that fired the event."
  },
  "api/SipLib.Transactions.TransactionStateEnum.html": {
    "href": "api/SipLib.Transactions.TransactionStateEnum.html",
    "title": "Enum TransactionStateEnum",
    "keywords": "Enum TransactionStateEnum SIP transaction states Namespace: SipLib.Transactions Assembly: SipLib.dll Syntax public enum TransactionStateEnum Fields Name Description Calling The INVITE request has been sent but a provisional resonse has not been received yet. Used for client INVITE transactions Completed The transaction has been comleted. Confirmed Used for server INVITE transactions. An ACK was received while the transaction was in the Completed state ForceTerminated The transaction was forcefully terminated because the transaction is a client INVITE transaction and a CANCEL request was sent but the CANCEL request transaction failed. Proceeding A provisional response (100 - 199) has been received. Used for the client INVITE and client non-INVITE transactions. Terminated The transaction has been terminated. Trying The request has been sent but a provisional response has not been received yet. Used by the client non-INVITE transactions."
  },
  "api/SipLib.Transactions.TransactionTerminationReasonEnum.html": {
    "href": "api/SipLib.Transactions.TransactionTerminationReasonEnum.html",
    "title": "Enum TransactionTerminationReasonEnum",
    "keywords": "Enum TransactionTerminationReasonEnum Enumeration of the reasons that a transaction was terminated Namespace: SipLib.Transactions Assembly: SipLib.dll Syntax public enum TransactionTerminationReasonEnum Fields Name Description AckToFinalResponseNotReceived For server INVITE transactions. Indicates that the server sent a 300 - 699 final response code to the client, but the client never sent an ACK request. CancelRequestFailed Used for client INVITE requests. An client INVITE request was sent. Then the client sent a client CANCEL but the CANCEL transaction failed so the original client INVITE transaction was forcefully terminated by the transaction manager. ConnectionFailure A connection failure for a TCP or TLS connection was detected. Does not apply to a UDP. FinalResponseReceived A final response code (300 - 699) was received NoFinalResponseReceived For client non-INVITE transactions, an interim response was received but a final response was never received. NoResponseReceived No response was received for the request. OkReceived A 200 OK or other 2XX response was received"
  },
  "api/SipLib.Transactions.html": {
    "href": "api/SipLib.Transactions.html",
    "title": "Namespace SipLib.Transactions",
    "keywords": "Namespace SipLib.Transactions Classes for managing SIP transactions as specified in Section 17 of RFC 3261. The SipTransport class manages sending and receiving SIP messages on a single SIPChannel. It also manages SIP transactions for transactions on that SIPChannel. Classes ClientInviteTransaction Class for managing a single SIP client INVITE transaction. See Section 17.1.1 of RFC 3261. ClientNonInviteTransaction Class for managing a single SIP client non-INVITE transaction. See Section 17.1.2 of RFC 3261. ServerInviteTransaction Class for managing a SIP server INVITE transaction. See Section 17.2.1 of RFC 3261. ServerNonInviteTransaction Class for handling a server non-INVITE transaction. See Section 17.2.2 of RFC 3261. SipTimers Defines the default timer intervals for SIP transactions defined in RFC 3261. SipTransactionBase Base class for SIP transactions. See Section 17 of RFC 3261. SipTransport This class manages sending and receiving SIP messages on a single SIPChannel. It also manages SIP transactions for transactions on that SIPChannel. Enums TransactionStateEnum SIP transaction states TransactionTerminationReasonEnum Enumeration of the reasons that a transaction was terminated Delegates TransactionRequestReceivedDelegate Delegate type for the RequestReceived event of all SipTransactionBase derived classes. TransactionResponseReceivedDelegate Delegate type for the ResponseReceived event of all SipTransactionBase derived classes."
  },
  "api/SipLib.Video.H264Depacketiser.html": {
    "href": "api/SipLib.Video.H264Depacketiser.html",
    "title": "Class H264Depacketiser",
    "keywords": "Class H264Depacketiser Class that receives H264 encoded video Network Access Layer (NALs) in RTP packets and builds complete H264 encoded access units that can then be decoded. Inheritance object H264Depacketiser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Video Assembly: SipLib.dll Syntax public class H264Depacketiser Methods | Edit this page View Source ProcessRTPPayload(byte[], ushort, uint, int, out bool) Processes a single RTP packet containing one or more H264 NALs and builds up a full H264 access unit frame. Declaration public MemoryStream? ProcessRTPPayload(byte[] rtpPayload, ushort seqNum, uint timestamp, int markbit, out bool isKeyFrame) Parameters Type Name Description byte[] rtpPayload The payload of the RTP packet ushort seqNum The SEQ field of the RTP packet uint timestamp The Timestamp field of the RTP packet int markbit The marker bit field of the RTP packet bool isKeyFrame Output. Set to true if the frame is a key frame. Returns Type Description MemoryStream Returns a MemoryStream containing a complete H264 access unit frame when one is ready. Use the ToArray() method to get the byte array containing the complete frame. Returns null if a full frame is not ready yet."
  },
  "api/SipLib.Video.H264Packetiser.H264Nal.html": {
    "href": "api/SipLib.Video.H264Packetiser.H264Nal.html",
    "title": "Struct H264Packetiser.H264Nal",
    "keywords": "Struct H264Packetiser.H264Nal Structure for representing an H264 NAL Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SipLib.Video Assembly: SipLib.dll Syntax public struct H264Packetiser.H264Nal Constructors | Edit this page View Source H264Nal(byte[], bool) Constructor Declaration public H264Nal(byte[] nal, bool isLast) Parameters Type Name Description byte[] nal bool isLast Properties | Edit this page View Source IsLast If true, then this is the last NAL Declaration public readonly bool IsLast { get; } Property Value Type Description bool | Edit this page View Source NAL Gets the bytes of the NAL Declaration public readonly byte[] NAL { get; } Property Value Type Description byte[]"
  },
  "api/SipLib.Video.H264Packetiser.html": {
    "href": "api/SipLib.Video.H264Packetiser.html",
    "title": "Class H264Packetiser",
    "keywords": "Class H264Packetiser Contains functions to packetise an H264 Network Abstraction Layer Units (NAL or NALU) into an RTP payload. See \"RTP Payload Format for H.264 Video\" https://tools.ietf.org/html/rfc6184 Inheritance object H264Packetiser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Video Assembly: SipLib.dll Syntax public class H264Packetiser Remarks Packetisation Modes (see https://tools.ietf.org/html/rfc6184#section-6.2): Mode 0: Single NAL Unit Mode. This is the default mode used when no packetization-mode parameter is present or when it is set to 0. Only single NAL unit packets may be used in this mode. STAPs, MTAPs and FUs must not be used. Mode 1: Non-interleaved mode. This is the mode used when the packetization-mode=1. Only single NAL unit packets, STAP-As and FU-As may be used in this mode. Mode 2: Interleaved mode. This is the mode used when the packetization-mode=2. This mode is not currently supported. Methods | Edit this page View Source GetH264RtpHeader(byte, bool, bool) Constructs the RTP header for an H264 NAL. This method does NOT support aggregation packets where multiple NALs are sent as a single RTP payload. The supported H264 header type is Single-Time Aggregation Packet type A (STAP-A) and Fragmentation Unit A (FU-A). The headers produced correspond to H264 packetization-mode=1. Declaration public static byte[] GetH264RtpHeader(byte nal0, bool isFirstPacket, bool isFinalPacket) Parameters Type Name Description byte nal0 Input H264 NAL bool isFirstPacket Input. Set to true if this is the first packet bool isFinalPacket Input. Set to true if this is the final packet Returns Type Description byte[] Remarks RTP Payload Format for H.264 Video: https://tools.ietf.org/html/rfc6184 FFmpeg H264 RTP packetisation code: https://github.com/FFmpeg/FFmpeg/blob/master/libavformat/rtpenc_h264_hevc.c When the payload size is less than or equal to max RTP payload, send as Single-Time Aggregation Packet (STAP): https://tools.ietf.org/html/rfc6184#section-5.7.1 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | RTP Header | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |STAP-A NAL HDR | NALU 1 Size | NALU 1 HDR | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |F|NRI| Type | | +-+-+-+-+-+-+-+-+ Type = 24 for STAP-A (NOTE: this is the type of the H264 RTP header and NOT the NAL type). When the payload size is greater than max RTP payload, send as Fragmentation Unit A (FU-A): https://tools.ietf.org/html/rfc6184#section-5.8 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | FU indicator | FU header | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Fragmentation Unit (FU) Payload | ... The FU indicator octet has the following format: +---------------+ |0|1|2|3|4|5|6|7| +-+-+-+-+-+-+-+-+ |F|NRI| Type | +---------------+ F and NRI bits come from the NAL being transmitted. Type = 28 for FU-A (NOTE: this is the type of the H264 RTP header and NOT the NAL type). The FU header has the following format: +---------------+ |0|1|2|3|4|5|6|7| +-+-+-+-+-+-+-+-+ |S|E|R| Type | +---------------+ S: Set to 1 for the start of the NAL FU (i.e. first packet in frame). E: Set to 1 for the end of the NAL FU (i.e. the last packet in the frame). R: Reserved bit must be 0. Type: The NAL unit payload type, comes from NAL packet (NOTE: this IS the type of the NAL message). | Edit this page View Source ParseNals(byte[]) Parses an H264 encoded frame (access unit) into a list of H264Nal structures Declaration public static IEnumerable<H264Packetiser.H264Nal> ParseNals(byte[] accessUnit) Parameters Type Name Description byte[] accessUnit Input H264 access unit Returns Type Description IEnumerable<H264Packetiser.H264Nal>"
  },
  "api/SipLib.Video.H264RtpReceiver.html": {
    "href": "api/SipLib.Video.H264RtpReceiver.html",
    "title": "Class H264RtpReceiver",
    "keywords": "Class H264RtpReceiver Class that processes RTP packets containing H264 encoded video data. Inheritance object VideoRtpReceiver H264RtpReceiver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Video Assembly: SipLib.dll Syntax public class H264RtpReceiver : VideoRtpReceiver Constructors | Edit this page View Source H264RtpReceiver() Constructor Declaration public H264RtpReceiver() Methods | Edit this page View Source ProcessRtpPacket(RtpPacket) Processes a new RTP packet containing an H264 NAL. Declaration public override byte[]? ProcessRtpPacket(RtpPacket rtpPacket) Parameters Type Name Description RtpPacket rtpPacket RTP packet to process Returns Type Description byte[] Returns a byte array containing a complete H264 access unit frame when a full frame has been received. Returns null if a full frame is not ready yet. Overrides VideoRtpReceiver.ProcessRtpPacket(RtpPacket)"
  },
  "api/SipLib.Video.H264RtpSender.html": {
    "href": "api/SipLib.Video.H264RtpSender.html",
    "title": "Class H264RtpSender",
    "keywords": "Class H264RtpSender Class that processes H264 encoded access units and packetizes H264 NAL units into RTP packets so the H264 encoded data can be sent over the network. Inheritance object VideoRtpSender H264RtpSender Inherited Members VideoRtpSender.SequenceNumber VideoRtpSender.Timestamp VideoRtpSender.SSRC VideoRtpSender.PayloadType VideoRtpSender.TimestampIncrement VideoRtpSender.RtpSender VideoRtpSender.MAX_RTP_PAYLOAD VideoRtpSender.SendRtpPacket(byte[], bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Video Assembly: SipLib.dll Syntax public class H264RtpSender : VideoRtpSender Constructors | Edit this page View Source H264RtpSender(int, uint, RtpSendDelegate) Constructor Declaration public H264RtpSender(int payloadType, uint frameRate, RtpSendDelegate sender) Parameters Type Name Description int payloadType RTP payload number to use uint frameRate Video frame rate in frames per second RtpSendDelegate sender Delegate to use to send RTP packets. Methods | Edit this page View Source SendEncodedFrame(byte[]) Processes an H264 frame contained in an H264 Access Unit. An Access Unit can contain one or more NAL's. The NAL's have to be parsed in order to be able to package in RTP packets. Declaration public override void SendEncodedFrame(byte[] accessUnit) Parameters Type Name Description byte[] accessUnit Input H264 access unit Overrides VideoRtpSender.SendEncodedFrame(byte[])"
  },
  "api/SipLib.Video.RtpSendDelegate.html": {
    "href": "api/SipLib.Video.RtpSendDelegate.html",
    "title": "Delegate RtpSendDelegate",
    "keywords": "Delegate RtpSendDelegate Delegate type for a function that sends an RTP packet. Used for the H264RtpSender class when an RTP packet needs to be sent. Namespace: SipLib.Video Assembly: SipLib.dll Syntax public delegate void RtpSendDelegate(RtpPacket rtpPckt) Parameters Type Name Description RtpPacket rtpPckt RTP packet to send"
  },
  "api/SipLib.Video.RtpVP8Header.html": {
    "href": "api/SipLib.Video.RtpVP8Header.html",
    "title": "Class RtpVP8Header",
    "keywords": "Class RtpVP8Header Representation of the VP8 RTP header as specified in RFC7741. See https://tools.ietf.org/html/rfc7741. Inheritance object RtpVP8Header Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Video Assembly: SipLib.dll Syntax public class RtpVP8Header Fields | Edit this page View Source ExtendedControlBitsPresent Indicates whether extended control bits are present. Declaration public bool ExtendedControlBitsPresent Field Value Type Description bool | Edit this page View Source FirstPartitionSize The size of the first partition in bytes is calculated from the 19 bits in Size0, Size1 and Size2 as: size = Size0 + (8 x Size1) + (2048 8 Size2). Declaration public int FirstPartitionSize Field Value Type Description int | Edit this page View Source IsPictureIDPresent If true then the PictureID field is present in the VP8 header Declaration public bool IsPictureIDPresent Field Value Type Description bool | Edit this page View Source NonReferenceFrame When set indicates the frame can be discarded without affecting any other frames. Declaration public bool NonReferenceFrame Field Value Type Description bool | Edit this page View Source PartitionIndex Denotes the VP8 partition index that the first payload octet of the packet belongs to. Declaration public byte PartitionIndex Field Value Type Description byte | Edit this page View Source PictureID Contains the PictureID field. Valid only if IsPictureIDPresent is true. Declaration public ushort PictureID Field Value Type Description ushort | Edit this page View Source StartOfVP8Partition Should be set when the first payload octet is the start of a new VP8 partition. Declaration public bool StartOfVP8Partition Field Value Type Description bool Properties | Edit this page View Source Length Gets the length of the VP8 header. Declaration public int Length { get; } Property Value Type Description int | Edit this page View Source PayloadDescriptorLength Gets the length of the Payload Descriptor in the VP8 header. Declaration public int PayloadDescriptorLength { get; } Property Value Type Description int Methods | Edit this page View Source GetVP8Header(byte[]) Gets the RtpVP8Header from the payload of an RTP packet Declaration public static RtpVP8Header GetVP8Header(byte[] rtpPayload) Parameters Type Name Description byte[] rtpPayload Payload of the received RTP packet. Returns Type Description RtpVP8Header Returns a new RtpVP8header object."
  },
  "api/SipLib.Video.VP8RtpReceiver.html": {
    "href": "api/SipLib.Video.VP8RtpReceiver.html",
    "title": "Class VP8RtpReceiver",
    "keywords": "Class VP8RtpReceiver Class for processing RTP packets containing VP8 encode video frames. Inheritance object VideoRtpReceiver VP8RtpReceiver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Video Assembly: SipLib.dll Syntax public class VP8RtpReceiver : VideoRtpReceiver Methods | Edit this page View Source ProcessRtpPacket(RtpPacket) Processes RTP packets and builds up a complete VP8 encoded video frame. Declaration public override byte[]? ProcessRtpPacket(RtpPacket rtpPacket) Parameters Type Name Description RtpPacket rtpPacket Input RTP packet Returns Type Description byte[] Returns a complete video frame containing VP8 encoded video data when a full frame is ready. Returns null if a full frame is not ready yet. Overrides VideoRtpReceiver.ProcessRtpPacket(RtpPacket)"
  },
  "api/SipLib.Video.VP8RtpSender.html": {
    "href": "api/SipLib.Video.VP8RtpSender.html",
    "title": "Class VP8RtpSender",
    "keywords": "Class VP8RtpSender Class for processing VP8 encoding video frames and sending them in RTP packets. Inheritance object VideoRtpSender VP8RtpSender Inherited Members VideoRtpSender.SequenceNumber VideoRtpSender.Timestamp VideoRtpSender.SSRC VideoRtpSender.PayloadType VideoRtpSender.TimestampIncrement VideoRtpSender.RtpSender VideoRtpSender.MAX_RTP_PAYLOAD VideoRtpSender.SendRtpPacket(byte[], bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Video Assembly: SipLib.dll Syntax public class VP8RtpSender : VideoRtpSender Constructors | Edit this page View Source VP8RtpSender(int, uint, RtpSendDelegate) Constructor Declaration public VP8RtpSender(int payloadType, uint frameRate, RtpSendDelegate sender) Parameters Type Name Description int payloadType RTP payload number to use uint frameRate Video frame rate in frames per second RtpSendDelegate sender Delegate to use to send RTP packets. Methods | Edit this page View Source SendEncodedFrame(byte[]) Processes a VP8 encoded video frame and sends it as multiple RTP packets if the frame is longer than MAX_RTP_PAYLOAD bytes long. Declaration public override void SendEncodedFrame(byte[] buffer) Parameters Type Name Description byte[] buffer Input byte array containg a VP8 encoded video frame. Overrides VideoRtpSender.SendEncodedFrame(byte[])"
  },
  "api/SipLib.Video.VideoRtpReceiver.html": {
    "href": "api/SipLib.Video.VideoRtpReceiver.html",
    "title": "Class VideoRtpReceiver",
    "keywords": "Class VideoRtpReceiver Base class for classes that receive encoded RTP packets Inheritance object VideoRtpReceiver H264RtpReceiver VP8RtpReceiver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Video Assembly: SipLib.dll Syntax public class VideoRtpReceiver Constructors | Edit this page View Source VideoRtpReceiver() Constructor Declaration public VideoRtpReceiver() Methods | Edit this page View Source ProcessRtpPacket(RtpPacket) Processes a single RTP packet containing encoded video data. Declaration public virtual byte[]? ProcessRtpPacket(RtpPacket rtpPacket) Parameters Type Name Description RtpPacket rtpPacket Input RTP packet that has been received from the network. Returns Type Description byte[] Returns a byte array containing the encoded video for a complete video frame. Returns null if a full encoded frame is not ready yet."
  },
  "api/SipLib.Video.VideoRtpSender.html": {
    "href": "api/SipLib.Video.VideoRtpSender.html",
    "title": "Class VideoRtpSender",
    "keywords": "Class VideoRtpSender Base class for classes that need to send encoded video frames using RTP. Inheritance object VideoRtpSender H264RtpSender VP8RtpSender Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipLib.Video Assembly: SipLib.dll Syntax public class VideoRtpSender Constructors | Edit this page View Source VideoRtpSender(int, uint, RtpSendDelegate) Constructor Declaration public VideoRtpSender(int payloadType, uint frameRate, RtpSendDelegate sender) Parameters Type Name Description int payloadType The negotiated RTP packet payload type uint frameRate The frame rate in frames per second. RtpSendDelegate sender Delegate function to use to send RTP packets Fields | Edit this page View Source MAX_RTP_PAYLOAD The maximum RTP packet payload size to send Declaration protected const int MAX_RTP_PAYLOAD = 1200 Field Value Type Description int | Edit this page View Source PayloadType The RTP packet payload type field. Declaration protected int PayloadType Field Value Type Description int | Edit this page View Source RtpSender Function to call to send the RTP packet. Declaration protected RtpSendDelegate RtpSender Field Value Type Description RtpSendDelegate | Edit this page View Source SSRC The RTP packet SSRC field. This is randomly generated by this base class. Declaration protected uint SSRC Field Value Type Description uint | Edit this page View Source SequenceNumber The RTP packet sequence number Declaration protected ushort SequenceNumber Field Value Type Description ushort | Edit this page View Source Timestamp The RTP packet Timestamp field Declaration protected uint Timestamp Field Value Type Description uint | Edit this page View Source TimestampIncrement The amount to increment the Timestamp field when a full frame's worth of RTP packets have been sent. Declaration protected uint TimestampIncrement Field Value Type Description uint Methods | Edit this page View Source SendEncodedFrame(byte[]) Derived classes must override this method to send the encoded video frame in RTP packets. The packetization algorithm depends upon the video encoder type. Declaration public virtual void SendEncodedFrame(byte[] encodedFrame) Parameters Type Name Description byte[] encodedFrame The encoded video frame to send. | Edit this page View Source SendRtpPacket(byte[], bool) Sends a single RTP packet Declaration protected void SendRtpPacket(byte[] payload, bool markerBit) Parameters Type Name Description byte[] payload bool markerBit"
  },
  "api/SipLib.Video.html": {
    "href": "api/SipLib.Video.html",
    "title": "Namespace SipLib.Video",
    "keywords": "Namespace SipLib.Video Classes for packing and unpacking video frames for use in RTP channels for H.264 and VP8 video. The H.264 and VP8 codecs are not included here. Classes H264Depacketiser Class that receives H264 encoded video Network Access Layer (NALs) in RTP packets and builds complete H264 encoded access units that can then be decoded. H264Packetiser Contains functions to packetise an H264 Network Abstraction Layer Units (NAL or NALU) into an RTP payload. See \"RTP Payload Format for H.264 Video\" https://tools.ietf.org/html/rfc6184 H264RtpReceiver Class that processes RTP packets containing H264 encoded video data. H264RtpSender Class that processes H264 encoded access units and packetizes H264 NAL units into RTP packets so the H264 encoded data can be sent over the network. RtpVP8Header Representation of the VP8 RTP header as specified in RFC7741. See https://tools.ietf.org/html/rfc7741. VP8RtpReceiver Class for processing RTP packets containing VP8 encode video frames. VP8RtpSender Class for processing VP8 encoding video frames and sending them in RTP packets. VideoRtpReceiver Base class for classes that receive encoded RTP packets VideoRtpSender Base class for classes that need to send encoded video frames using RTP. Structs H264Packetiser.H264Nal Structure for representing an H264 NAL Delegates RtpSendDelegate Delegate type for a function that sends an RTP packet. Used for the H264RtpSender class when an RTP packet needs to be sent."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "SipLib Namespaces",
    "keywords": "SipLib Namespaces The SipLib namespace contains the following child namespaces. Namespace Description Body Contains classes for working with the body of SIP messages. Channels Classes for sending and receiving SIP messages over UDP, TCP or TLS connections. Collections Contains thread-safe generic collection classes that are not provided by the .NET class libraries Core Core classes for building and parsing SIP messages. Dtls Classes required to support encryption and decryption of media (audio, video and Real Time Text) using the Datagram Transport Layer Security DTLS specified in RFC 5763 and RFC 5764. Logging Contains a static class called SipLogger that the classes in this class library can use for logging application messages. Media Classes for encoding and decoding audio. The supported codecs are G.711 Mu-Law, G.711 A-Law and G.722. Msrp Message Session Relay Protocol (MSRP, see RFC 4975) related classes. Network Contains a utility helper class for performing network protocol related functions. RealTimeText Classes for the Real Time Text (RTT, see RFC 4103) protocol. Rtp Classes for the Real Time Protocol (RTP, see RFC 3550). The main class is called RtpChannel. This class supports unencrypted RTP media as well as encryption using the SDES-SRTP (RFC 3711, RFC 4568) and SDES-DTLS (RFC 5763, RFC 5764) protocols. RtpCrypto Classes that implement the SDES-SRTP protocols used in secure RTP. Sdp Classes used for the Session Description Protocol (SDP, see RFC 8866). Transactions Classes for managing SIP transactions as specified in Section 17 of RFC 3261. Video Classes for packing and unpacking video frames for use in RTP channels for H.264 and VP8 video. The H.264 and VP8 codecs are not included here."
  },
  "articles/ConfigureSipLibLogging.html": {
    "href": "articles/ConfigureSipLibLogging.html",
    "title": "Configuring SipLib Logging",
    "keywords": "Configuring SipLib Logging The SipLib class library includes a class called SipLogger that the other classes in this class library can use for logging application log messages. By default, the SipLogger class logs to a NullLogger. This means that no messages are logged. The consumer of the SipLib class librarry must configure the SipLogger class so that it writes log messages to to a logging destination such as a file or the console. The best way to configure SipLib logging is to use a logging framework such as Serilog to create a ILogger interface and then pass that interface to SipLogger using the Log setter property. The following code snippet shows how an application can configure the SipLibLogger class. using Serilog; using Serilog.Core; using Serilog.Extensions.Logging; using SipLib.Logging; internal static class Program { private const string LoggingDirectory = @\"\\LoggingFolder\"; private const string LoggingFileName = \"LoggingFile.log\"; private const int LoggingFileSizeBytes = 1000000; private const int MaxLogFiles = 5; private static LoggingLevelSwitch m_LevelSwitch = new LoggingLevelSwitch(); [STAThread] static void Main() { if (Directory.Exists(LoggingDirectory) == false) Directory.CreateDirectory(LoggingDirectory); string LoggingPath = Path.Combine(LoggingDirectory, LoggingFileName); Logger logger = new LoggerConfiguration() .MinimumLevel.ControlledBy(m_LevelSwitch) .WriteTo.File(LoggingPath, fileSizeLimitBytes: LoggingFileSizeBytes, retainedFileCountLimit: MaxLogFiles, outputTemplate: \"{Timestamp:yyyy-MM-ddTHH:mm:ss.ffffffzzz} [{Level}] {Message}{NewLine}{Exception}\") .CreateLogger(); SerilogLoggerFactory factory = new SerilogLoggerFactory(loggger); SipLogger.Log = factory.CreateLogger(\"MyCategoryName\"); SipLogger.LogInformation(\"Starting the application now\"); // To customize application configuration such as set high DPI settings or default font, // see https://aka.ms/applicationconfiguration. ApplicationConfiguration.Initialize(); Application.Run(new Form1()); SipLogger.LogInformation(\"Exiting the application now\"); } public static void SetLoggingLevel(LogEventLevel level) { m_LevelSwitch.MinimumLevel = level; } } The SipLogger class adds the class name and the method name of the method logging a message to the message being logged. For example, the configuration shown above will result in log messages that look like: 2024-02-05T19:57:18.127145-08:00 [Information] Program.Main() Starting the application now The LoggingLevelSwitch object can be used by the application to dynamically control the logging level. A call to the SetLoggingLevel method with a value of LogEventLevel.Error sets the minimum logging level to Error."
  },
  "articles/RealTimeProtocol.html": {
    "href": "articles/RealTimeProtocol.html",
    "title": "Introduction",
    "keywords": "Introduction"
  },
  "articles/SessionDescriptionProtocol.html": {
    "href": "articles/SessionDescriptionProtocol.html",
    "title": "Introduction",
    "keywords": "Introduction The Session Description Protocol (SDP) is used in SIP applications for negotiating media sessions for multimedia calls. RFC 8866 describes the SDP. The SipLib.Sdp namespace provides classes for working with the Session Description Protocol. The Sdp class represents a complete SDP media session. The Sdp class provides methods and properties for setting up parameters that describe the entire session. Each media stream or media type (audio, video, text, etc.) is represented by media description block within the SDP. The MediaDescription class provides methods and properties for creating a media description and setting up prameters that describe the media stream. SIP clients and servers negotiate media sessions according to the offer/answer model described in RFC 3264. When a client wants to start a media session, it contructs an SDP text block that describes the session capabilities and the media capabilities that it can support. It then attaches the SDP text block to the body of a SIP INVITE request message and sends the INVITE request to a SIP server. The SIP server receives the SIP INVITE request and extracts the SDP text block and parses it. The server then builds its own SDP text block that describes the media session and media streams tha it is willing to accept. It then sends this SDP text block to the client in the body of a SIP 200 OK response. The client and the server then setup their media streams and start sending media back and forth. This article shows how to use the classes in the SipLib.Sdp namespace to build and parse SDP data in order to support multimedia applications containing audio, text and video media. Building an SDP Offer A client builds an SDP parameter block by performing the following steps. Create an Sdp object by using a constructor of the Sdp class. Set the session level parameters by using the properties of the Sdp class. Construct a MediaDescription object for each media type that it wishes to support for the session using one of the constructors of the MediaDescription class. Set the parameters of the media using the properties of the MediaDescription class. Add each MediaDescription object to the list of media of the Sdp object by calling the Sdp.Media.Add() method. Convert the Sdp object to a string by calling the Sdp.ToString() method of the Sdp class. Attach the SDP text block an INVITE SIPRequest object and send it to the server. The client can use the SipBodyBuilder class to do this. See Building SIP Message Bodies. The following code sample shows how to create a simple Sdp object that offers G.711 Mu-Law audio. private Sdp BuildAudioSdp(IPAddress iPAddress, int Port, string UaName) { Sdp AudioSdp = new Sdp(iPAddress, UaName); MediaDescription AudSmd = new MediaDescription(); AudSmd.MediaType = \"audio\"; AudSmd.Port = Port; AudSmd.Transport = \"RTP/AVP\"; AudSmd.PayloadTypes = new List<int>() { 0, 101 }; AudSmd.Attributes.Add(new SdpAttribute(\"fmtp\", \"101 0-15\")); AudSmd.RtpMapAttributes.Add(new RtpMapAttribute(0, \"PCMU\", 8000)); AudSmd.RtpMapAttributes.Add(new RtpMapAttribute(101, \"telephone-event\", 8000)); // Add the media description to the Sdp's Media list AudioSdp.Media.Add(AudSmd); return AudioSdp; } The iPAddress parameter is the IP address (IPv4 or IPv6) that the client wants to receive audio samples at and will be sending audio samples from. The Port parameter is the destination and source UDP port number. The UaName parameter is a user provided name that will be used to identify the SDP session. If you call the above function with Sdp sdp = BuildAudioSdp(IPAddress.Parse(\"192.168.1.100\"), 7000, \"MySession\"); and then call sdp.ToString() the resulting SDP string will be: v=0 o=MySession 7324305794702971685 1 IN IP4 192.168.1.100 s=MySession_2130495306 c=IN IP4 192.168.1.100 t=0 0 m=audio 7000 RTP/AVP 0 101 a=rtpmap:0 PCMU/8000 a=rtpmap:101 telephone-event/8000 a=fmtp:101 0-15 Helper Functions for Build SDP Offers The SdpUtils class contains helper functions that can be used to simplify the process of building an SDP offer. For example, the code in the code sample shown in the previous section could be replaced with the following code. Sdp sdp = SdpUtils.BuildSimpleAudioSdp(IPAddress.Parse(\"192.168.1.100\"), 7000, \"MySession\"); The SdpUtils class provides the following static functions for creating audio, Real Time Text (RTT) and video MediaDescription objects to assist in building an SDP offer. Function Name Description CreateAudioMediaDescription() Creates a basic MediaDescription object for offerring G.711 Mu-Law audio media. The MediaDescription also includes an offer of telephone-event. CreateRttMediaDescription() Creates a basic MediaDescription object for offering Real Time Text (RTT, see RFC 4103) media. CreateVideoMediaDescription() Builds a basic MediaDescription object for offering H.264 video using the Basic Level 1 video profile. CreateMsrpMediaDescription() Creates a basic MediaDescription object for offering Message Session Relay Protocol (MSRP, see RFC 4975). The following code sample shows how to use the above functions to add another media type to the SDP offer. Sdp sdp = SdpUtils.BuildSimpleAudioSdp(IPAddress.Parse(\"192.168.1.100\"), 7000, \"MySession\"); MediaDescription rttMd = SdpUtils.CreateRttMediaDescription(8000); sdp.Media.Add(rttMd); Modifying MediaDescription Objects Created With the Helper Functions Adding Media Types It is easy to modify a MediaDescription object that was created with one of the SdpUtils helper functions. For instance, the following code sample shows how to A-Law audio to a MediaDescription CreateAudioMediaDescription() function. MediaDescription audioMd = SdpUtils.CreateAudioMediaDescription(7000); audioMd.PayloadTypes.Add(8); audioMd.RtpMapAttributes.Add(new RtpMapAttribute(8, \"PCMA\", 8000)); string strMd = audioMd.ToString(); The above code produces the following media description text block. m=audio 7000 RTP/AVP 0 101 8 a=rtpmap:0 PCMU/8000 a=rtpmap:101 telephone-event/8000 a=rtpmap:8 PCMA/8000 a=fmtp:101 0-15 Media Level Connection Information There are situations where it is necessary to have the connection information for a media type be different from the connection information of the entire sessions. The following code shows how to do this. Sdp sdp = SdpUtils.BuildSimpleAudioSdp(IPAddress.Parse(\"192.168.1.100\"), 7000, \"MySession\"); sdp.Media[0].ConnectionData = new ConnectionData(IPAddress.Parse(\"192.168.200\")); string strSdp = sdp.ToString(); The above code produces the following SDP text block. v=0 o=MySession 6272624327141496333 1 IN IP4 192.168.1.100 s=MySession_289783837 c=IN IP4 192.168.1.100 t=0 0 m=audio 7000 RTP/AVP 0 101 c=IN IP4 192.168.0.200 a=rtpmap:0 PCMU/8000 a=rtpmap:101 telephone-event/8000 a=fmtp:101 0-15 Adding Encryption to the Offer The SipLib class library supports media encryption for all media types that use the Real Time Protocol (RTP). This library supports two ways to negotiate encryption keys. With the Security Descriptor/Secure Real Time Protocol (SDES-SRTP), encryptions keys are negotiated using attributes in the negotiated media descriptions. With Datagram Transport Layer Security/Secure Real Time Protocol (DTLS-SRTP) security keys are negotiated using the DTLS algorithm. SDES-SRTP and DTLS-SRTP operate over UDP/RTP and may not be used for Message Session Relay Protocol (MSRP, see RFC 4975) media because MSRP operates over TCP. Use the Transport Layer Security (TLS) transport mechanism for MSRP if encryption is required as described in Encryption for MSRP, below. SDES-SRTP and DTLS-SRTP use the SRTP algorithm described in RFC 3711 and RFC 6811. Only one of these encryption methods should be offered for a MediaDescription. SDES/SRTP Encryption The AddSdesSrtpEncryption() static method of the SdpUtils class can be used to configure a MediaDescription for audio, RTT or video for SDES-SRTP. The declaration of this method is as follows. public static void AddSdesSrtpEncryption(MediaDescription mediaDescription); This method adds an offer of the following crypto-suites. AES_256_CM_HMAC_SHA1_80 (RFC 6188) AES_CM_128_HMAC_SHA1_80 (RFC 3711, RFC 4568) DTLS/SRTP Encryption The AddDtlsSrtpEncryption() static method of the SdpUtils class can be used to configure a MediaDescription for audio, RTT or video for DTLS-SRTP. The declaration of this method is as follows. public static void AddDtlsSrtp(MediaDescription mediaDescription, string fingerPrintAttribute); The fingerPrintAttribute parameter is the fingerprint of the X.509 certificate that the client will use for the DTLS handshake. If you are using the RtpChannel class for all RTP media, then it automatically creates a self-signed X.509 certificate. You can use the RtpChannel.CertificateFingerprint static property to get the correct value for the fingerPringAttribute parameter. Encryption for MSRP The SDES-SRTP and DTLS-SRTP encryption methods cannot be used for MSRP because MSRP operates over TCP and not UDP/RTP. The CreateMsrpMediaDescription() method of the SdpUtils class can be used to media descriptions for un-encrypted or encrypted MSRP media offers. The declaration of this method is as follows. public static MediaDescription CreateMsrpMediaDescription(IPAddress ipAddress, int Port, bool UseTls, SetupType setupType = SetupType.active, X509Certificate2? localCert = null); To use TLS, set the UseTls parameter to true as shown below. MediaDescription msrpMd = SdpUtils.CreateMsrpMediaDescription(IPAddress. Parse(\"192.168.1.100\"), 5000, true, SetupType.active); string strMd = msrpMd.ToString(); The above code sample will produce the following media description text block. m=message 5000 TCP/TLS/MSRP * a=accept-types:message/cpim text/plain a=setup:active a=path:msrps//192.168.1.100:5000/2683pldqnv;tcp Building an SDP Answer When a SIP server receives an INVITE request containing an offered SDP text block, it must parse offered SDP text block and build an SDP to send as an answer to the offered SDP. The contents of the SDP answer can depend on many factors such as: What media types is the application willing to accept (audio, video. MSRP, RTT)? What IP address is the SIP server going to use for receiving media? What audio codecs is the application willing to use? What video codecs is the application willing to use? What port numbers are available for the application to use for each media type? Given the answers to the above questions and the offered SDP the application can then build an SDP answer, but the logic to accomplish is somewhat complicated. The the Sdp.BuildAnswerSdp() static method provide a fairly simple way to build an SDP answer. The declaration of the Sdp.BuildAnswerSdp() method is: public static Sdp BuildAnswerSdp(Sdp OfferedSdp, IPAddress address, SdpAnswerSettings AnswerSettings) The OfferedSdp parameter is the SDP that was received in an INVITE request. The address parameter is the IP address (IPv4 or IPv6) that the application wishes to use for receiving and sending media. This function sets the IP address in a c= parameter at the session level when it builds the answer SDP. This behavior can be overridden as described in Media Level Connection Information above. The SdpAnswerSettings class contains various properties that specify how to answer an offered SDP. The application can construct an instance of this class and modify the properties according to how it wants to handle media. It then uses the instance of the SdpAnswerSetting class each time it needs to answer a call. The declaration of the constructor of this class is: public SdpAnswerSettings(List<string> AudioCodecs, List<string> VideoCodecs, string userName, string fingerprint, MediaPortManager portManager) The following code sample shows how to construct an SdpAnswerSettings object with some commonly used settings. SdpAnswerSettings Sas = new SdpAnswerSettings(new List<string> { \"PCMU\", \"PCMA\" }, new List<string> { \"H264\" }, \"MySession\", RtpChannel.CertificateFingerprint, new MediaPortManager(new MediaPortSettings())); The BuildAnswerSdp() method uses a MediaPortManager class object to assign unique UDP ports for each media type for each call. The reason for this is to easily allow a server to handle media for multiple calls simultaneously. The MediaPortManager class increments the port number by 2 for audio, video and RTT media to allow the application to use the RTCP on odd port numbers. The MediaPortManager class increments the port number by 1 for MSRP because RTCP is not used for MSRP media. The default constructor of the MediaPortSettings class assigns the port settings for the different types of media as follows. Media Type Starting Port Port Count audio 6000 1000 video 7000 1000 text (RTT) 8000 1000 message (MSRP) 9000 1000 The application can alter the port ranges for each media type by using the properties of the MediaPortSettings class. RFC 8866 Support Level Session Level Parameters SDP Parameter Required? Sdp Property Name Type Description v Yes Version int Version of the SDP protocol. Defaults to 0. This cannot be changed o Yes Origin Origin Originator and session identifier. The constructor of the Sdp class initializes this property. s Yes SessionName string Session Name. The constructor of the Sdp class initializes this property to a unique value. i No SessionInformation string Session Information. Optional, not generally used. u No Uri string URI of the session description. Optional. e No Email string E-mail address. Optional. p No PhoneNumber string Phone Number. Optional. c No ConnectionData ConnectionData Connection information. Required if not provided in all of the media description blocks, otherwise required. b No Bandwidth string Bandwidth information for the session. Optional. k No Obsolete -- not supported t Yes Timing string Timing information. The Sdp class sets this field to a default value to \"0 0\". For the applications that the SipLib class library is intended for there is generally no reason to change the value of this field. r No Repeat times. Not supported by the Sdp class z No Time zone adjustment information. Not supported by the Sdp class a No Attributes List of SdpAttribute objects Session level attributes. The Sdp class initializes this field to an empty generic list of type SdpAttribute m Yes Media List of MediaDescription objects Media description blocks. The Sdp class initializes this field to an empty generic list of type MediaDescription. Media Level Parameters Parameter Required? MediaDescription Field Name Type Description i No Media Title. Not supported by the MediaDescription class. c No ConnectionData ConnectionData Connection information. Not required if provided at the session level. b No Bandwidth string Bandwidth information for the media type. a No Attributes List of SdpAttribute objects Media level attributes. The MediaDescription class initializes this field to an empty generic list of type SdpAttribute k No Obsolete -- not supported a No Attributes List of SdpAttribute objects Media level attributes. The MediaDescription class initializes this field to an empty generic list of type SdpAttribute"
  },
  "articles/SipChannelClasses.html": {
    "href": "articles/SipChannelClasses.html",
    "title": "Introduction",
    "keywords": "Introduction The SIPChannel class is the base class for all classes that manage low-level SIP connections and basic SIP message transport for sending and receiving SIP messages. This class library provides the following classes derived from the SIPChannel class. The SIPChannel class is abstract and is therefore never used directly. Class Transport Protocol Description SIPUDPChannel UDP Provides functions for sending and receiving SIP messages using the User Datagram Protocol (UDP). SIPTCPChannel TCP Provides functions for sending and receiving SIP messages using the Transport Control Protocol (TCP). Manages persistent TCP connections to multiple remote endpoints. SIPTLSChannel TLS Provides functions for sending and receiving SIP messages using the Transport Layer Security (TLS) protocol. Manages persistent TLS connections to multiple remote endpoints. Supports mutual client certificate authentication. Supports TLS v1.3 if the network stack of the operating system does. Each of these classes provides the following functionality. The ability to send SIP messages as strings or bytes to a remote endpoint Notifies the class user when a complete SIP message is received via an event Differentiated Services (DiffServ) packet marking for network based Quality of Service control Operation using IPv4 or IPv6 Client and server operation (SIPTCPChannel and SIPTLSChannel only) The SIPChannel derived classes are fairly low-level in that they do not manage SIP transactions and SIP dialogs. Applications normally create a SIPChannel derived class and pass that object to a SipTransport object. The SipTransport class provides methods for sending and receiving SIP messages as well as SIP message transaction management. See the article entitled SIP Message Transport and Transaction Management Local End Point Requirements Each instance of a SIPChannel derived class binds to a specific local IP endpoint. The IP address of the local IP endpoint may be an IPv4 or an IPv6 address. The IPAddress component of the local IP endpoint must be a specific address, it may not be a general network address such as IPAddress.Any or IPAddress.IPv6Any (0.0.0.0 or 0:0:0:0:0:0:0:0) The local endpoint is passed as an IPEndPoint object in the constructor of each SIPChannel derived class. For each combination of IP network type (IPv4, IPv6) and protocol type (UDP, TCP, TLS) each instance of a SIPChannel derived class must have a unique IP address and port combination. The port number must be non-zero and must be a port that is not currently in use by the operating system, another application or service. Connection Management The SIPTCPChannel and SIPTLSCnannel classes maintain a list of persistent connections. Connections are represented by the SIPConnection class. Each SIPConnection object is used by the channel class for sending and receiving SIP message to a unique IP endpoint. Each instance of the SIPTCPChannel and SIPTLSChannel classes maintains a dictionary of up to 1000 connections. Each connection is uniquely identified by the string version of the remote IP endpoint (for excample: \"192.168.1.200:5060\"). Connections may be either initiated by a remote client or by the SIP channel class. When the application calls the Send() method of a SIP channel class, the SIP channel class checks its dictionary of connections to see if an available SIPConnection object is available to send the SIP message. If an open connection is available, then the SIP channel class uses that SIPConnection to send the message. If a connection is not available yet, then the SIP channel class establishes a TCP or TLS connection to the remote endpoint, then sends the SIP message. Connections are maintained by each SIP channel class until one of the followng events occur. The connection is closed by the remote endpoint. The channel class fires an event called SIPConnectionDisconnected if this occurs. The connection is closed by the SIP channel class The SIP channel class detects an abnormal disconnect event. The channel class fires an event called SIPConnectionDisconnected if this occurs. The SIP channel class closes the connection due to lack of SIP message activity. Each SIP channel class closes all active connections when the Close() method is called. The SIP message inactivity interval is set in the software to 180 minutes. If no SIP messages are sent or received over a persistent SIP connection for longer than this interval, then the SIP channel class will automatically close the connection to that remote endpoint. The purpose of this inactivity timer is to automatically clean stale or inactive connections that may occur under unusual connection failure conditions. Applications an avoid automatic connection closures by periodically sendint SIP OPTIONS messages to all remote endpoints. The number of TCP or TLS connections does not limit the number of SIP calls that an application can handled because each connection can handle multiple SIP calls simultaneously. Connection Security Features The SIPChannel derived classes allow applications to implement security based on user defined access control lists and in the class of TLS channels, applications may implement mutual authentication using X.509 certificates. Connection Based Access Control (UDP, TCP, TLS) SIPUDPChannel, SIPTCPChannel and SIPTLSChannel support user defined access control via a delegate method called AcceptConnection. The following shows the delegate type for the AcceptConnection callback function. public delegate bool AcceptConnectionDelegate(SIPProtocolsEnum protocol, IPEndPoint remoteEndPoint); If the implemented AcceptConnectionDelegate returns false then the SIPChannel derived class will reject the connection request, else it will accept the connection request. SIPUDPChannel operates over UDP, which is a connectionless transport, so SIPUDPChannel calls the AcceptConnection delegate for every UDP packet that it receives. Perform the following steps to use connection control for a SIP channel class. Implement a AcceptConnectionDelegate in your call controller class or in another appropriate place in the application. Create an instance of a SIPChannel derived class. Pass the AcceptionConnection in the constructor of the SIPChannel derived class. The AcceptionConnection callback parameter of the SIPChannel derived classes defaults to null so the default operation is to accept all connections. An application can use the SIP protocol type and the IPEndPoint of the remote endpoint point to decide whether or not to accept the connection request. Applications are also free to implement a different AcceptConnectionDelegate method for each SIP channel object in the event that there are multiple SIP channels being used. Certificate Based Access Control (TLS) The SIPTLSChannel class allows the class user (the application) to perform custom mutual authentication based on client and server X.509 certificates. Certificate based mutual authentication is controlled by the following three constructor parameters of the SIPTLSChannel class. The UseMutualAuth parameter of the class's constructor. This parameter defaults to true. The acceptClientCertificate callback parameter. The acceptServerCertificate callback parameter. If the UseMutualAuth constructor parameter is true, then the SIPTLSChannel class will only allow connection requests from clients that provide an X.509 certificate during the TLS connection handshake process. The SIPTLSChannel class will also provide its X.509 certificate during the TLS handshake process when it is connecting as a client. If the UseMutualAuth constructor parameter is false, then the SIPTLSChannel class will allow clients to connect even if they don't provide an X.509 certificate. Also, the SIPTLSChannel class will not provided its X.509 certificate when connecting as a client. The delegate type for the acceptClientCertificate and the acceptServerCertificate callback parameters is a AcceptCertificateDelegate as shown below. public delegate bool AcceptCertificateDelegate(X509Certificate? certificate, X509Chain? chain, SslPolicyErrors? sslPolicyErrors); If the acceptClientCertificate callback parameter is null then the SIPTLSChannel class will accept all client connection requests. If the acceptClientCertificate callback parameter is not null and returns true then the SIPTLSChannel class will accept the client's connection request. If this callback function returns false then the SIPTLSChannel will refuse the client's connection request. If the acceptServerCertificate callback parameter is null then the SIPTLSChannel class will allow connections to a server regardless of the server's certificate. If the acceptServerCertificate callback parameter is not null and returns true then the SIPTLSChannel class will allow the connection to the server. If this function returns false then the SIPTLSChannel class will clock the connection to the server. Maximum SIP Message Sizes The maximum SIP message that can be sent via UDP using the SIPUDPChannel class is 65547 (65535 minus 8 bytes for the UDP header and 20 bytes for the IP header). An attempt to send a message longer this limit will result in an ArgumentException. TCP and TLS are stream protocols. Ths maximum SIP message that may be sent using the SIPTCPChannel and SIPTLSChannel classes is 200,000 bytes in length. This is set within the software. Quality of Service (QOS) and DSCP Each SIPChannel derived class sets the Differentiated Services Code Point (DSCP) for IPv4 and IPv6 to a value of 0x03 for SIP signaling. Each IP packet that is sent is marked with this DSCP value. This applies to both Windows and Linux platforms. Section 2.7 of the document entitled \"National Emergency Number Association's (NENA) Standard for NG9-1-1\" specifies the default DSCP value of 0x03. See NENA-STA-010.3b. For SIPTCPChannel and SIPTLSChannel, the DSCP is set for each client or server connection. For SIPUDPChannel, the DSCP is sent for the UdpClient object that is used for sending SIP packets."
  },
  "articles/SipTransportManagement.html": {
    "href": "articles/SipTransportManagement.html",
    "title": "SIP Message Transport and Transaction Management",
    "keywords": "SIP Message Transport and Transaction Management The SipTransport class can be used to manage User Agent Server (UAS) and User Agent Client (UAC) SIP transactions. Each instance of a SipTransport class can manage SIP transactions over a single SIP channel. It is possible to handle SIP transactions over multiple SIP channels by creating multiple SipTransport objects, one for each individual SIP channel. Perform the following steps to use the SipTransport class. Create an instance of a SIPChannel derived class. Create an instance of the SipTransport class by passing the reference to the SIPChannel derived object in the constructor of the SipTransport class. Hook the events of the SipTransport object. Call the Start() method of the SipTransport object. The user of a SipTransport object should store a reference to the object. When the user of a SipTransport object has no further need for it, it should perform the following steps. Unhook the events (optional if the SipTransport object is shut down when the application is shutting down) Call the Shutdown() method of the SipTransport object. The following code snippet shows how to create and use the SipTransport class. class CallManager { private SIPTCPChannel m_TcpChannel; private SipTransport m_SipTransport; public CallManager { // Create a SIPChannel derived object that binds to a local address and port // for processing SIP messages IPAddress localAddress = IPAddress.Parse(\"192.168.1.101\"); IPEndPoint localEndpoint = new IPEndPoint(localAddress, 5060); m_TcpChannel = new SIPTCPChannel(localEndpoint, \"SomeUserName\"); m_SipTransport = new SipTransport(m_TcpChannel); m_SipTransport.SipRequestReceived += OnSipRequestReceived; m_SipTransport.SipResponseReceived += OnSipResponseReceived; m_SipTransport.Start(); } void OnSipRequestReceived(SIPRequest sipRequest, SIPEndPoint remoteEndPoint, SipTransport sipTransport) { // Do something to handle the SIP request message } void OnSipResponseReceived(SIPResponse sipResponse, SIPEndPoint remoteEndPoint, SipTransport sipTransport) { // So something to handle the SIP response message } // This method shoud be called when the application is shutting down. public void Shutdown() { m_SipTransport.SipRequestReceived += OnSipRequestReceived; m_SipTransport.SipResponseReceived += OnSipResponseReceived; // Releases all network related resources m_SipTransport.Shutdown(); } } Applications that need to handle SIP messages from multiple network transport protocols (UDP, TCP, TLS) or multiple local endpoints can do so by creating a SIPChannel derived object for each protocol or local endpoint and then create a SipTransport object for each SIPChannel. The event handler functions may be shared among multiple SipTransport objects. Handling SipTransport Events The the SipTransport class provides the following events. Event Name Description SipRequestReceived Fired when a SIP request message is received. This event is not fired if a SIP request processed by the transaction manager. SipResponseReceived Fired when a SIP response message is received. This event is not fired if the SIP response message is handled as part of a SIP transaction. LogSipRequest Fired for every SIP request message that is sent or received by the SipTransport object. For received requests, this event is fired after the request message is sent to the transaction object or the SipTransport user. The purpose of this event is to allow an application to log all SIP request messages. The event handler for this event must do nothing to process the SIPRequest object passed to it by this event. LogSipResponse Fired for every SIP response message that is sent or received by the SipTransport object. For received response messages, this event is fired after the message is sent to the transaction manager or the SipTransport user. The purpose of this event is to allow an application to log all SIP response messages. The event handler for this event must do nothing to process the SIPResponse object that is passed to it by this event. LogInvalidMessage Fired if the SipTransport object receives an invalid SIP message. The event handler functions are called asynchronously from a thread context that is managed by the SipTransport class so the event handler functions are responsible for managing synchronization of objects that are shared by different thread contexts. Handling SIP Requests The SipRequestReceived event is fired by the SipTransport class when a new SIP request message is received. The following code sample provides an example of how to handle this event. class CallManager { void OnSipRequestReceived(SIPRequest sipRequest, SIPEndPoint remoteEndPoint, SipTransport sipTransport) { switch (sipRequest.Method) { case SIPMethodsEnum.INVITE: ProcessInviteRequest(sipRequest, remoteEndPoint, sipTransport); break; case SIPMethodsEnum.BYE: ProcessByeRequest(sipRequest, remoteEndPoint, sipTransport); break; case SIPMethodsEnum.ACK: // Normally, no action is necessary unless the ACK message is for an // 200 OK response to an offer-less INVITE request break; case SIPMethodsEnum.CANCEL: ProcessCancelRequest(sipRequest, remoteEndPoint, sipTransport); break; case SIPMethodsEnum.OPTIONS: ProcessSipOptionsRequest(sipRequest, remoteEndPoint, sipTransport); break; case SIPMethodsEnum.INFO: MethdNotAllowedTransaction(sipRequest, remoteEndPoint, sipTransport); break; case SIPMethodsEnum.NOTIFY: MethdNotAllowedTransaction(sipRequest, remoteEndPoint, sipTransport); break; case SIPMethodsEnum.SUBSCRIBE: MethdNotAllowedTransaction(sipRequest, remoteEndPoint, sipTransport); break; case SIPMethodsEnum.PUBLISH: SendMethdNotAllowed(sipRequest, remoteEndPoint, sipTransport); break; case SIPMethodsEnum.REFER: SendMethdNotAllowed(sipRequest, remoteEndPoint, sipTransport); break; case SIPMethodsEnum.MESSAGE: MethdNotAllowedTransaction(sipRequest, remoteEndPoint, sipTransport); break; case SIPMethodsEnum.UPDATE: // Not used for incoming calls. SendMethdNotAllowed(sipRequest, remoteEndPoint, sipTransport); break; case SIPMethodsEnum.REGISTER: SendMethdNotAllowed(sipRequest, remoteEndPoint, sipTransport); break; } } // This method shows how the user agent server can send a simple response to the // client without using a server non-INVITE transaction private void SendMethodNotAllowed(SIPRequest sipRequest, SIPEndPoint remoteEndPoint, SipTransport sipTransport) { SIPResponse Response = SipUtils.BuildResponse(sipRequest, SIPResponseStatusCodesEnum.MethodNotAllowed, \"Not Allowed\", sipTransport.SipChannel, UserName); sipTransport.SendSipResponse(Response, remoteEndPoint); } // This method shows how the user agent server can send a simple response to the // client using a server non-INVITE transaction private void MethodNotAllowedTransaction(SIPRequest sipRequest, SIPEndPoint remoteEndPoint, SipTransport sipTransport) { SIPResponse Response = SipUtils.BuildResponse(sipRequest, SIPResponseStatusCodesEnum.MethodNotAllowed, \"Not Allowed\", sipTransport.SipChannel, UserName); sipTransport.ServerNonInviteTransaction(sipRequest, remoteEndPoint, null, Response); } } Logging SIP Messages If there is a need for an application to log all of the SIP messages that it sends and receives, the SipTransport class provides two events that it fires when it sends a SIP message or receives a SIP message. The application can use the information provided by these events for debug logging or NG9-1-1 SIP message logging. The SipTransport class fires the LogSipRequest event when it sends or receives a SIP request message. The delegate type for the LogSipRequest is as follows. public delegate void LogSipRequestDelegate(SIPRequest sipRequest, IPEndPoint remoteEndPoint, bool Sent, SipTransport sipTransport); If the Sent parameter is true, then the remoteEndPoint parameter is the IP endpoint that the SipTransport object sent the request to. If Sent is false, then the remoteEndPoint parameter is the IP endpoint that the SipTransport object received the request from The SipTransport class fires the LogSipResponse event when it sends or receives a SIP response message. The delegate type for the LogSipResponse event is as follows. public delegate void LogSipResponseDelegate(SIPResponse sipResponse, IPEndPoint remoteEndPoint, bool Sent, SipTransport sipTransport); If the Sent parameter is true, then the remoteEndPoint is the IP endpoint that the SipTransport object sent the response message to. If the Sent parameter is false, then the remoteEndPoint parameter is the IP endpoint that the SipTransport object received the response message from. The sipTransport parameter is the SipTransport object that fired the event. An application can use the SipChannel property of the SipTransport object to get information about the SIP channel that was used to send or receive the event. Applications must not use any methods of SipTransport class in the event handler for the LogSipRequest and LogSipResponse events. Applications may only use the following properties and methods of the SipChannel property of the SipTransport object. SIPChannelContactURI -- Gets the SIPURI that can be used for contacting the SIPChannel SIPChannelEndPoint -- Gets the local SIPEndPoint for the SIP channel GetProtocol() -- Gets the transport protocol used for this channel as a SIPProtocolsEnum value. GetRemoteCertificate() and GetRemoteCertificate2() to get the X.509 certificate of the remote endpoint if the SIPChannel is using TLS. Applications should only use these events for logging purposes and must not infer anything about the signaling state of a transaction or a call. SipTransport Class Transaction Handling The SipTransport class provides a SIP transaction manager function that manages the following four types of SIP transactions as defined in RFC 3261. Client non-INVITE transaction Client INVITE transaction Server non-INVITE transaction Server INVITE transaction The SipTransport class provides the following methods for starting SIP transactions. Method Name Description StartClientNonInviteTransaction Creates and starts a client-side non-INVITE transaction. Returns a ClientNonInviteTransaction object that implements the logic specified in Section 17.1.2 of RFC 3261. StartClientInvite Creates and starts a client-side transaction for sending an INVITE request. This method returns a ClientInviteTransaction object that implements the logic specified in Section 17.1.1 of RFC 3261. This method sends an INVITE request and returns a ClientInviteTransaction object immediately. It does not wait for a response. The caller can provide a delegate function that gets called when the INVITE transaction is completed. StartClientInviteAsync Creates and starts a client-side transaction for sending an INVITE request. This method returns an awaitable Task that returns an ClientInviteTransaction object. This object implements the logic specified in Section 17.1.1 of RFC 3261. StartServerNonInviteTransaction Creates and starts a server-side non-INVITE transaction. This method returns a ServerNonInviteTransaction object that implements the logic specified in Section 17.2.2 of RFC 3261. StartServerInviteTransaction Creates and starts a server-side INVITE transaction. This method returns a ServerInviteTransaction object that implements the logic specified in Section 17.2.1 of RFC 3261. This method takes a SIPResponse that can be either an provisional response or a final response. It also takes a delegate function that is called when the transaction is completed. The delegate function may be null if notification of the transaction completion is not required. Transaction users have three options for receiving notification that a transaction is completed. These options are available for client and server transactions. Provide a callback delegate that is called by the SipTransport object (the transaction manager) Asynchronously await completion of the transaction Don't wait for transaction completion (fire and forget) Each method of the SipTransport class that starts a SIP transaction takes a callback delegate parameter. The delegate type is called SipTransactionCompleteDelegate. The callback name for each method is completeDelegate. public delegate void SipTransactionCompleteDelegate(SIPRequest sipRequest, SIPResponse? sipResponse, IPEndPoint remoteEndPoint, SipTransport sipTransport, SipTransactionBase Transaction); The sipRequest parameter is the SIPRequest message that was sent to start the transaction and the sipResponse parameter is the SIPResponse object that was received if the transaction completed normally. If the completeDelegate parameter is non-null in a SipTransport method that starts a transaction, then the SipTransport transaction manager will call the method when a final SIP response (status code >= 200) is received or a transaction timeout occurs. The user's callback funcition can check the TerminationReason property of the Transaction parameter to determine the reason that the transaction terminated. If the value of the TerminationReason property is OkReceived or FinalResponseReceived, then the sipResponse parameter will contain the response that was received. Alternatively, the user's callback function can check to see if the sipResponse parameter of the callback is null or not. If it is not null then the transaction completed normally. If the transaction user does not wish to receive a callback notification when a transaction completes or is terminated then it can asynchronously await completion of the transaction. Each method of the SipTransport class that starts a transaction returns an object derived from the SipTransactionBase class. The SipTransactionBase class contains a method called WaitForCompletionAsync() that the transaction user can asynchronously wait on. If this method is used then the transacton user must set the completeDelegate parameter to null in the call to the SipTransport method used to start the transaction. To fire and forget a transaction, the transaction user must set the completeDelegate parameter to null in the call to the SipTransport method used to start the transaction and must not await for completion of the transaction. Client Non-INVITE Transactions A client non-INVITE transaction is a SIP transaction for any SIP request except an INVITE request. In a client non-INVITE transaction, the client builds a SIP request and starts a SIP transaction by calling the StartClientNonInviteTransaction() method of a SipTransport object. The SipTranspor object sends the request message to a server and notifies the client when the transaction is completed doe to receipt of a final response or if the transaction times out. The declaration of the StartClientNonInviteTransaction is: public ClientNonInviteTransaction StartClientNonInviteTransaction(SIPRequest request, IPEndPoint remoteEndPoint, SipTransactionCompleteDelegate completeDelegate, int FinalResponseTimeoutMs) The request parameter is the SIP request that will be sent to the IP endpoint specified by the remoteEndPoint parameter. The completeDelegate is the callback method that will be called when the client transaction has been completed or terminated due to a failure. If the completeDelegate parameter is null, then the caller can asynchronously await completion of the transaction by calling the WaitForCompletionAsync() method of the ClientNonInviteTransaction object that this method returns. The FinalResponseTimeoutMs parameter specifies the length of time in milliseconds that the transaction manager will wait for a final response to be received or for a timeout to occur. This timer interval corresponds to Timer F described in RFC 3261. The default value is 64 times the default value of the SIP T1 timer (which is 500 ms), or 32 seconds. In many cases, this timeout value may be too long. If the application implementor understands the characteristics of the network and the expected performance of the SIP servers within the network, then this parameter may be set to a much lower value (for example, 500 ms). The following code sample shows how to call the StartClientNonInviteTransaction() method using a callback. private void SampleClientNonInvite(SipTransport sipTransport, SIPURI toUri, SIPURI fromUri) { SIPRequest OptionsReq = SIPRequest.CreateBasicRequest(SIPMethodsEnum.OPTIONS, toUri, toUri, null, fromUri, null); sipTransport.StartClientNonInviteTransaction(OptionsReq, toUri.ToSIPEndPoint()!. GetIPEndPoint(), OptionsCompleteCallback, 500); } private void OptionsCompleteCallback(SIPRequest sipRequest, SIPResponse? sipResponse, IPEndPoint remoteEndPoint, SipTransport sipTransport, SipTransactionBase Transaction) { if (sipResponse != null) { // The transaction completed normally. if (sipResponse.Status == SIPResponseStatusCodesEnum.Ok) { // Handle an 200 OK response } else { // Handle a different response } } else { // Check the reason that the transaction failed switch (Transaction.TerminationReason) { case TransactionTerminationReasonEnum.NoFinalResponseReceived: break; case TransactionTerminationReasonEnum.NoResponseReceived: break; case TransactionTerminationReasonEnum.ConnectionFailure: break; } } } The following code sample shows how to use the asynchronous await notification method. private async Task SampleClientNonInviteAsync(SipTransport sipTransport, SIPURI toUri, SIPURI fromUri) { SIPRequest OptionsReq = SIPRequest.CreateBasicRequest(SIPMethodsEnum.OPTIONS, toUri, toUri, null, fromUri, null); ClientNonInviteTransaction Cnit = sipTransport.StartClientNonInviteTransaction( OptionsReq, toUri.ToSIPEndPoint()!.GetIPEndPoint(), null, 500); // WaitForCompletionAsync() returns the same transaction object await Cnit.WaitForCompletionAsync(); if (Cnit.LastReceivedResponse != null) { // Do something with the response that was received } else { switch (Cnit.TerminationReason) { case TransactionTerminationReasonEnum.NoFinalResponseReceived: break; case TransactionTerminationReasonEnum.NoResponseReceived: break; case TransactionTerminationReasonEnum.ConnectionFailure: break; } } } Client INVITE Transactions A client sends an INVITE request to set up a call with a remote endpoint. The SipTransport class provides two methods that a client can use to start a client INVITE request transaction. public ClientInviteTransaction StartClientInvite(SIPRequest request, IPEndPoint remoteEndPoint, SipTransactionCompleteDelegate? completeDelegate, TransactionResponseReceivedDelegate? responseReceivedDelegate) public async Task<ClientInviteTransaction> StartClientInviteAsync(SIPRequest request, IPEndPoint remoteEndPoint, TransactionResponseReceivedDelegate? responseReceivedDelegate) The second method allows the caller to asynchronously await completion of the INVITE transaction. The request parameter must be an INVITE SIPRequest. The remoteEndPoint parameter specifies the IP endpoint to send the request to. The responseReceivedDelegate parameter is a callback method that the transaction manager will call when a provisional response is received. This method is not called for a 100 Trying response. The purpose of this callback is to notify the transaction user of a 180 Ringing or a 183 Session Progress response. This callback parameter may be null if notification of provisional responses is not required. See the TransactionResponseReceivedDelegate. There is no way for the transaction user to specify a timeout for the INVITE transaction. The reason for this is that the called party may take anywhere from several seconds to several minutes to answer the call. If the call is not rejected by the caller's user agent with a 3XX, 4XX, 5XX or a 6XX final response, then the INVITE transaction will continue until the called pary answers the call with a 200 OK or the calling user agent cancels the INVITE request by sending a CANCEL request. The following code sample shows how to use the StartClientInviteAsync() method to send an INVITE request. private async Task SampleClientInviteAsync(SIPRequest request, IPEndPoint remoteEndPoint, SipTransport sipTransport) { ClientInviteTransaction Cit = await sipTransport.StartClientInviteAsync(request, remoteEndPoint, OnResponseReceived); if (Cit.LastReceivedResponse != null) { if (Cit.LastReceivedResponse.Status == SIPResponseStatusCodesEnum.Ok) { // The call was answered, notify the user and set up the media channels } else { // The call was rejected so notify the user of the reason } } else { // The INVITE request transaction failed so figure out why and do something switch (Cit.TerminationReason) { case TransactionTerminationReasonEnum.NoResponseReceived: break; case TransactionTerminationReasonEnum.ConnectionFailure: break; } } } // Called when an interim response with a status code between 101 and 199 is received // by the transport manager. private void OnResponseReceived(SIPResponse Response, IPEndPoint RemoteEndPoint, SipTransactionBase Transaction) { // The Transaction.Request property will contain the INVITE request if needed if (Response.Status == SIPResponseStatusCodesEnum.Ringing) { // Notify the user that the call is ringing } else if (Response.Status == SIPResponseStatusCodesEnum.SessionProgress) { // Notify the user that the call is ringing and set up the media channels to // receive ring sound. } else { // Handle other interim responses if necessary } } Canceling an INVITE Request The only way for a client to terminate an INVITE request transaction is to build and send a SIP CANCEL message using a separate client non-INIVTE transaction. When the server receives the CANCEL request, it will respond to the CANCEL request with a 200 OK response, then it will terminate its the client INVITE transaction by responding with a 487 Request Terminated final response. This will cause the transport manager to terminate the client INVITE request. The easiest way for an application to cancel a client INVITE transaction is to hold onto a reference to the ClientInviteTransaction object (but only until the transacton has been completed or terminated) and to then call the CancelInvite() method of that object if the user wishes to cancel the call. The following code sample shows how to do this. private void StartClientInvite(SIPRequest request, IPEndPoint remoteEndPoint, SipTransport transport) { ClientInviteTransaction Cit = transport.StartClientInvite(request, remoteEndPoint, OnInviteComplete, null); // Give the server some time to send an interim response. Thread.Sleep(500); Cit.CancelInvite(); } private void OnInviteComplete(SIPRequest sipRequest, SIPResponse? sipResponse, IPEndPoint remoteEndPoint, SipTransport sipTransport, SipTransactionBase Transaction) { if (sipResponse != null) { if (sipResponse.Status == SIPResponseStatusCodesEnum.Ok) { // Unexpected because the server answered the call before it received the // CANCEL request. The call must be terminated by sending a BYE request. } else if (sipResponse.Status == SIPResponseStatusCodesEnum.RequestTerminated) { // This is the expected result } else { // Some other response was received -- unexpected } } else { switch (Transaction.TerminationReason) { case TransactionTerminationReasonEnum.NoResponseReceived: break; case TransactionTerminationReasonEnum.CancelRequestFailed: break; } } } Server Non-INVITE Transactions A server non-INVTE transaction is used by a SIP server to handle a SIP request that is not an INVITE request. The ServerNonInviteTransaction class handles this type of transaction. When an application receives a non-INVITE SIP request it can call the StartServerNonInviteTransaction() method of the SipTransport class to start (and usually complete) the transaction. The declaration of the StartServerNonInviteTransaction() method of the SipTransport class is as follows. public ServerNonInviteTransaction StartServerNonInviteTransaction(SIPRequest request, IPEndPoint remoteEndPoint, SipTransactionCompleteDelegate? completeDelegate, SIPResponse ResponseToSend); The request parameter is the SIPRequest object that was received by the server user agent. The remoteEndPoint is the IP endpoint that sent the request. The ResponseToSend is the SIPResponse to send back to the client. Server user agents will typically respond to non-INVITE requests by sending a final SIP response that will cause the transaction to be completed immediately. The completeDelegate parameter is a callback function that the SipTransport class will call when the transaction is completed. This parameter is optional and may be set to null if the server user agent does not need to be notified when the transaction is completed. The following code sample shows how to handle and complete a server non-INVITE transacton without being notified when the transaction is complete or waiting for completion. private void ProcessRequest(SIPRequest request, IPEndPoint remoteEndPoint, SipTransport sipTransport) { if (request.Method == SIPMethodsEnum.OPTIONS) { SIPResponse OkResponse = SipUtils.BuildResponse(request, SIPResponseStatusCodesEnum.Ok, \"OK\", sipTransport.SipChannel, null); // A 200 OK response will cause the transaction to be completed. Don't need to be // notified of success or failure in this case. sipTransport.StartServerNonInviteTransaction(request, remoteEndPoint, null, OkResponse); } else { // Process other types of requests. } } Server INVITE Transactions A server INVITE request is used by a SIP user agent server to handle an INVITE request. The ServerInviteTransaction class handles this type of transaction. When the user agent server receives an INVITE request it can call the StartServerInviteTransaction method of the SipTransport class to start the transaction. The declaration of this method is as follows. public ServerInviteTransaction StartServerInviteTransaction(SIPRequest request, IPEndPoint remoteEndPoint, SipTransactionCompleteDelegate? completeDelegate, SIPResponse ResponseToSend); The request parameter is the INVITE request from the client. The remoteEndPoint is the IP endpoint of the client that sent the request. The ResponseToSend is the response to immediately send to the client. This is typically an intermediate response such as 100 Trying, but may be a final response that will end the transaction. The complete delegate parameter is a callback function that the SipTransport class will call when the transaction is completed. This parameter is optional and may be set to null if the server user agent does not need to be notified when the transaction is completed. A server user agent may also asynchronously await the completion of the transaction by calling the WaitForCompletionAsync() method of the ServerInviteTransaction object. Server INVITE transactions are typically long lasting transactions because it may take several seconds or several minutes for a user to answer the call. For this reason, a server user agent will typically want to keep a reference to the ServerInviteTransaction object and use this object to send interim and final responses to the client. The server user agent can use the SendResponse() method of the ServerInviteTransaction for this purpose. The following code sample shows how to handle a server INVITE transaction using the callback notification method. private async Task ProcessRequest(SIPRequest request, IPEndPoint remoteIPEndPoint, SipTransport sipTransport) { if (request.Method == SIPMethodsEnum.INVITE) { SIPResponse trying = SipUtils.BuildResponse(request, SIPResponseStatusCodesEnum.Trying, \"Trying\", sipTransport.SipChannel, null); m_Sit = sipTransport.StartServerInviteTransaction(request, remoteIPEndPoint, OnServerInviteComplete, trying); // Simulate a delay await Task.Delay(100); SIPResponse ringing = SipUtils.BuildResponse(request, SIPResponseStatusCodesEnum.Ringing, \"Ringing\", sipTransport.SipChannel, null); m_Sit.SendResponse(ringing); // Simulate a delay await Task.Delay(5000); // TODO: Build a 200 OK response with a SDP message body to answer the call // and send it by calling m_Sit.SendResponse(). This will cause the transaction // manager to end the INVITE transaction and OnServerInviteComplete will be called. } else ProcessCancel(request, remoteIPEndPoint, sipTransport); } private void OnServerInviteComplete(SIPRequest request, SIPResponse? sipResponse, IPEndPoint remoteEndPoint, SipTransport sipTransport, SipTransactionBase transaction) { // TODO: shutdown any media channels that may have been setup if a 200 OK response // was sent. m_Sit = null; } Handling INVITE Cancel Requests The transaction manager does not process CANCEL requests for a server INVITE transaction. CANCEL requests are passed to the transaction user. The following code sample is a continuation of the previous sample and shows how to a server user agent should process a CANCEL request. private void ProcessCancel(SIPRequest request, IPEndPoint remoteIPEndPoint, SipTransport sipTransport) { if (request.Method != SIPMethodsEnum.CANCEL) return; if (m_Sit == null) return; string cancelTransactionId = SipTransactionBase.GetServerTransactionID(request); if (cancelTransactionId == m_Sit.TransactionID) { SIPResponse ok = SipUtils.BuildResponse(request, SIPResponseStatusCodesEnum.Ok, \"OK\", sipTransport.SipChannel, null); sipTransport.StartServerNonInviteTransaction(request, remoteIPEndPoint, null, ok); SIPResponse reqTerminated = SipUtils.BuildResponse(m_Sit.Request!, SIPResponseStatusCodesEnum.RequestTerminated, \"Request Terminated\", sipTransport.SipChannel, null); // Sending this final response will cause the transaction manager to complete the // server INVITE transaction. OnServerInviteComplete() will be called m_Sit.SendResponse(reqTerminated); } else { // Error: unknown transaction SIPResponse error = SipUtils.BuildResponse(request, SIPResponseStatusCodesEnum. CallLegTransactionDoesNotExist, \"Unknown Transaction ID\", sipTransport.SipChannel, null); // Starts and completes the CANCEL transaction sipTransport.StartServerNonInviteTransaction(request, remoteIPEndPoint, null, error); } }"
  },
  "articles/WorkingWithSipMessages.html": {
    "href": "articles/WorkingWithSipMessages.html",
    "title": "Introduction",
    "keywords": "Introduction The following table lists the key namespaces that relate to the processing of SIP messages. Namespace Description SipLib.Core Contains classes for building and processing SIP messages. SipLib.Body Contains classes for building and processing the body contents of a SIPRequest or a SIPResponse. The classes support simple message bodies or multipart/mixed message bodies. SipLib.Sdp Contains classes for the Session Description Protocol (SDP) SIP Messages The SIPMessage class is the base class for SIP requests and SIP responses. Applications do not work with the SIPMessage class directly. SIP Requests The SIPRequest class represents a SIP request message. The SIPRequest class consists of the following key components. Request line consisting of a request method and a request URI SIP message headers encapusulated in a field called Header which is of type SIPHeader An optional message body Applications typically receive a SIPRequest object as a parameter of an event handler of an event generated by a SipTransport or a SIPChannel derived object. The Method field of a SIPRequest object is of type SIPMethodsEnum and can be used to determine the type of request (INVITE, BYE, etc.). The URI field of a SIPRequest object is of type SIPURI and it contains the request URI from the request line. This field identifies the resource being requested by the sender of the SIPRequest message. The Header field is of type SIPHeader and contains objects for each SIP header of the request. The message body may be contained in the Body field of a SIPRequest. This field is a string. Applications can use the helper classes described in Received SIP Message Body Processing to parse and process the message body. The SIPRequest class has a static method called CreateBasicRequest() that can be used for building a SIPRequest. The declaration of this method is: public static SIPRequest CreateBasicRequest(SIPMethodsEnum Method, SIPURI reqUri, SIPURI ToSipUri, string? ToDisplayName, SIPURI FromSipUri, string? FromDisplayName) The CreateBasicRequest() method creates a new SIPRequest object with a request line and adds the following SIP headers. From To Via Contact Call-ID Max-Forwards (set to 70) Content-Length (set to 0) CSeq Applications can modify these headers and add new new headers. Applications can add a body to the SIPRequest message using the methods described in Building SIP Message Bodies. SIP Responses The SIPResponse class represents a SIP response message. The SIPResponse class consists of the following key components. A status line containing a response code and a response reason string SIP message headers encapusulated in a field called Header which is of type SIPHeader An optional message body Applications typically receive a SIPResponse object as a parameter of an event handler of an event generated by a SipTransport or a SIPChannel derived object. The Status field is of type SIPResponseStatusCodesEnum and the StatusCode field is the numeric representation of the Status enumeration. These fields should be used to determine the type of the response message. The Header field is of type SIPHeader and contains objects for each SIP header of the response. The message body may be contained in the Body field of a SIPResponse. This field is a string. Applications can use the helper classes described in Received SIP Message Body Processing to parse and process the message body. Applications build SIPResponse objects in response to SIPRequest message objects that they receive. They can do so by using the constructors of the SIPResponse class and fill in the status code, headers and body of the new SIPResponse object. The SipUtils class has a static helper method called BuildResponse() that can greatly simplify construction of new SIPResponse objects. The declaration of this method is: public static SIPResponse BuildResponse(SIPRequest Sr, SIPResponseStatusCodesEnum StatCode, string ReasonPhrase, SIPChannel sipChannel, string? SipUserName); This method returns a SIPResponse object that the application can send to the originator of a SIPRequest with the following header fields set. To From Via Record-Route CSeq Call-ID Contact Content-Length (set to 0) Max-Forwards Applications can add a body to the SIPResponse message using the methods described in Building SIP Message Bodies. SIP Message Bodies Both SIP requests and SIP responses may have a message body. Received SIP Message Body Processing The following discussion applies to SIP messages that have been received by an application. The HasBody() method of a SIPRequest or a SIPResponse object returns true if the message has body or false if it does not. You can call the GetBodyContents() method of a SIPRequest or a SIPResponse object to get a list of body parts. The definition of this method is: public List<MessageContentsContainer> GetBodyContents(); The returned list will always be non-null, even if the message does not have a body. You can enumerate through the returned list object to parse and process each body part. The MessageContentsContainer class is used to contain information about a body contents block. The following code sample shows how to process a SIPRequest containing SDP data and NG9-1-1 location information. The same logic pertains to the SIPResponse class. using SipLib.Core; using SipLib.Body; using SipLib.Sdp; // Import Ng911Lib from NuGet to use using Ng911Lib.Utilities; using Pidf; ... private void ProcessSipRequest(SIPRequest sipRequest) { List<MessageContentsContainer> containers = sipRequest.GetBodyContents(); foreach (MessageContentsContainer container in containers) { if (string.IsNullOrEmpty(container.StringContents) == true) continue; // Skip, log it or do something switch (container.ContentType) { case ContentTypes.sdp: ProcessSdp(container.StringContents); break; case ContentTypes.Pidf: ProcessPidf(container.StringContents); break; } } } private void ProcessSdp(string strSdp) { Sdp sdp = Sdp.ParseSDP(strSdp); // Process the sdp object } private void ProcessPidf(string strPidf) { Presence presence = XmlHelper.DeserializeFromString<Presence>(strPidf); if (presence != null) { // Process the location data } } The GetContentsContainer() method returns the body part for a specified MIME body type. public MessageContentsContainer? GetContentsContainer(string contentType); For example, the following code gets the contents container for the SDP. using SipLib.Core; using SipLib.Body; using SipLib.Sdp; ... private void ProcessSipRequest(SIPRequest sipRequest) { MessageContentsContainer? sdpContainer = sipRequest.GetContentsContainer( ContentTypes.Sdp); if (sdpContainer != null && sdpContainer.StringContents != null) { Sdp sdp = Sdp.ParseSDP(sdpContainer.StringContents); // Process the sdp object } } The ContentTypes class provides named fields that are constant string values for each known MIME type. Use the fields in this class instead of quoted string values to ensure consistency and avoid coding errors. Building SIP Message Bodies The SipBodyBuilder class can be used to build simple or multipart/mixed SIP message bodies and attach the message body to a SIPRequest or a SIPResponse message. Follow these steps to use the SipBodyBuilder class to add a body to a SIP message. Create an instance of the SipBodyBuilder class Convert the object to add to the body to a string Call the AddContent() method of the SipBodyBuilder class for each body part that needs to be attached to the SIP message Call the AttachMessageBody() method of the SipBodyBuilder class with the SIPRequest or the SIPResponse object The AttachMessageBody() method performs the following actions. Concactenates each body part into a string and sets the Body field of the SIPMessage derived object Calculates the total contents length and sets the Content-Length header of the SIPMessage derived object Determines the appropriage Content-Type header value and sets the Content-Type header field for the message The following code sample shows how to use the SipBodyBuilder class. using SipLib.Core; using SipLib.Body; using SipLib.Sdp; ... private void AttachSdp(SIPRequest sipRequest) { SipBodyBuilder bodyBuilder = new SipBodyBuilder(); Sdp sdp = SdpUtils.BuildSimpleAudioSdp(\"192.168.1.100, 7000, \"MyUaName\"); bodyBuilder.AddContent(ContentTypes.sdp, sdp.ToString()); bodyBuilder.AttachMessageBody(sipRequest); }"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "The SipLib Class Library",
    "keywords": "The SipLib Class Library The SipLib class library is a portable, cross-platform class library written in the C# language that targets the .NET 8.0 environment. It may be used by applications that target the Windows Desktop(version 10 or later), Windows Server or Linux operating systems. As a basic protocol class library, this project does not provide implementation of SIP user agents or device specific media endpoints as these components are very application specific. The primary focus of this project is to provide protocol support (message building, message parsing and message transport) for developing Next Generation 9-1-1 (NG9-1-1) functional elements and applications in .NET. This class library provides support for several NG9-1-1 specific requirements such as: The SIP Geolocation related headers (RFC 6442) The use of the SIP Call-Info header for support of caller location data, additional data about a call (RFC 7852) and NG9-1-1 specific call and incident identifiers Use of multipart/mixed content types in SIP message bodies for the SDP, location data and additional call data by-value Quality of Service (QOS) management using IP DSCP packet marking for SIP and media packets Various other requirements defined in the National Emergency Number Association's (NENA) Standard for NG9-1-1. See NENA-STA-010.3b. The classes in this library support the following protocols. Session Initiation Protocol (SIP, RFC 3261) over UDP, TCP and TLS Session Description Protocol (SDP, RFC 8866) Real Time Protocol (RTP, RFC 3550) for transport of audio, video and Real Time Text Real Time Text (RTT, RFC 4103) Message Session Relay Protocol (MSRP, RFC 4975) using TCP or TLS RTP media encryption using SDES-SRTP (RFC 4568, RFC 3711 and RFC 6188) or SDES-DTLS (RFC 5763, RFC 5764 and RFC 3711) Support for IPv4 and IPv6 for SIP, RTP media and MSRP"
  }
}